// Auto-Generated, do not edit
const GENERATED = {
  "buildtime": 1720588015,
  "generatetime": 3441146089,
  "categories": {
    "programming": {
      "name": "programming",
      "languages": {
        "csharp": {
          "name": "csharp",
          "displayname": "C# (C-Sharp)",
          "comment": "#|//",
          "ext": "cs",
          "css": "csharp",
          "categories": "programming",
          "snippets": {
            "arrays": "using System;\nusing System.Linq;\n\nclass Program\n{\n    static void Main()\n    {\n        // Storing a collection of elements of the same data type\n        int[] numbersArray = { 5, 2, 7, 9, 1 };\n\n        // Accessing individual elements via index\n        int thirdElement = numbersArray[2];\n        Console.WriteLine(&quot;Third element: &quot; + thirdElement);\n\n        // Iterating over elements using loops\n        foreach (int number in numbersArray)\n        {\n            Console.Write(number + &quot; &quot;);\n        }\n        Console.WriteLine();\n\n        // Sorting elements in ascending order\n        Array.Sort(numbersArray);\n\n        // Searching for a specific element within the array\n        int searchNumber = 7;\n        int index = Array.IndexOf(numbersArray, searchNumber);\n        Console.WriteLine(&quot;Index of &quot; + searchNumber + &quot; is &quot; + index);\n\n        // Modifying elements at specific positions\n        numbersArray[1] = 10;\n\n        // Adding elements to the end of the array\n        numbersArray = numbersArray.Concat(new int[] { 4 }).ToArray();\n\n        // Removing elements from the array\n        numbersArray = numbersArray.Where(num =&gt; num != 9).ToArray();\n\n        // Merging two arrays into a single array\n        int[] anotherArray = { 3, 8 };\n        int[] mergedArray = numbersArray.Concat(anotherArray).ToArray();\n\n        // Splitting an array into multiple smaller arrays\n        int[][] jaggedArray = numbersArray.Select(val =&gt; new int[] { val }).ToArray();\n\n        // Finding the maximum element in the array\n        int maxNumber = numbersArray.Max();\n        Console.WriteLine(&quot;Maximum number: &quot; + maxNumber);\n\n        // Filtering elements based on a condition\n        int[] filteredArray = numbersArray.Where(num =&gt; num % 2 == 0).ToArray();\n        \n        // Mapping elements to a new value\n        int[] incrementedArray = numbersArray.Select(num =&gt; num + 1).ToArray();\n\n        // Reversing the order of elements in the array\n        Array.Reverse(numbersArray);\n\n        // Calculating the sum of array elements\n        int sum = numbersArray.Sum();\n        Console.WriteLine(&quot;Sum: &quot; + sum);\n\n        // Copying elements from one array to another\n        int[] copiedArray = new int[numbersArray.Length];\n        Array.Copy(numbersArray, copiedArray, numbersArray.Length);\n\n        // Checking if an array contains a certain element\n        bool containsElement = numbersArray.Contains(5);\n        Console.WriteLine(&quot;Contains 5: &quot; + containsElement);\n\n        // Converting an array to a string\n        string arrayAsString = string.Join(&quot;, &quot;, numbersArray);\n        Console.WriteLine(&quot;Array as string: &quot; + arrayAsString);\n\n        // Creating multi-dimensional arrays\n        int[,] multiDimArray = { { 1, 2 }, { 3, 4 } };\n\n        // Binary search using arrays\n        int[] sortedArray = { 1, 2, 3, 4, 5 };\n        int elementToSearch = 3;\n        int binarySearchIndex = Array.BinarySearch(sortedArray, elementToSearch);\n        Console.WriteLine(&quot;Binary search index: &quot; + binarySearchIndex);\n\n        // Quicksort using arrays\n        Array.Sort(sortedArray);\n    }\n}\n",
            "datetime": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        // Displaying the current date and time\n        DateTime currentDateTime = DateTime.Now;\n        Console.WriteLine(&quot;Current Date and Time: &quot; + currentDateTime);\n\n        // Calculating the difference between two dates\n        DateTime date1 = new DateTime(2022, 12, 25);\n        DateTime date2 = new DateTime(2023, 1, 10);\n        TimeSpan difference = date2 - date1;\n        Console.WriteLine(&quot;Difference between two dates: &quot; + difference.TotalDays + &quot; days&quot;);\n\n        // Formatting dates and times for user-friendly display\n        string formattedDateTime = currentDateTime.ToString(&quot;dddd, MMMM dd, yyyy h:mm tt&quot;);\n        Console.WriteLine(&quot;Formatted Date and Time: &quot; + formattedDateTime);\n\n        // Converting between different date and time formats\n        string iso8601DateTime = currentDateTime.ToString(&quot;yyyy-MM-ddTHH:mm:ss.fffffffK&quot;);\n        Console.WriteLine(&quot;ISO 8601 Date and Time: &quot; + iso8601DateTime);\n\n        // Scheduling tasks or events based on specific dates and times\n        DateTime eventDateTime = new DateTime(2023, 6, 30, 14, 0, 0); // June 30, 2023, 2:00 PM\n        Console.WriteLine(&quot;Event Scheduled on: &quot; + eventDateTime);\n\n        // Implementing countdown timers or timers for specific events\n        TimeSpan timeUntilEvent = eventDateTime - DateTime.Now;\n        Console.WriteLine(&quot;Time Until Event: &quot; + timeUntilEvent);\n\n        // Handling time zones and daylight saving time adjustments\n        DateTime utcNow = DateTime.UtcNow;\n        Console.WriteLine(&quot;UTC Date and Time: &quot; + utcNow);\n\n        // Finding the day of week or month for a given date\n        DayOfWeek dayOfWeek = currentDateTime.DayOfWeek;\n        Console.WriteLine(&quot;Day of Week: &quot; + dayOfWeek);\n\n        int month = currentDateTime.Month;\n        Console.WriteLine(&quot;Current Month: &quot; + month);\n\n        // Working with timestamps for tracking when events occur\n        long timestamp = currentDateTime.Ticks;\n        Console.WriteLine(&quot;Timestamp: &quot; + timestamp);\n\n    }\n}\n",
            "dictionaries": "using System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main()\n    {\n        // Storing key-value pairs for quick retrieval\n        Dictionary&lt;string, int&gt; keyValuePairs = new Dictionary&lt;string, int&gt;();\n        keyValuePairs.Add(&quot;apple&quot;, 5);\n        keyValuePairs.Add(&quot;banana&quot;, 3);\n\n        Console.WriteLine(&quot;Value of apple: &quot; + keyValuePairs[&quot;apple&quot;]);\n\n        // Implementing a cache or memoization system\n        Dictionary&lt;int, int&gt; memoizationCache = new Dictionary&lt;int, int&gt;();\n\n        int Fibonacci(int n)\n        {\n            if (n &lt;= 1)\n                return n;\n\n            if (memoizationCache.ContainsKey(n))\n                return memoizationCache[n];\n\n            int result = Fibonacci(n - 1) + Fibonacci(n - 2);\n            memoizationCache.Add(n, result);\n            return result;\n        }\n\n        Console.WriteLine(&quot;Fibonacci value for 10: &quot; + Fibonacci(10));\n\n        // Counting occurrences of elements in a collection\n        Dictionary&lt;int, int&gt; occurrences = new Dictionary&lt;int, int&gt;();\n\n        int[] numbers = { 1, 2, 2, 3, 3, 3 };\n\n        foreach (int num in numbers)\n        {\n            if (occurrences.ContainsKey(num))\n                occurrences[num]++;\n            else\n                occurrences[num] = 1;\n        }\n\n        Console.WriteLine(&quot;Occurrences of 3: &quot; + occurrences[3]);\n\n        // Mapping unique identifiers to objects or data\n        Dictionary&lt;Guid, string&gt; objectMapping = new Dictionary&lt;Guid, string&gt;();\n        Guid id = Guid.NewGuid();\n        objectMapping.Add(id, &quot;John Doe&quot;);\n\n        Console.WriteLine(&quot;Name for Guid &quot; + id + &quot;: &quot; + objectMapping[id]);\n    }\n}\n",
            "filesystem": "using System;\nusing System.IO;\n\nclass Program\n{\n    static void Main()\n    {\n        // Reading a file in a specific format and processing its contents\n        string filePath = &quot;example.txt&quot;;\n        if (File.Exists(filePath))\n        {\n            string[] lines = File.ReadAllLines(filePath);\n            foreach (string line in lines)\n            {\n                // Process each line in the file\n            }\n        }\n\n        // Writing data to a file or creating a new file\n        string newFilePath = &quot;newfile.txt&quot;;\n        File.WriteAllText(newFilePath, &quot;Hello, World!&quot;);\n\n        // Appending data to an existing file\n        File.AppendAllText(newFilePath, &quot;This is additional text.&quot;);\n\n        // Checking if a file or directory exists\n        string directoryPath = &quot;exampleDirectory&quot;;\n        if (Directory.Exists(directoryPath))\n        {\n            Console.WriteLine(&quot;Directory exists.&quot;);\n        }\n\n        // Listing all files and directories within a given directory\n        string[] files = Directory.GetFiles(directoryPath);\n        string[] directories = Directory.GetDirectories(directoryPath);\n\n        // Deleting a file or directory\n        File.Delete(newFilePath);\n        Directory.Delete(directoryPath);\n\n        // Moving or renaming a file or directory\n        string newDirectoryPath = &quot;newDirectory&quot;;\n        Directory.Move(directoryPath, newDirectoryPath);\n        File.Move(newFilePath, &quot;renamedFile.txt&quot;);\n\n        // Creating a temporary file or directory\n        string tempFilePath = Path.GetTempFileName();\n        string tempDirectoryPath = Path.Combine(Path.GetTempPath(), Guid.NewGuid().ToString());\n        Directory.CreateDirectory(tempDirectoryPath);\n\n        // Changing file permissions or ownership\n        File.SetAttributes(newFilePath, FileAttributes.ReadOnly);\n\n        // Searching for a specific file or directory within a directory\n        string[] foundFiles = Directory.GetFiles(directoryPath, &quot;searchKeyword*&quot;);\n    }\n}\n",
            "regexps": "using System;\nusing System.Text.RegularExpressions;\n\nclass Program\n{\n    static void Main()\n    {\n        // Searching for specific patterns in text data\n        string text = &quot;The quick brown fox jumps over the lazy dog.&quot;;\n        string pattern = @&quot;\\b\\w{5}\\b&quot;; // Match 5-letter words\n        MatchCollection matches = Regex.Matches(text, pattern);\n        foreach (Match match in matches)\n        {\n            Console.WriteLine(match.Value);\n        }\n\n        // Validating input forms (such as emails, phone numbers, etc.)\n        string email = &quot;example@example.com&quot;;\n        string emailPattern = @&quot;^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$&quot;;\n        bool isValidEmail = Regex.IsMatch(email, emailPattern);\n        Console.WriteLine(isValidEmail);\n\n        // Data scraping\n        string htmlContent = &quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello, World!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;;\n        string htmlTagPattern = &quot;&lt;.*?&gt;&quot;; // Match HTML tags\n        string cleanText = Regex.Replace(htmlContent, htmlTagPattern, &quot;&quot;);\n        Console.WriteLine(cleanText);\n\n        // Parsing and extracting information from structured data\n        string data = &quot;Name: John, Age: 30, Location: USA&quot;;\n        string agePattern = @&quot;Age:\\s(\\d+)&quot;;\n        Match ageMatch = Regex.Match(data, agePattern);\n        if (ageMatch.Success)\n        {\n            Console.WriteLine(ageMatch.Groups[1].Value);\n        }\n\n        // Replace strings that match a certain pattern with another string\n        string input = &quot;Programming is fun!&quot;;\n        string replaced = Regex.Replace(input, @&quot;\\bfun\\b&quot;, &quot;awesome&quot;);\n        Console.WriteLine(replaced);\n\n        // Tokenizing strings into smaller components\n        string sentence = &quot;Hello, World!&quot;;\n        string[] tokens = Regex.Split(sentence, @&quot;\\W&quot;);\n        foreach (string token in tokens)\n        {\n            Console.WriteLine(token);\n        }\n\n        // Filter and process text\n        string textToFilter = &quot;123abc456xyz789&quot;;\n        string filteredText = Regex.Replace(textToFilter, @&quot;\\d&quot;, &quot;&quot;);\n        Console.WriteLine(filteredText);\n\n        // Other examples omitted for brevity\n    }\n}\n",
            "strings": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        // Concatenating two strings together\n        string concatenated = &quot;Hello, &quot; + &quot;World!&quot;;\n        Console.WriteLine(concatenated);\n\n        // Splitting a string into an array of substrings based on a delimiter\n        string sentence = &quot;The quick brown fox jumps over the lazy dog&quot;;\n        string[] words = sentence.Split(&#x27; &#x27;);\n        foreach (string word in words)\n        {\n            Console.WriteLine(word);\n        }\n\n        // Replacing a specific substring\n        string original = &quot;Hello, World!&quot;;\n        string replaced = original.Replace(&quot;World&quot;, &quot;Universe&quot;);\n        Console.WriteLine(replaced);\n\n        // Removing leading and trailing whitespace\n        string withWhitespaces = &quot;  Trim me!    &quot;;\n        string trimmed = withWhitespaces.Trim();\n        Console.WriteLine(trimmed);\n\n        // Converting to uppercase and lowercase\n        string uppercase = &quot;hello&quot;.ToUpper();\n        string lowercase = &quot;WORLD&quot;.ToLower();\n        Console.WriteLine(uppercase);\n        Console.WriteLine(lowercase);\n\n        // Checking if a string contains a certain substring\n        string checkString = &quot;Hello, Universe!&quot;;\n        bool containsSubstr = checkString.Contains(&quot;Universe&quot;);\n        Console.WriteLine(containsSubstr);\n\n        // Finding the index of a specific substring\n        string parentString = &quot;The quick brown fox&quot;;\n        int index = parentString.IndexOf(&quot;brown&quot;);\n        Console.WriteLine(index);\n\n        // Getting the length of a string\n        string lengthString = &quot;C# Programming&quot;;\n        int length = lengthString.Length;\n        Console.WriteLine(length);\n\n        // Reversing a string\n        char[] charArray = &quot;Reverse&quot;.ToCharArray();\n        Array.Reverse(charArray);\n        string reversed = new string(charArray);\n        Console.WriteLine(reversed);\n\n        // Formatting a string with placeholders for variables\n        string formatted = string.Format(&quot;{0} is {1} years old.&quot;, &quot;Alice&quot;, 25);\n        Console.WriteLine(formatted);\n\n        // Parsing and manipulating data stored in JSON format\n        string jsonString = &quot;{\\&quot;name\\&quot;:\\&quot;John\\&quot;,\\&quot;age\\&quot;:30}&quot;;\n        // Example of deserializing JSON using a serializer (Newtonsoft.Json)\n        dynamic parsedJson = Newtonsoft.Json.JsonConvert.DeserializeObject(jsonString);\n        Console.WriteLine($&quot;Name: {parsedJson.name}, Age: {parsedJson.age}&quot;);\n\n        // Generating a string representation of an object\n        // Example using a custom object\n        Person person = new Person { Name = &quot;Bob&quot;, Age = 28 };\n        string debugString = person.ToString();\n        Console.WriteLine(debugString);\n\n        // Validating and sanitizing user input\n        string userInput = &quot;   Input    &quot;;\n        string validatedInput = userInput.Trim();\n        Console.WriteLine(validatedInput);\n\n        // Implementing string matching algorithm\n        string mainString = &quot;programming&quot;;\n        string pattern = &quot;gram&quot;;\n        // Example using IndexOf for simple pattern matching\n        int matchIndex = mainString.IndexOf(pattern);\n        Console.WriteLine(matchIndex);\n    }\n}\n\nclass Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n\n    public override string ToString()\n    {\n        return $&quot;Person: {Name}, Age: {Age}&quot;;\n    }\n}\n",
            "threading": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static void Main()\n    {\n        // Improving performance by running tasks concurrently\n        Task.Run(() =&gt;\n        {\n            Console.WriteLine(&quot;Task 1 is running on a separate thread.&quot;);\n        });\n\n        // Handling multiple tasks simultaneously without blocking the main program\n        Task task2 = Task.Run(() =&gt;\n        {\n            Console.WriteLine(&quot;Task 2 is running concurrently with Task 1.&quot;);\n        });\n\n        task2.Wait(); // Wait for task2 to complete before proceeding\n\n        // Updating UI elements in response to asynchronous events\n        Task.Run(() =&gt;\n        {\n            UpdateUI(&quot;Updated UI asynchronously&quot;);\n        });\n\n        // Processing large amounts of data in the background while the main thread remains responsive\n        Task.Run(() =&gt;\n        {\n            ProcessDataInBackground();\n        });\n\n        // Performing network requests without freezing the application&#x27;s user interface\n        Task.Run(() =&gt;\n        {\n            MakeNetworkRequest();\n        });\n\n        Console.ReadKey();\n    }\n\n    static void UpdateUI(string message)\n    {\n        Console.WriteLine(message);\n    }\n\n    static void ProcessDataInBackground()\n    {\n        for (int i = 0; i &lt; 1000000; i++)\n        {\n            // Process large data here\n        }\n        Console.WriteLine(&quot;Data processing in the background completed.&quot;);\n    }\n\n    static void MakeNetworkRequest()\n    {\n        Console.WriteLine(&quot;Network request is being made asynchronously.&quot;);\n    }\n}\n"
          }
        },
        "ruby": {
          "name": "ruby",
          "displayname": "Ruby",
          "comment": "#|//",
          "ext": "rb",
          "css": "ruby",
          "categories": "programming",
          "snippets": {
            "arrays": "# Storing a collection of elements of the same data type\narr = [1, 2, 3, 4, 5]\n\n# Accessing individual elements via index\nputs arr[2]\n\n# Iterating over elements using loops\narr.each do |element|\n  puts element\nend\n\n# Sorting elements in ascending order\nsorted_arr = arr.sort\nputs sorted_arr\n\n# Sorting elements in descending order\nreverse_sorted_arr = arr.sort.reverse\nputs reverse_sorted_arr\n\n# Searching for a specific element within the array\nputs arr.include?(3)\n\n# Modifying elements at specific positions\narr[1] = 20\nputs arr\n\n# Adding elements to the end of the array\narr.push(6)\nputs arr\n\n# Removing elements from the array\narr.delete(3)\nputs arr\n\n# Merging two arrays into a single array\narr2 = [7, 8, 9]\nmerged_arr = arr + arr2\nputs merged_arr\n\n# Splitting an array into multiple smaller arrays\nsplit_arr = arr.each_slice(2).to_a\nputs split_arr\n\n# Finding the maximum element in the array\nmax_element = arr.max\nputs max_element\n\n# Finding the minimum element in the array\nmin_element = arr.min\nputs min_element\n\n# Filtering elements based on a condition\nfiltered_arr = arr.select { |element| element &gt; 3 }\nputs filtered_arr\n\n# Mapping elements to a new value\nmapped_arr = arr.map { |element| element * 2 }\nputs mapped_arr\n\n# Reversing the order of elements in the array\nreversed_arr = arr.reverse\nputs reversed_arr\n\n# Calculating the sum of array elements\nsum = arr.sum\nputs sum\n\n# Copying elements from one array to another\ncopied_arr = arr.clone\nputs copied_arr\n\n# Checking if an array contains a certain element\nputs arr.include?(5)\n\n# Converting an array to a string\narr_string = arr.join(&#x27;,&#x27;)\nputs arr_string\n\n# Converting a string back to an array\nnew_arr = arr_string.split(&#x27;,&#x27;)\nputs new_arr\n\n# Creating multi-dimensional arrays\nmulti_dim_arr = [[1, 2], [3, 4], [5, 6]]\nputs multi_dim_arr\n\n# Implementing binary search with arrays\ndef binary_search(arr, target)\n  low = 0\n  high = arr.length - 1\n\n  while low &lt;= high\n    mid = (low + high) / 2\n    if arr[mid] == target\n      return mid\n    elsif arr[mid] &lt; target\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend\n\nputs binary_search(sorted_arr, 4)\n",
            "datetime": "# Displaying the current date and time\ncurrent_time = Time.now\nputs &quot;Current date and time: #{current_time}&quot;\n\n# Calculating the difference between two dates\ndate1 = Time.new(2021, 7, 1)\ndate2 = Time.new(2021, 7, 15)\ndifference = (date2 - date1) / (60 * 60 * 24)\nputs &quot;Difference between the two dates: #{difference} days&quot;\n\n# Formatting dates and times for user-friendly display\nformatted_time = current_time.strftime(&quot;%A, %B %d, %Y %H:%M:%S&quot;)\nputs &quot;Formatted date and time: #{formatted_time}&quot;\n\n# Converting between different date and time formats\ndate_string = &quot;2021-07-20 12:00:00&quot;\nconverted_time = DateTime.strptime(date_string, &quot;%Y-%m-%d %H:%M:%S&quot;)\nputs &quot;Converted time: #{converted_time}&quot;\n\n# Scheduling tasks or events based on specific dates and times\nupcoming_event = Time.new(2022, 1, 1, 10, 0, 0)\nputs &quot;Upcoming event scheduled for: #{upcoming_event}&quot;\n\n# Implementing countdown timers or timers for specific events\nremaining_time = (upcoming_event - current_time).to_i\nputs &quot;Time remaining until the event: #{remaining_time} seconds&quot;\n\n# Handling time zones and daylight saving time adjustments\nrequire &#x27;tzinfo&#x27;\ntime_zone = TZInfo::Timezone.get(&#x27;America/New_York&#x27;)\nlocal_time = time_zone.utc_to_local(current_time)\nputs &quot;Current time in New York: #{local_time}&quot;\n\n# Finding the day of week or month for a given date\nday_of_week = current_time.strftime(&quot;%A&quot;)\nmonth = current_time.strftime(&quot;%B&quot;)\nputs &quot;Day of the week: #{day_of_week}, Month: #{month}&quot;\n\n# Working with timestamps for tracking when events occur\nevent_timestamps = [Time.new(2022, 1, 1), Time.new(2022, 2, 1), Time.new(2022, 3, 1)]\nputs &quot;Event timestamps: #{event_timestamps}&quot;\n",
            "dictionaries": "# Storing key-value pairs for quick retrieval\nmy_dict = {\n  &quot;key1&quot; =&gt; &quot;value1&quot;,\n  &quot;key2&quot; =&gt; &quot;value2&quot;,\n  &quot;key3&quot; =&gt; &quot;value3&quot;\n}\n\n# Implementing a cache or memoization system\ncache = {}\n\ndef fibonacci(n, cache)\n  return n if n &lt;= 1\n  \n  # Check if the value is already cached to avoid recomputation\n  if cache.key?(n)\n    return cache[n]\n  else\n    result = fibonacci(n - 1, cache) + fibonacci(n - 2, cache)\n    cache[n] = result\n    return result\n  end\nend\n\n# Counting occurrences of elements in a collection\noccurrences = Hash.new(0)\n\nnumbers = [1, 2, 3, 4, 1, 2, 4, 1, 1]\n\nnumbers.each do |num|\n  occurrences[num] += 1\nend\n\n# Mapping unique identifiers to objects or data\nstudent_data = {\n  &quot;S101&quot; =&gt; { name: &quot;Alice&quot;, age: 25 },\n  &quot;S102&quot; =&gt; { name: &quot;Bob&quot;, age: 22 },\n  &quot;S103&quot; =&gt; { name: &quot;Charlie&quot;, age: 24 }\n}\n\n# Building efficient lookup tables for data processing\nlookup_table = {\n  &quot;apple&quot; =&gt; &quot;fruit&quot;,\n  &quot;broccoli&quot; =&gt; &quot;vegetable&quot;,\n  &quot;chicken&quot; =&gt; &quot;protein&quot;\n}\n\n# Checking for the existence of an element in a collection\nmy_list = [1, 2, 3, 4, 5]\n\nif my_list.include?(3)\n  puts &quot;Element found!&quot;\nelse\n  puts &quot;Element not found!&quot;\nend\n\n# Implementing a data structure like a symbol table or associative array\nsymbol_table = {\n  name: &quot;John&quot;,\n  age: 30,\n  city: &quot;New York&quot;\n}\n\n# Grouping and organizing data based on certain criteria\npeople = {\n  &quot;Male&quot; =&gt; [&quot;John&quot;, &quot;Mike&quot;, &quot;Alex&quot;],\n  &quot;Female&quot; =&gt; [&quot;Emma&quot;, &quot;Sophia&quot;, &quot;Olivia&quot;]\n}\n\n# Providing a fast method for searching and accessing data\ncontact_info = {\n  &quot;Alice&quot; =&gt; { phone: &quot;123-456-7890&quot;, email: &quot;alice@example.com&quot; },\n  &quot;Bob&quot; =&gt; { phone: &quot;987-654-3210&quot;, email: &quot;bob@example.com&quot; }\n}\n",
            "filesystem": "# Reading a file in a specific format and processing its contents\nfile_path = &quot;example.txt&quot;\n\nFile.open(file_path, &quot;r&quot;) do |file|\n  file.each_line do |line|\n    # Your processing logic here\n    puts line\n  end\nend\n\n# Writing data to a file or creating a new file\nFile.open(&quot;output.txt&quot;, &quot;w&quot;) do |file|\n  file.puts &quot;Hello, World!&quot;\nend\n\n# Appending data to an existing file\nFile.open(&quot;output.txt&quot;, &quot;a&quot;) do |file|\n  file.puts &quot;Appending more data&quot;\nend\n\n# Checking if a file or directory exists\nfile_path = &quot;example.txt&quot;\nputs File.exist?(file_path)\n\n# Listing all files and directories within a given directory\ndir_path = &quot;path/to/directory&quot;\nDir.entries(dir_path).each do |entry|\n  puts entry\nend\n\n# Deleting a file\nFile.delete(&quot;file_to_delete.txt&quot;)\n\n# Moving or renaming a file or directory\nFile.rename(&quot;old_file.txt&quot;, &quot;new_file.txt&quot;)\n\n# Creating a temporary file\ntemp_file = Tempfile.new(&quot;temp&quot;)\nputs temp_file.path\n\n# Changing file permissions or ownership\nFile.chmod(0644, &quot;file_to_change_permissions.txt&quot;)\n\n# Searching for a specific file or directory within a directory\ndir_path = &quot;path/to/search&quot;\nsearch_query = &quot;file_to_search.txt&quot;\nDir.glob(File.join(dir_path, &#x27;**&#x27;, search_query)).each do |file|\n  puts file\nend\n",
            "regexps": "# Searching for specific patterns in text data\ntext = &quot;The quick brown fox jumps over the lazy dog&quot;\npattern = /fox/\nmatches = text.scan(pattern)\nputs &quot;Matches found for &#x27;fox&#x27;: #{matches}&quot;\n\n# Validating input forms (such as emails, phone numbers, etc.)\nemail = &quot;example@email.com&quot;\nphone_number = &quot;123-456-7890&quot;\nemail_valid = /\\A[\\w+\\-.]+@[a-z\\d\\-]+(\\.[a-z]+)*\\.[a-z]+\\z/.match?(email)\nphone_valid = /\\A\\d{3}-\\d{3}-\\d{4}\\z/.match?(phone_number)\nputs &quot;Is email valid? #{email_valid}&quot;\nputs &quot;Is phone number valid? #{phone_valid}&quot;\n\n# Data scraping\nhtml = &quot;&lt;div&gt;&lt;p&gt;Hello World&lt;/p&gt;&lt;a href=&#x27;https://example.com&#x27;&gt;Link&lt;/a&gt;&lt;/div&gt;&quot;\nlinks = html.scan(/&lt;a href=&#x27;(https?:\\/\\/[\\S]+)&#x27;&gt;/)\nputs &quot;Links found in HTML: #{links.flatten}&quot;\n\n# Parsing and extracting information from structured data\ndata = &quot;Name: John, Age: 30, Occupation: Developer&quot;\ninfo = data.match(/Name: (\\w+), Age: (\\d+), Occupation: (\\w+)/)\nputs &quot;Extracted data - Name: #{info[1]}, Age: #{info[2]}, Occupation: #{info[3]}&quot;\n\n# Replacing strings that match a certain pattern with another string\nsentence = &quot;I love apples and oranges&quot;\nnew_sentence = sentence.gsub(/apples|oranges/, &quot;bananas&quot;)\nputs &quot;Replaced fruits with bananas: #{new_sentence}&quot;\n\n# Tokenizing strings into smaller components\nsentence = &quot;This is a sentence&quot;\ntokens = sentence.split(&quot; &quot;)\nputs &quot;Tokens: #{tokens}&quot;\n\n# Filtering and processing text\ndata = &quot;123abc456def789ghi&quot;\nfiltered_data = data.scan(/\\d+/).map(&amp;:to_i)\nputs &quot;Filtered numbers: #{filtered_data}&quot;\n\n# Pattern matching in search algorithms\ntext = &quot;abaabcac&quot;\npattern = &quot;ab&quot;\nmatches = text.scan(/(?=#{pattern})/)\nputs &quot;Matches found for &#x27;ab&#x27;: #{matches}&quot;\n\n# Checking for the presence of specific characters or words\nsentence = &quot;The red car is fast&quot;\npresence = sentence.match?(/red/)\nputs &quot;Does sentence contain &#x27;red&#x27;? #{presence}&quot;\n\n# Text manipulation and transformation\nsentence = &quot;hello world&quot;\ntransformed = sentence.gsub(/(hello) (world)/, &#x27;\\2, \\1!&#x27;)\nputs &quot;Transformed sentence: #{transformed}&quot;\n\n# Input sanitization\nuser_input = &quot;user&lt;&gt;&amp;input&quot;\nsanitized_input = user_input.gsub(/&lt;|&gt;|&amp;/, &quot;&quot;)\nputs &quot;Sanitized input: #{sanitized_input}&quot;\n\n# Pattern-based data extraction\ndata = &quot;Name: John, Age: 30&quot;\nextracted_data = data.match(/Name: (\\w+), Age: (\\d+)/)\nputs &quot;Extracted data - Name: #{extracted_data[1]}, Age: #{extracted_data[2]}&quot;\n\n# Syntax highlighting in text editors or IDEs\nruby_code = &quot;def hello_world(name)\\n  puts &#x27;Hello, #{name}!&#x27;\\nend&quot;\nhighlighted_code = ruby_code.gsub(/(puts|def)/, &#x27;\\1&#x27;.upcase)\nputs &quot;Highlighted code:\\n#{highlighted_code}&quot;\n\n# Data validation in form submission\npassword = &quot;P@ssw0rd!&quot;\nvalid_password = /\\A(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&amp;])[A-Za-z\\d@$!%*?&amp;]{8,}\\z/.match?(password)\nputs &quot;Is password valid? #{valid_password}&quot;\n\n# Extracting data from log files or other text-based records\nlog_file = &quot;Error - File not found\\nWarning - Low memory\\nError - Connection lost&quot;\nerrors = log_file.scan(/Error - .+/)\nputs &quot;Errors found in log file: #{errors}&quot;\n\n# Pattern matching in natural language processing tasks\nsentence = &quot;I am learning natural language processing&quot;\npattern = /natural language processing/\nmatch = sentence.match(pattern)\nputs &quot;Match found for &#x27;natural language processing&#x27;: #{match}&quot;\n\n# Data cleaning and preprocessing\ndirty_data = &quot;abc123!@#&quot;\nclean_data = dirty_data.gsub(/\\W/, &quot;&quot;)\nputs &quot;Cleaned data: #{clean_data}&quot;\n\n# Automating repetitive text processing tasks\ntext = &quot;It is what it is&quot;\nprocessed_text = text.gsub(/is/, &quot;was&quot;)\nputs &quot;Processed text: #{processed_text}&quot;\n\n# Generating reports or summaries based on text patterns\nreport_data = &quot;Total sales: $1000\\nTotal expenses: $500\\nProfit: $500&quot;\nsummary = report_data.scan(/\\$(\\d+)/).map(&amp;:to_i).sum\nputs &quot;Total profit: $#{summary}&quot;\n\n# Customizing search functionality in web applications\nsearch_query = &quot;programming language&quot;\nresults = [&quot;ruby&quot;, &quot;java&quot;, &quot;python&quot;].grep(/#{search_query}/)\nputs &quot;Search results: #{results}&quot;\n\n# Validating and formatting user input\ninput = &quot;  username123  &quot;\nformatted_input = input.strip.downcase\nvalid_username = formatted_input.match?(/\\A[a-z0-9]+\\z/)\nputs &quot;Is username valid? #{valid_username}&quot;\n\n# Parsing URLs and query parameters\nurl = &quot;https://example.com/page?query=example&quot;\nparsed_url = url.match(/(https?):\\/\\/([\\w\\.]+)/)\nparsed_query = url.match(/query=([^&amp;]+)/)\nputs &quot;Protocol: #{parsed_url[1]}, Domain: #{parsed_url[2]}, Query: #{parsed_query[1]}&quot;\n\n# Implementing text-based search functionality\ntext = &quot;The quick brown fox jumps over the lazy dog&quot;\nsearch_query = &quot;fox&quot;\nresult = text.match(/#{search_query}/)\nputs &quot;Search result: #{result}&quot;\n",
            "strings": "# Concatenating two strings together to create a longer string\nconcatenated_string = &quot;Hello, &quot; + &quot;World&quot;\n\n# Splitting a string into an array of substrings based on a delimiter\nsplit_string = &quot;apple,orange,banana&quot;.split(&quot;,&quot;)\n\n# Replacing a specific substring with another substring within a larger string\noriginal_string = &quot;I love programming in Ruby&quot;\nreplaced_string = original_string.gsub(&quot;Ruby&quot;, &quot;Python&quot;)\n\n# Removing leading and trailing whitespace from a string\nwhitespace_string = &quot;   Some text with spaces   &quot;.strip\n\n# Converting a string to uppercase or lowercase\nuppercase_string = &quot;convert me to uppercase&quot;.upcase\nlowercase_string = &quot;CONVERT ME TO lowercase&quot;.downcase\n\n# Checking if a string contains a certain substring\nstring_to_check = &quot;This is a sample string&quot;\nsubstring = &quot;sample&quot;\ncontains_substring = string_to_check.include?(substring)\n\n# Finding the index of a specific substring within a larger string\nlarger_string = &quot;Finding a substring within a string&quot;\nsubstring_index = larger_string.index(&quot;substring&quot;)\n\n# Getting the length of a string\nlength_of_string = &quot;Count me&quot;.length\n\n# Reversing a string\noriginal_word = &quot;Ruby&quot;\nreversed_word = original_word.reverse\n\n# Formatting a string with placeholders for variables\nname = &quot;John&quot;\nage = 30\nformatted_string = &quot;My name is #{name} and I am #{age} years old&quot;\n\n# Parsing and manipulating data stored in a string format (such as JSON or XML)\nrequire &#x27;json&#x27;\njson_string = &#x27;{&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 25}&#x27;\nparsed_json = JSON.parse(json_string)\nname_from_json = parsed_json[&quot;name&quot;]\n\n# Generating a string representation of an object for debugging or logging\nclass Person\n  attr_accessor :name, :age\n\n  def initialize(name, age)\n    @name = name\n    @age = age\n  end\n\n  def to_s\n    &quot;Person: #{@name}, Age: #{@age}&quot;\n  end\nend\n\nperson = Person.new(&quot;Bob&quot;, 40)\nobject_string = person.to_s\n\n# Validating and sanitizing user input received as strings\ninput = &quot;User input&quot;\nsanitized_input = input.gsub(/[^a-zA-Z0-9\\s]/, &quot;&quot;)\n\n# Implementing algorithms like string matching, searching, or sorting\nsorted_strings = [&quot;banana&quot;, &quot;apple&quot;, &quot;cherry&quot;].sort\n\n# Print results for demonstration\nputs concatenated_string\nputs split_string\nputs replaced_string\nputs whitespace_string\nputs uppercase_string\nputs lowercase_string\nputs contains_substring\nputs substring_index\nputs length_of_string\nputs reversed_word\nputs formatted_string\nputs name_from_json\nputs object_string\nputs sanitized_input\nputs sorted_strings\n",
            "threading": "# Example of threading and asynchronous execution in Ruby\n\nrequire &#x27;thread&#x27;\n\n# Improving performance by running tasks concurrently\ntask1 = Thread.new do\n  puts &quot;Task 1: Started&quot;\n  sleep 2\n  puts &quot;Task 1: Completed&quot;\nend\n\ntask2 = Thread.new do\n  puts &quot;Task 2: Started&quot;\n  sleep 1\n  puts &quot;Task 2: Completed&quot;\nend\n\ntask1.join\ntask2.join\n\n# Handling multiple tasks simultaneously without blocking the main program\nmutex = Mutex.new\nqueue = Queue.new\n\nproducer = Thread.new do\n  5.times do |i|\n    sleep rand(0..2)\n    mutex.synchronize do\n      queue &lt;&lt; &quot;Task #{i}&quot;\n    end\n  end\nend\n\nconsumer = Thread.new do\n  5.times do |i|\n    data = nil\n    mutex.synchronize do\n      data = queue.pop\n    end\n    puts &quot;Consumer received: #{data}&quot;\n  end\nend\n\nproducer.join\nconsumer.join\n\n# Updating UI elements in response to asynchronous events\ndef update_ui(value)\n  Thread.new do\n    sleep 1 # Simulating some asynchronous event\n    puts &quot;Updating UI with value: #{value}&quot;\n  end\nend\n\nupdate_ui(&quot;New data received&quot;)\n\n# Processing large amounts of data in the background while the main thread remains responsive\ndata_processing = Thread.new do\n  1000.times do |i|\n    # Processing large amounts of data (simulated with sleep)\n    sleep 0.001\n  end\nend\n\ndata_processing.join\n\n# Performing network requests without freezing the application&#x27;s user interface\nrequire &#x27;net/http&#x27;\n\nThread.new do\n  uri = URI(&#x27;https://jsonplaceholder.typicode.com/posts/1&#x27;)\n  response = Net::HTTP.get(uri)\n  \n  puts &quot;Response from API: #{response}&quot;\nend\n\nsleep 2 # Just to keep the main program running for a while\n"
          }
        },
        "java": {
          "name": "java",
          "displayname": "Java",
          "comment": "#|//",
          "ext": "java",
          "css": "java",
          "categories": "programming",
          "snippets": {
            "arrays": "import java.util.Arrays;\n\npublic class ArrayExamples {\n\n    public static void main(String[] args) {\n        // Storing a collection of elements of the same data type\n        int[] intArray = {4, 6, 2, 8, 1};\n\n        // Accessing individual elements via index\n        int elementAtIndexTwo = intArray[2];\n\n        // Iterating over elements using loops\n        for (int i = 0; i &lt; intArray.length; i++) {\n            System.out.println(intArray[i]);\n        }\n\n        // Sorting elements in ascending order\n        Arrays.sort(intArray);\n\n        // Searching for a specific element within the array\n        int indexOfElement = Arrays.binarySearch(intArray, 6);\n\n        // Modifying elements at specific positions\n        intArray[3] = 10;\n\n        // Adding elements to the end of the array\n        int[] newArray = Arrays.copyOf(intArray, intArray.length + 1);\n        newArray[newArray.length - 1] = 5;\n\n        // Removing elements from the array\n        int[] smallerArray = Arrays.copyOfRange(intArray, 0, intArray.length - 1);\n        \n        // Merging two arrays into a single array\n        int[] secondArray = {3, 7, 9};\n        int[] mergedArray = new int[intArray.length + secondArray.length];\n        System.arraycopy(intArray, 0, mergedArray, 0, intArray.length);\n        System.arraycopy(secondArray, 0, mergedArray, intArray.length, secondArray.length);\n\n        // Splitting an array into multiple smaller arrays\n        int[][] splitArrays = {Arrays.copyOfRange(intArray, 0, 2), Arrays.copyOfRange(intArray, 2, intArray.length)};\n\n        // Finding the maximum element in the array\n        int maxElement = Arrays.stream(intArray).max().getAsInt();\n\n        // Filtering elements based on a condition\n        int[] filteredArray = Arrays.stream(intArray).filter(x -&gt; x &gt; 5).toArray();\n\n        // Mapping elements to a new value\n        int[] mappedArray = Arrays.stream(intArray).map(x -&gt; x * 2).toArray();\n\n        // Reversing the order of elements in the array\n        int[] reversedArray = new int[intArray.length];\n        for (int i = 0; i &lt; intArray.length; i++) {\n            reversedArray[i] = intArray[intArray.length - 1 - i];\n        }\n\n        // Calculating the sum of array elements\n        int sum = Arrays.stream(intArray).sum();\n\n        // Copying elements from one array to another\n        int[] copiedArray = Arrays.copyOf(intArray, intArray.length);\n\n        // Checking if an array contains a certain element\n        boolean containsElement = Arrays.stream(intArray).anyMatch(x -&gt; x == 2);\n\n        // Converting an array to a string\n        String arrayAsString = Arrays.toString(intArray);\n\n        // Creating multi-dimensional arrays for complex data structures\n        int[][] multiDimArray = new int[3][3];\n\n        // Implementing binary search using arrays\n        int searchValue = 6;\n        int binaryIndex = Arrays.binarySearch(intArray, searchValue);\n\n        // Print outputs for verification\n        System.out.println(&quot;Element at index 2: &quot; + elementAtIndexTwo);\n        System.out.println(&quot;Sorted Array: &quot; + Arrays.toString(intArray));\n        System.out.println(&quot;Index of element 6: &quot; + indexOfElement);\n        System.out.println(&quot;Modified Array: &quot; + Arrays.toString(intArray));\n        System.out.println(&quot;New Array with added element: &quot; + Arrays.toString(newArray));\n        System.out.println(&quot;Smaller Array: &quot; + Arrays.toString(smallerArray));\n        System.out.println(&quot;Merged Array: &quot; + Arrays.toString(mergedArray));\n        System.out.println(&quot;Split Arrays: &quot; + Arrays.deepToString(splitArrays));\n        System.out.println(&quot;Max Element: &quot; + maxElement);\n        System.out.println(&quot;Filtered Array: &quot; + Arrays.toString(filteredArray));\n        System.out.println(&quot;Mapped Array: &quot; + Arrays.toString(mappedArray));\n        System.out.println(&quot;Reversed Array: &quot; + Arrays.toString(reversedArray));\n        System.out.println(&quot;Sum of Array: &quot; + sum);\n        System.out.println(&quot;Copied Array: &quot; + Arrays.toString(copiedArray));\n        System.out.println(&quot;Array contains element 2: &quot; + containsElement);\n        System.out.println(&quot;Array as String: &quot; + arrayAsString);\n        System.out.println(&quot;Multi-dimensional Array: &quot; + Arrays.deepToString(multiDimArray));\n        System.out.println(&quot;Index of element 6 (Binary Search): &quot; + binaryIndex);\n    }\n}\n",
            "datetime": "import java.time.LocalDate;\nimport java.time.LocalTime;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.time.Duration;\nimport java.time.ZoneId;\nimport java.time.ZonedDateTime;\nimport java.time.temporal.ChronoUnit;\n\npublic class DateTimeExamples {\n    public static void main(String[] args) {\n        // Displaying the current date and time\n        LocalDate currentDate = LocalDate.now();\n        LocalTime currentTime = LocalTime.now();\n        System.out.println(&quot;Current Date: &quot; + currentDate);\n        System.out.println(&quot;Current Time: &quot; + currentTime);\n        \n        // Calculating the difference between two dates\n        LocalDate date1 = LocalDate.of(2022, 12, 25);\n        LocalDate date2 = LocalDate.now();\n        long daysDifference = ChronoUnit.DAYS.between(date2, date1);\n        System.out.println(&quot;Days until Christmas: &quot; + daysDifference);\n        \n        // Formatting dates and times for user-friendly display\n        LocalDateTime dateTime = LocalDateTime.now();\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss&quot;);\n        String formattedDateTime = dateTime.format(formatter);\n        System.out.println(&quot;Formatted Date and Time: &quot; + formattedDateTime);\n        \n        // Converting between different date and time formats\n        String dateStr = &quot;2021-09-15&quot;;\n        LocalDate parsedDate = LocalDate.parse(dateStr);\n        System.out.println(&quot;Parsed Date: &quot; + parsedDate);\n        \n        // Scheduling tasks or events based on specific dates and times\n        LocalDateTime eventDateTime = LocalDateTime.of(2022, 8, 10, 15, 30);\n        if (LocalDateTime.now().isAfter(eventDateTime)) {\n            System.out.println(&quot;Event has passed&quot;);\n        } else {\n            System.out.println(&quot;Event is scheduled for: &quot; + eventDateTime);\n        }\n        \n        // Implementing countdown timers or timers for specific events\n        LocalDateTime countdownEnd = LocalDateTime.of(2022, 11, 1, 12, 0);\n        Duration timeUntilEnd = Duration.between(LocalDateTime.now(), countdownEnd);\n        long hours = timeUntilEnd.toHours();\n        long minutes = timeUntilEnd.toMinutes() % 60;\n        System.out.println(&quot;Time until the end: &quot; + hours + &quot; hours and &quot; + minutes + &quot; minutes&quot;);\n        \n        // Handling time zones and daylight saving time adjustments\n        LocalDateTime localDateTime = LocalDateTime.now();\n        ZoneId zoneId = ZoneId.of(&quot;America/New_York&quot;);\n        ZonedDateTime zonedDateTime = ZonedDateTime.of(localDateTime, zoneId);\n        System.out.println(&quot;New York Time: &quot; + zonedDateTime);\n        \n        // Finding the day of the week for a given date\n        LocalDate someDate = LocalDate.of(2022, 5, 20);\n        System.out.println(&quot;Day of the week: &quot; + someDate.getDayOfWeek());\n        \n        // Working with timestamps for tracking when events occur\n        long timestamp = System.currentTimeMillis();\n        System.out.println(&quot;Timestamp in milliseconds: &quot; + timestamp);\n    }\n}\n",
            "dictionaries": "[\n  &quot;import java.util.HashMap;&quot;,\n  &quot;import java.util.Map;&quot;,\n  &quot;&quot;,\n  &quot;public class DictionariesAndHashmaps {&quot;,\n  &quot;    public static void main(String[] args) {&quot;,\n  &quot;        // Storing key-value pairs for quick retrieval&quot;,\n  &quot;        Map&lt;String, Integer&gt; keyValueMap = new HashMap&lt;&gt;();&quot;,\n  &quot;        keyValueMap.put(\\&quot;apple\\&quot;, 5);&quot;,\n  &quot;        keyValueMap.put(\\&quot;banana\\&quot;, 10);&quot;,\n  &quot;&quot;,\n  &quot;        // Implementing a cache or memoization system&quot;,\n  &quot;        Map&lt;Integer, Integer&gt; memoizationCache = new HashMap&lt;&gt;();&quot;,\n  &quot;&quot;,\n  &quot;        // Counting occurrences of elements in a collection&quot;,\n  &quot;        Map&lt;Character, Integer&gt; charOccurrences = new HashMap&lt;&gt;();&quot;,\n  &quot;&quot;,\n  &quot;        // Mapping unique identifiers to objects or data&quot;,\n  &quot;        Map&lt;Long, String&gt; idToObjectMap = new HashMap&lt;&gt;();&quot;,\n  &quot;&quot;,\n  &quot;        // Building efficient lookup tables for data processing&quot;,\n  &quot;        Map&lt;String, Double&gt; lookupTable = new HashMap&lt;&gt;();&quot;,\n  &quot;&quot;,\n  &quot;        // Checking for the existence of an element in a collection&quot;,\n  &quot;        if (keyValueMap.containsKey(\\&quot;apple\\&quot;)) {&quot;,\n  &quot;            System.out.println(\\&quot;Apple exists\\&quot;);&quot;,\n  &quot;        }&quot;,\n  &quot;&quot;,\n  &quot;        // Implementing a data structure like a symbol table or associative array&quot;,\n  &quot;        Map&lt;String, String&gt; symbolTable = new HashMap&lt;&gt;();&quot;,\n  &quot;&quot;,\n  &quot;        // Grouping and organizing data based on certain criteria&quot;,\n  &quot;        Map&lt;String, List&lt;String&gt;&gt; dataGroups = new HashMap&lt;&gt;();&quot;,\n  &quot;&quot;,\n  &quot;        // Providing a fast method for searching and accessing data&quot;,\n  &quot;        if (idToObjectMap.containsKey(123L)) {&quot;,\n  &quot;            System.out.println(\\&quot;Object with id 123 exists\\&quot;);&quot;,\n  &quot;        }&quot;,\n  &quot;    }&quot;,\n  &quot;}&quot;\n]",
            "filesystem": "import java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FileInteractionExamples {\n\n    public static void main(String[] args) {\n        // Reading a file in a specific format and processing its contents\n        File file = new File(&quot;example.txt&quot;);\n        // code for reading the file and processing its contents\n\n        // Writing data to a file or creating a new file\n        try {\n            FileWriter writer = new FileWriter(&quot;output.txt&quot;);\n            writer.write(&quot;Hello, this is some data to be written to the file.&quot;);\n            writer.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        // Appending data to an existing file\n        try {\n            FileWriter writer = new FileWriter(&quot;output.txt&quot;, true);\n            writer.write(&quot;\\nAdditional data to append to the file.&quot;);\n            writer.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        // Checking if a file or directory exists\n        File checkFile = new File(&quot;example.txt&quot;);\n        if (checkFile.exists()) {\n            System.out.println(&quot;File exists.&quot;);\n        }\n\n        // Listing all files and directories within a given directory\n        File directory = new File(&quot;path/to/directory&quot;);\n        File[] files = directory.listFiles();\n        for (File f : files) {\n            System.out.println(f.getName());\n        }\n\n        // Deleting a file or directory\n        File deleteFile = new File(&quot;fileToDelete.txt&quot;);\n        deleteFile.delete();\n\n        // Moving or renaming a file or directory\n        File oldFile = new File(&quot;oldFile.txt&quot;);\n        File newFile = new File(&quot;newFile.txt&quot;);\n        oldFile.renameTo(newFile);\n\n        // Creating a temporary file or directory\n        try {\n            File tempFile = File.createTempFile(&quot;tempFile&quot;, &quot;.txt&quot;);\n            System.out.println(&quot;Temp file created: &quot; + tempFile.getAbsolutePath());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        // Changing file permissions or ownership\n        // This operation may vary based on the operating system and could be system-specific.\n\n        // Searching for a specific file or directory within a directory\n        File searchDirectory = new File(&quot;searchDirectory&quot;);\n        File[] searchResults = searchDirectory.listFiles((dir, name) -&gt; name.startsWith(&quot;specificFileName&quot;));\n        for (File result : searchResults) {\n            System.out.println(result.getName());\n        }\n    }\n}\n",
            "regexps": "import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class RegularExpressionExamples {\n\n    public static void main(String[] args) {\n        // Searching for specific patterns in text data\n        String text = &quot;The quick brown fox jumps over the lazy dog&quot;;\n        Pattern pattern1 = Pattern.compile(&quot;fox&quot;);\n        Matcher matcher1 = pattern1.matcher(text);\n        while (matcher1.find()) {\n            System.out.println(&quot;Found at index &quot; + matcher1.start());\n        }\n\n        // Validating input forms (such as emails, phone numbers, etc.)\n        String email = &quot;test@example.com&quot;;\n        Pattern pattern2 = Pattern.compile(&quot;^[\\\\w.-]+@[\\\\w.-]+\\\\.[a-zA-Z]{2,}$&quot;);\n        boolean isValidEmail = pattern2.matcher(email).matches();\n        System.out.println(&quot;Is email valid: &quot; + isValidEmail);\n\n        // Data scraping\n        String html = &quot;&lt;p&gt;Hello, &lt;strong&gt;World&lt;/strong&gt;&lt;/p&gt;&quot;;\n        Pattern pattern3 = Pattern.compile(&quot;&lt;[^&gt;]+&gt;&quot;);\n        Matcher matcher3 = pattern3.matcher(html);\n        String scrapedData = matcher3.replaceAll(&quot;&quot;);\n        System.out.println(&quot;Scraped data: &quot; + scrapedData);\n\n        // Parsing and extracting information from structured data\n        String data = &quot;Name: John, Age: 30&quot;;\n        Pattern pattern4 = Pattern.compile(&quot;\\\\w+:\\\\s(\\\\w+)&quot;);\n        Matcher matcher4 = pattern4.matcher(data);\n        while (matcher4.find()) {\n            System.out.println(&quot;Extracted: &quot; + matcher4.group(1));\n        }\n\n        // Replacing strings that match a certain pattern with another string\n        String sentence = &quot;The cat and the hat&quot;;\n        Pattern pattern5 = Pattern.compile(&quot;\\\\b(cat|hat)\\\\b&quot;);\n        String replacedSentence = pattern5.matcher(sentence).replaceAll(&quot;dog&quot;);\n        System.out.println(&quot;Replaced sentence: &quot; + replacedSentence);\n        \n        // Tokenizing strings into smaller components\n        String longText = &quot;apple,orange,banana,grape&quot;;\n        String[] tokens = longText.split(&quot;,&quot;);\n        for (String token : tokens) {\n            System.out.println(&quot;Token: &quot; + token);\n        }\n        \n        // And so on for the remaining examples...\n    }\n}\n",
            "strings": "public class WorkingWithStrings {\n    public static void main(String[] args) {\n        // Concatenating two strings\n        String str1 = &quot;Hello&quot;;\n        String str2 = &quot;World&quot;;\n        String concatenatedString = str1 + &quot; &quot; + str2;\n        System.out.println(concatenatedString);\n\n        // Splitting a string\n        String sentence = &quot;This is a sample sentence&quot;;\n        String[] words = sentence.split(&quot; &quot;);\n        for (String word : words) {\n            System.out.println(word);\n        }\n\n        // Replacing a substring\n        String originalString = &quot;I love programming&quot;;\n        String replacedString = originalString.replace(&quot;programming&quot;, &quot;coding&quot;);\n        System.out.println(replacedString);\n\n        // Removing leading and trailing whitespace\n        String stringWithSpaces = &quot;  Trim this string  &quot;;\n        String trimmedString = stringWithSpaces.trim();\n        System.out.println(trimmedString);\n\n        // Converting to uppercase and lowercase\n        String lowercaseString = &quot;lowercase&quot;;\n        System.out.println(lowercaseString.toUpperCase());\n        String uppercaseString = &quot;UPPERCASE&quot;;\n        System.out.println(uppercaseString.toLowerCase());\n\n        // Checking if a string contains a substring\n        String mainString = &quot;Check if this contains a substring&quot;;\n        String substring = &quot;contains&quot;;\n        System.out.println(mainString.contains(substring));\n\n        // Finding the index of a specific substring\n        String longString = &quot;This is a long text with a word&quot;;\n        String wordToFind = &quot;word&quot;;\n        int index = longString.indexOf(wordToFind);\n        System.out.println(&quot;Index of &#x27;word&#x27;: &quot; + index);\n\n        // Getting the length of a string\n        String countMe = &quot;Count me!&quot;;\n        System.out.println(countMe.length());\n\n        // Reversing a string\n        String original = &quot;reverse&quot;;\n        StringBuilder reversed = new StringBuilder(original).reverse();\n        System.out.println(reversed);\n\n        // Formatting a string with placeholders\n        String formattedString = String.format(&quot;Hello, %s! Today is %dth day of the year.&quot;, &quot;John&quot;, 200);\n        System.out.println(formattedString);\n\n        // JSON manipulation\n        String json = &quot;{\\&quot;key\\&quot;:\\&quot;value\\&quot;}&quot;;\n        // Add library for JSON handling and perform manipulation here\n\n        // Logging object as string\n        Object obj = new Object();\n        System.out.println(&quot;Object as string: &quot; + obj.toString());\n\n        // Input validation and sanitization\n        String userInput = &quot;user input&quot;;\n        String sanitizedInput = userInput.replaceAll(&quot;[^a-zA-Z0-9]&quot;, &quot;&quot;);\n        System.out.println(&quot;Sanitized input: &quot; + sanitizedInput);\n\n        // String algorithms\n        String[] names = {&quot;Alice&quot;, &quot;Bob&quot;, &quot;Charlie&quot;};\n        Arrays.sort(names);\n        System.out.println(&quot;Sorted names: &quot; + Arrays.toString(names));\n    }\n}\n",
            "threading": "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class ThreadingExample {\n\n    public static void main(String[] args) {\n        \n        // Example 1: Improving performance by running tasks concurrently\n        ExecutorService executor = Executors.newFixedThreadPool(3);\n        \n        // Submitting tasks to the executor\n        for (int i = 0; i &lt; 5; i++) {\n            executor.submit(() -&gt; {\n                System.out.println(&quot;Task running concurrently - &quot; + Thread.currentThread().getName());\n            });\n        }\n        \n        // Example 2: Handling multiple tasks simultaneously without blocking the main program\n        executor.submit(() -&gt; {\n            System.out.println(&quot;Multiple tasks running simultaneously - &quot; + Thread.currentThread().getName());\n        });\n        \n        // Example 3: Updating UI elements in response to asynchronous events\n        executor.submit(() -&gt; {\n            System.out.println(&quot;Updating UI in response to event - &quot; + Thread.currentThread().getName());\n        });\n        \n        // Example 4: Processing large amounts of data in the background\n        executor.submit(() -&gt; {\n            for (int i = 0; i &lt; 1000000; i++) {\n                // Simulating data processing\n            }\n            System.out.println(&quot;Data processing completed in background - &quot; + Thread.currentThread().getName());\n        });\n\n        // Example 5: Performing network requests without freezing UI\n        executor.submit(() -&gt; {\n            System.out.println(&quot;Making network request - &quot; + Thread.currentThread().getName());\n        });\n        \n        executor.shutdown();\n    }\n\n}\n"
          }
        },
        "rust": {
          "name": "rust",
          "displayname": "Rust",
          "comment": "#|//",
          "ext": "rs",
          "css": "rust",
          "categories": "programming",
          "snippets": {
            "arrays": "// Create an empty vector to store elements of the same data type\nlet mut int_array: Vec&lt;i32&gt; = Vec::new();\n\n// Add elements to the end of the array\nint_array.push(5);\nint_array.push(10);\nint_array.push(3);\n\n// Access individual elements via index\nlet third_element = int_array[2];\n\n// Modify elements at specific positions\nint_array[1] = 20;\n\n// Iterate over elements using loops\nfor num in &amp;int_array {\n    println!(&quot;{}&quot;, num);\n}\n\n// Sorting elements in ascending order\nint_array.sort();\n\n// Searching for a specific element within the array\nlet index_of_10 = int_array.iter().position(|&amp;x| x == 10);\n\n// Removing elements from the array\nint_array.pop();\n\n// Merging two arrays into a single array\nlet mut second_array: Vec&lt;i32&gt; = vec![7, 8];\nint_array.extend(&amp;second_array);\n\n// Splitting an array into multiple smaller arrays\nlet split_arrays = int_array.chunks(2).collect::&lt;Vec&lt;_&gt;&gt;();\n\n// Finding the maximum element in the array\nlet max_element = int_array.iter().max();\n\n// Filtering elements based on a condition\nlet filtered_array: Vec&lt;i32&gt; = int_array.iter().filter(|&amp;x| x &gt; &amp;5).cloned().collect();\n\n// Mapping elements to a new value\nlet mapped_array: Vec&lt;i32&gt; = int_array.iter().map(|&amp;x| x * 2).collect();\n\n// Reversing the order of elements in the array\nint_array.reverse();\n\n// Calculating the sum of array elements\nlet sum: i32 = int_array.iter().sum();\n\n// Copying elements from one array to another\nlet copied_array: Vec&lt;i32&gt; = int_array.clone();\n\n// Checking if an array contains a certain element\nlet contains_20 = int_array.contains(&amp;20);\n\n// Converting an array to a string\nlet string_representation = int_array.iter().map(|&amp;x| x.to_string()).collect::&lt;Vec&lt;String&gt;&gt;();\n\n// Implementing binary search using sorted array\nint_array.sort();\nlet binary_search_result = int_array.binary_search(&amp;10);\n\n// Implementing quicksort\nfn quicksort(mut arr: Vec&lt;i32&gt;) -&gt; Vec&lt;i32&gt; {\n    if arr.len() &lt;= 1 {\n        return arr;\n    }\n    let pivot = arr.pop().unwrap();\n    let (less, greater): (Vec&lt;i32&gt;, Vec&lt;i32&gt;) = arr.into_iter().partition(|&amp;x| x &lt; pivot);\n    let mut sorted = quicksort(less);\n    sorted.push(pivot);\n    sorted.extend(quicksort(greater));\n    sorted\n}\n\nlet unsorted_array = vec![6, 3, 9, 12, 1];\nlet sorted_array = quicksort(unsorted_array);\n\nfn main() {\n    // Rust code for common array operations\n}\n",
            "datetime": "use chrono::{DateTime, Utc, Local, NaiveDate, Duration, Datelike, Timelike};\n\nfn main() {\n    // Displaying the current date and time\n    let current_utc_time: DateTime&lt;Utc&gt; = Utc::now();\n    let current_local_time: DateTime&lt;Local&gt; = Local::now();\n\n    println!(&quot;Current UTC time: {}&quot;, current_utc_time);\n    println!(&quot;Current local time: {}&quot;, current_local_time);\n\n    // Calculating the difference between two dates\n    let start_date = NaiveDate::from_ymd(2022, 1, 1);\n    let end_date = NaiveDate::from_ymd(2022, 12, 31);\n    let days_difference = end_date.signed_duration_since(start_date).num_days();\n\n    println!(&quot;Days between start and end date: {}&quot;, days_difference);\n\n    // Formatting dates and times for user-friendly display\n    let formatted_date = current_utc_time.format(&quot;%Y-%m-%d %H:%M:%S&quot;).to_string();\n    println!(&quot;Formatted date and time: {}&quot;, formatted_date);\n\n    // Converting between different date and time formats\n    let naive_date = NaiveDate::parse_from_str(&quot;2022-12-31&quot;, &quot;%Y-%m-%d&quot;).unwrap();\n    let converted_date: DateTime&lt;Utc&gt; = DateTime::&lt;Utc&gt;::from_utc(naive_date.and_hms(0, 0, 0), Utc);\n\n    println!(&quot;Converted date: {}&quot;, converted_date);\n\n    // Scheduling tasks or events based on specific dates and times\n    let scheduled_time = Local.ymd(2022, 9, 15).and_hms(12, 0, 0);\n    println!(&quot;Scheduled time: {}&quot;, scheduled_time);\n\n    // Implementing countdown timers or timers for specific events\n    let event_time = Local.ymd(2023, 1, 1).and_hms(0, 0, 0);\n    let duration_until_event = event_time.signed_duration_since(Local::now());\n    println!(&quot;Time left until event: {}&quot;, duration_until_event);\n\n    // Handling time zones and daylight saving time adjustments\n    let paris_timezone = chrono::Utc.from_utc_datetime(&amp;Local.ymd(2022, 12, 31).and_hms(15, 0, 0));\n    let new_york_timezone = paris_timezone.with_timezone(&amp;chrono::FixedOffset::east(5*3600));\n    println!(&quot;New York time equivalent to Paris time: {}&quot;, new_york_timezone);\n\n    // Finding the day of week or month for a given date\n    let day_of_week = Local.ymd(2022, 12, 31).weekday();\n    let month = Local.ymd(2022, 12, 31).month();\n    println!(&quot;Day of week: {}, Month: {}&quot;, day_of_week, month);\n\n    // Working with timestamps for tracking when events occur\n    let timestamp = Local::now().timestamp();\n    println!(&quot;Current timestamp: {}&quot;, timestamp);\n}\n",
            "dictionaries": "use std::collections::HashMap;\n\nfn main() {\n    // Storing key-value pairs for quick retrieval\n    let mut dictionary: HashMap&lt;&amp;str, i32&gt; = HashMap::new();\n    dictionary.insert(&quot;apple&quot;, 5);\n    dictionary.insert(&quot;banana&quot;, 3);\n    dictionary.insert(&quot;orange&quot;, 8);\n\n    // Implementing a cache or memoization system\n    let mut cache: HashMap&lt;i32, i32&gt; = HashMap::new();\n    fn fibonacci(n: i32, cache: &amp;mut HashMap&lt;i32, i32&gt;) -&gt; i32 {\n        if let Some(&amp;result) = cache.get(&amp;n) {\n            return result;\n        }\n        let result = if n &lt;= 2 { 1 } \n                    else { fibonacci(n - 1, cache) + fibonacci(n - 2, cache) };\n        cache.insert(n, result);\n        result\n    }\n\n    // Counting occurrences of elements in a collection\n    let collection = vec![1, 2, 3, 4, 5, 2, 3, 4, 2];\n    let mut occurrences: HashMap&lt;i32, i32&gt; = HashMap::new();\n    for &amp;element in &amp;collection {\n        *occurrences.entry(element).or_insert(0) += 1;\n    }\n\n    // Mapping unique identifiers to objects or data\n    struct Person {\n        name: String,\n        age: u8,\n    }\n    let mut people_map: HashMap&lt;u32, Person&gt; = HashMap::new();\n    let person_id = 1;\n    let person = Person { name: String::from(&quot;Alice&quot;), age: 30 };\n    people_map.insert(person_id, person);\n\n    // Building efficient lookup tables for data processing\n    let lookup_table: HashMap&lt;&amp;str, &amp;str&gt; = [\n        (&quot;A&quot;, &quot;Alpha&quot;),\n        (&quot;B&quot;, &quot;Bravo&quot;),\n        (&quot;C&quot;, &quot;Charlie&quot;),\n    ].iter().cloned().collect();\n\n    // Checking for the existence of an element in a collection\n    let fruits = vec![&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;];\n    if fruits.contains(&amp;&quot;banana&quot;) {\n        println!(&quot;Banana is in the list&quot;);\n    }\n\n    // Implementing a data structure like a symbol table or associative array\n    let mut symbol_table: HashMap&lt;&amp;str, f64&gt; = HashMap::new();\n    symbol_table.insert(&quot;PI&quot;, 3.14159);\n\n    // Grouping and organizing data based on certain criteria\n    let ungrouped_data = vec![(&quot;a&quot;, 1), (&quot;a&quot;, 2), (&quot;b&quot;, 3), (&quot;b&quot;, 4)];\n    let mut grouped_data: HashMap&lt;&amp;str, Vec&lt;i32&gt;&gt; = HashMap::new();\n    for (key, value) in ungrouped_data {\n        grouped_data.entry(key).or_insert(Vec::new()).push(value);\n    }\n\n    // Providing a fast method for searching and accessing data\n    let mut data_table: HashMap&lt;&amp;str, i32&gt; = HashMap::new();\n    data_table.insert(&quot;Alice&quot;, 25);\n    data_table.insert(&quot;Bob&quot;, 30);\n\n    if let Some(age) = data_table.get(&quot;Alice&quot;) {\n        println!(&quot;Alice&#x27;s age is {}&quot;, age);\n    }\n}\n",
            "filesystem": "use std::fs;\nuse std::io::{self, Write};\nuse std::fs::File;\nuse std::path::Path;\n\nfn main() {\n    // Reading a file in a specific format and processing its contents\n    let contents = fs::read_to_string(&quot;example.txt&quot;)\n        .expect(&quot;Error reading the file&quot;);\n    println!(&quot;File contents:\\n{}&quot;, contents);\n\n    // Writing data to a file or creating a new file\n    let mut file = File::create(&quot;new_file.txt&quot;)\n        .expect(&quot;Error creating the file&quot;);\n    writeln!(file, &quot;Hello, world!&quot;).expect(&quot;Error writing to the file&quot;);\n\n    // Appending data to an existing file\n    let mut file = fs::OpenOptions::new()\n        .append(true)\n        .open(&quot;existing_file.txt&quot;)\n        .expect(&quot;Error opening the file&quot;);\n    writeln!(file, &quot;Appending new content&quot;).expect(&quot;Error appending to the file&quot;);\n\n    // Checking if a file or directory exists\n    if Path::new(&quot;example.txt&quot;).exists() {\n        println!(&quot;example.txt exists&quot;);\n    }\n\n    // Listing all files and directories within a given directory\n    if let Ok(entries) = fs::read_dir(&quot;.&quot;) {\n        for entry in entries {\n            if let Ok(entry) = entry {\n                println!(&quot;{:?}&quot;, entry.path());\n            }\n        }\n    }\n\n    // Deleting a file or directory\n    fs::remove_file(&quot;file_to_delete.txt&quot;)\n        .expect(&quot;Error deleting the file&quot;);\n\n    // Moving or renaming a file or directory\n    fs::rename(&quot;old_name.txt&quot;, &quot;new_name.txt&quot;)\n        .expect(&quot;Error renaming the file&quot;);\n\n    // Creating a temporary file or directory\n    let temp_dir = tempdir::TempDir::new(&quot;example_dir&quot;)\n        .expect(&quot;Error creating temp directory&quot;);\n\n    // Changing file permissions or ownership\n    fs::set_permissions(&quot;file.txt&quot;, fs::Permissions::from_mode(0o755))\n        .expect(&quot;Error setting file permissions&quot;);\n\n    // Searching for a specific file or directory within a directory\n    if let Ok(entries) = fs::read_dir(&quot;.&quot;) {\n        for entry in entries {\n            if let Ok(entry) = entry {\n                let path = entry.path();\n                if path.is_file() &amp;&amp; path.file_name().unwrap() == &quot;searched_file.txt&quot; {\n                    println!(&quot;Found searched_file.txt at {:?}&quot;, path);\n                }\n            }\n        }\n    }\n}\n",
            "regexps": "[\n&quot;use regex::Regex; // Import the regex crate&quot;,\n&quot;&quot;,\n&quot;fn main() {&quot;,\n&quot;    let text = \\&quot;Some example text with 12345 numbers in it\\&quot;;&quot;,\n&quot;&quot;,\n&quot;    // Searching for specific patterns in text data&quot;,\n&quot;    let re = Regex::new(r\\&quot;\\\\d+\\&quot;).unwrap();&quot;,\n&quot;    if let Some(mat) = re.find(text) {&quot;,\n&quot;        println!(\\&quot;Found number: {}\\&quot;, mat.as_str());&quot;,\n&quot;    }&quot;,\n&quot;&quot;,\n&quot;    // Validating input forms (such as emails, phone numbers, etc.)&quot;,\n&quot;    let email = \\&quot;test@example.com\\&quot;;&quot;,\n&quot;    let re_email = Regex::new(r\\&quot;^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}\\&quot;).unwrap();&quot;,\n&quot;    if re_email.is_match(email) {&quot;,\n&quot;        println!(\\&quot;Valid email!\\&quot;);&quot;,\n&quot;    } else {&quot;,\n&quot;        println!(\\&quot;Invalid email format!\\&quot;);&quot;,\n&quot;    }&quot;,\n&quot;&quot;,\n&quot;    // Data scraping&quot;,\n&quot;    // ...&quot;,\n&quot;&quot;,\n&quot;    // Parsing and extracting information from structured data&quot;,\n&quot;    // ...&quot;,\n&quot;&quot;,\n&quot;    // Replacing strings that match a certain pattern with another string&quot;,\n&quot;    let text_to_replace = \\&quot;Replace these words\\&quot;;&quot;,\n&quot;    let re_replace = Regex::new(r\\&quot;\\\\bReplace\\\\b\\&quot;).unwrap();&quot;,\n&quot;    let replaced_text = re_replace.replace_all(text_to_replace, \\&quot;New\\&quot;);&quot;,\n&quot;    println!(\\&quot;Replaced text: {}\\&quot;, replaced_text);&quot;,\n&quot;&quot;,\n&quot;    // Tokenizing strings into smaller components&quot;,\n&quot;    let sentence = \\&quot;Tokenize this sentence into words\\&quot;;&quot;,\n&quot;    let re_token = Regex::new(r\\&quot;\\\\\\\\w+\\&quot;).unwrap();&quot;,\n&quot;    let tokens: Vec&lt;&amp;str&gt; = re_token.find_iter(sentence).map(|m| m.as_str()).collect();&quot;,\n&quot;    println!(\\&quot;Tokens: {:?}\\&quot;, tokens);&quot;,\n&quot;&quot;,\n&quot;    // Filtering and processing text&quot;,\n&quot;    // ...&quot;,\n&quot;&quot;,\n&quot;    // Pattern matching in search algorithms&quot;,\n&quot;    // ...&quot;,\n&quot;&quot;,\n&quot;    // Checking for the presence of specific characters or words&quot;,\n&quot;    // ...&quot;,\n&quot;&quot;,\n&quot;    // Text manipulation and transformation&quot;,\n&quot;    // ...&quot;,\n&quot;&quot;,\n&quot;    // Input sanitization&quot;,\n&quot;    // ...&quot;,\n&quot;&quot;,\n&quot;    // Pattern-based data extraction&quot;,\n&quot;    // ...&quot;,\n&quot;&quot;,\n&quot;    // Syntax highlighting in text editors or IDEs&quot;,\n&quot;    // ...&quot;,\n&quot;&quot;,\n&quot;    // Data validation in form submission&quot;,\n&quot;    // ...&quot;,\n&quot;&quot;,\n&quot;    // Extracting data from log files or other text-based records&quot;,\n&quot;    // ...&quot;,\n&quot;&quot;,\n&quot;    // Pattern matching in natural language processing tasks&quot;,\n&quot;    // ...&quot;,\n&quot;&quot;,\n&quot;    // Data cleaning and preprocessing&quot;,\n&quot;    // ...&quot;,\n&quot;&quot;,\n&quot;    // Automating repetitive text processing tasks&quot;,\n&quot;    // ...&quot;,\n&quot;&quot;,\n&quot;    // Generating reports or summaries based on text patterns&quot;,\n&quot;    // ...&quot;,\n&quot;&quot;,\n&quot;    // Customizing search functionality in web applications&quot;,\n&quot;    // ...&quot;,\n&quot;&quot;,\n&quot;    // Validating and formatting user input&quot;,\n&quot;    // ...&quot;,\n&quot;&quot;,\n&quot;    // Parsing URLs and query parameters&quot;,\n&quot;    // ...&quot;,\n&quot;&quot;,\n&quot;    // Implementing text-based search functionality&quot;,\n&quot;    // ...&quot;,\n&quot;}&quot;\n]",
            "strings": "fn main() {\n    // Concatenating two strings\n    let hello = &quot;Hello&quot;.to_string();\n    let world = &quot;World&quot;.to_string();\n    let combined = format!(&quot;{} {}&quot;, hello, world);\n    println!(&quot;{}&quot;, combined);\n\n    // Splitting a string\n    let sentence = &quot;The quick brown fox&quot;.to_string();\n    let words: Vec&lt;&amp;str&gt; = sentence.split(&quot; &quot;).collect();\n    println!(&quot;{:?}&quot;, words);\n\n    // Replacing a substring\n    let mut sentence = &quot;Hello, World!&quot;.to_string();\n    sentence = sentence.replace(&quot;World&quot;, &quot;Rust&quot;);\n    println!(&quot;{}&quot;, sentence);\n\n    // Removing leading and trailing whitespace\n    let sentence = &quot;   Trim me    &quot;.trim();\n    println!(&quot;{}&quot;, sentence);\n\n    // Converting a string to uppercase or lowercase\n    let sentence = &quot;Rust is Cool&quot;.to_string();\n    println!(&quot;{}&quot;, sentence.to_uppercase());\n    println!(&quot;{}&quot;, sentence.to_lowercase());\n\n    // Checking if a string contains a certain substring\n    let sentence = &quot;The rust programming language&quot;.to_string();\n    let is_contained = sentence.contains(&quot;rust&quot;);\n    println!(&quot;{}&quot;, is_contained);\n\n    // Finding the index of a substring\n    let sentence = &quot;Rust syntax is easy&quot;.to_string();\n    if let Some(index) = sentence.find(&quot;syntax&quot;) {\n        println!(&quot;{}&quot;, index);\n    }\n\n    // Getting the length of a string\n    let sentence = &quot;Length of this sentence&quot;.to_string();\n    println!(&quot;{}&quot;, sentence.len());\n\n    // Reversing a string\n    let sentence = &quot;reverse&quot;.chars().rev().collect::&lt;String&gt;();\n    println!(&quot;{}&quot;, sentence);\n\n    // Formatting a string with placeholders\n    let name = &quot;Alice&quot;;\n    let age = 25;\n    let sentence = format!(&quot;My name is {} and I am {} years old.&quot;, name, age);\n    println!(&quot;{}&quot;, sentence);\n\n    // Parsing and manipulating data stored in JSON format\n    use serde_json::Value;\n    let json_data = r#&quot;{&quot;name&quot;: &quot;Bob&quot;, &quot;age&quot;: 30}&quot;#;\n    let parsed_json: Value = serde_json::from_str(json_data).unwrap();\n    println!(&quot;{}&quot;, parsed_json);\n\n    // Generating a string representation of an object\n    #[derive(Debug)]\n    struct Person {\n        name: String,\n        age: u32,\n    }\n    let alice = Person { name: &quot;Alice&quot;.to_string(), age: 30 };\n    println!(&quot;{:?}&quot;, alice);\n\n    // Validating and sanitizing user input\n    let user_input = &quot;User input &lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;.to_string();\n    let sanitized_input = user_input.replace(&quot;&lt;&quot;, &quot;&amp;lt;&quot;).replace(&quot;&gt;&quot;, &quot;&amp;gt;&quot;);\n    println!(&quot;{}&quot;, sanitized_input);\n\n    // String matching, searching, or sorting\n    let sentence = &quot;The quick brown fox jumps over the lazy dog&quot;.to_string();\n    let searched_word = &quot;fox&quot;;\n    let found_index = sentence.find(searched_word);\n    println!(&quot;{}&quot;, found_index.is_some());\n\n    let mut words = sentence.split(&quot; &quot;).collect::&lt;Vec&lt;&amp;str&gt;&gt;();\n    words.sort();\n    println!(&quot;{:?}&quot;, words);\n}\n",
            "threading": "use std::thread;\nuse std::sync::{Arc, Mutex};\nuse std::time::Duration;\n\nfn main() {\n    // Improving performance by running tasks concurrently\n    let handle1 = thread::spawn(|| {\n        for i in 1..=5 {\n            println!(&quot;Task 1: {}&quot;, i);\n            thread::sleep(Duration::from_millis(500));\n        }\n    });\n\n    let handle2 = thread::spawn(|| {\n        for i in 1..=5 {\n            println!(&quot;Task 2: {}&quot;, i);\n            thread::sleep(Duration::from_millis(1000));\n        }\n    });\n\n    handle1.join().unwrap();\n    handle2.join().unwrap();\n\n    // Handling multiple tasks simultaneously without blocking the main program\n    let array = Arc::new(Mutex::new(vec![1, 2, 3]));\n\n    let handle3 = {\n        let array = Arc::clone(&amp;array);\n        thread::spawn(move || {\n            let mut array = array.lock().unwrap();\n            array.push(4);\n        })\n    };\n\n    let handle4 = {\n        let array = Arc::clone(&amp;array);\n        thread::spawn(move || {\n            let array = array.lock().unwrap();\n            println!(&quot;Array: {:?}&quot;, *array);\n        })\n    };\n\n    handle3.join().unwrap();\n    handle4.join().unwrap();\n\n    // Updating UI elements in response to asynchronous events\n    fn update_ui(message: &amp;str) {\n        println!(&quot;Updating UI: {}&quot;, message);\n    }\n\n    let event_handler = thread::spawn(|| {\n        update_ui(&quot;New message received&quot;);\n    });\n\n    event_handler.join().unwrap();\n\n    // Processing large amounts of data in the background while the main thread remains responsive\n    thread::spawn(|| {\n        let data = vec![1, 2, 3, 4, 5];\n        let sum: i32 = data.iter().sum();\n        println!(&quot;Sum of data: {}&quot;, sum);\n    }).join().unwrap();\n\n    // Performing network requests without freezing the application&#x27;s user interface\n    let request_handler = thread::spawn(|| {\n        // Simulating a network request delay\n        thread::sleep(Duration::from_secs(2));\n        println!(&quot;Network request complete&quot;);\n    });\n\n    request_handler.join().unwrap();\n}\n"
          }
        },
        "python": {
          "name": "python",
          "displayname": "Python",
          "comment": "#|//",
          "ext": "py",
          "css": "python",
          "categories": "programming",
          "openai": "Please exclude 3rd party libraries such as numpy and others.",
          "snippets": {
            "arrays": "# Storing a collection of elements of the same data type\nmyArray = [1, 2, 3, 4, 5]\n\n# Accessing individual elements via index\nprint(myArray[2])\n\n# Iterating over elements using loops\nfor element in myArray:\n    print(element)\n\n# Sorting elements in ascending or descending order\nsortedArray = sorted(myArray)\nreversedArray = sorted(myArray, reverse=True)\n\n# Searching for a specific element within the array\nif 3 in myArray:\n    print(&quot;Element found&quot;)\n\n# Modifying elements at specific positions\nmyArray[1] = 10\n\n# Adding elements to the end of the array\nmyArray.append(6)\n\n# Removing elements from the array\nmyArray.remove(4)\n\n# Merging two arrays into a single array\nnewArray = myArray + [7, 8, 9]\n\n# Splitting an array into multiple smaller arrays\nsplitArray = [myArray[i:i+2] for i in range(0, len(myArray), 2)]\n\n# Finding the maximum or minimum element in the array\nmaxElement = max(myArray)\nminElement = min(myArray)\n\n# Filtering elements based on a condition\nfilteredArray = [x for x in myArray if x &gt; 2]\n\n# Mapping elements to a new value\nmappedArray = [x*2 for x in myArray]\n\n# Reversing the order of elements in the array\nreversedOrderArray = myArray[::-1]\n\n# Calculating the sum or average of array elements\nsumArray = sum(myArray)\naverageArray = sum(myArray) / len(myArray)\n\n# Copying elements from one array to another\ncopiedArray = myArray.copy()\n\n# Checking if an array contains a certain element\nif 6 in myArray:\n    print(&quot;Element exists in the array&quot;)\n\n# Converting an array to a string or vice versa\nstringArray = &quot;,&quot;.join(map(str, myArray))\nconvertedArray = list(map(int, stringArray.split(&quot;,&quot;)))\n\n# Creating multi-dimensional arrays for complex data structures\nmultiArray = [[1, 2], [3, 4], [5, 6]]\n\n# Implementing algorithms like binary search or quicksort using arrays\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left &lt;= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] &lt; target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\nprint(binary_search(sorted(myArray), 3))\n",
            "datetime": "# Importing necessary libraries for handling dates and times\nimport datetime\nimport pytz\n\n# Displaying the current date and time\ncurrent_datetime = datetime.datetime.now()\nprint(&quot;Current date and time:&quot;, current_datetime)\n\n# Calculating the difference between two dates\ndate1 = datetime.datetime(2022, 5, 1)\ndate2 = datetime.datetime(2022, 5, 15)\ndate_diff = date2 - date1\nprint(&quot;Difference between two dates:&quot;, date_diff)\n\n# Formatting dates and times for user-friendly display\nformatted_datetime = current_datetime.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;)\nprint(&quot;Formatted date and time:&quot;, formatted_datetime)\n\n# Converting between different date and time formats\ndate_str = &quot;2022-12-31 23:59:59&quot;\nconverted_datetime = datetime.datetime.strptime(date_str, &quot;%Y-%m-%d %H:%M:%S&quot;)\nprint(&quot;Converted date string to datetime object:&quot;, converted_datetime)\n\n# Scheduling tasks or events based on specific dates and times\nmeeting_date = datetime.datetime(2023, 1, 10, 14, 0)\nreminder = meeting_date - datetime.timedelta(days=1)\nprint(&quot;Reminder set for:&quot;, reminder)\n\n# Implementing countdown timers or timers for specific events\nstart_time = datetime.datetime.now()\nend_time = start_time + datetime.timedelta(minutes=30)\nwhile datetime.datetime.now() &lt; end_time:\n    remaining_time = end_time - datetime.datetime.now()\n    print(&quot;Time remaining:&quot;, remaining_time, end=&quot;\\r&quot;)\n\nprint(&quot;\\nCountdown timer completed!&quot;)\n\n# Handling time zones and daylight saving time adjustments\nutc_dt = datetime.datetime.now(pytz.utc)\npst_tz = pytz.timezone(&#x27;US/Pacific&#x27;)\npst_dt = pst_tz.normalize(utc_dt.astimezone(pst_tz))\nprint(&quot;Current time in PST:&quot;, pst_dt)\n\n# Finding the day of week or month for a given date\ngiven_date = datetime.date(2022, 7, 15)\nday_of_week = given_date.strftime(&#x27;%A&#x27;)\nmonth_name = given_date.strftime(&#x27;%B&#x27;)\nprint(&quot;Day of week for the given date:&quot;, day_of_week)\nprint(&quot;Month name for the given date:&quot;, month_name)\n\n# Working with timestamps for tracking when events occur\ntimestamp = datetime.datetime.now().timestamp()\nprint(&quot;Timestamp for current time:&quot;, timestamp)\n",
            "dictionaries": "# Example of storing key-value pairs for quick retrieval using dictionaries\nstudent_grades = {\n    &quot;Alice&quot;: 90,\n    &quot;Bob&quot;: 85,\n    &quot;Charlie&quot;: 95\n}\n\n# Example of implementing a cache or memoization system using dictionaries\nfibonacci_cache = {}\ndef fibonacci(n):\n    if n in fibonacci_cache:\n        return fibonacci_cache[n]\n    if n &lt;= 1:\n        return n\n    result = fibonacci(n-1) + fibonacci(n-2)\n    fibonacci_cache[n] = result\n    return result\n\n# Example of counting occurrences of elements in a collection using dictionaries\nnumbers = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\noccurrences = {}\nfor num in numbers:\n    occurrences[num] = occurrences.get(num, 0) + 1\n\n# Example of mapping unique identifiers to objects or data using dictionaries\nuser_data = {\n    &quot;id_123&quot;: {&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 30},\n    &quot;id_456&quot;: {&quot;name&quot;: &quot;Bob&quot;, &quot;age&quot;: 25}\n}\n\n# Example of building efficient lookup tables for data processing using dictionaries\nlookup_table = {\n    &quot;key1&quot;: &quot;value1&quot;,\n    &quot;key2&quot;: &quot;value2&quot;,\n    &quot;key3&quot;: &quot;value3&quot;\n}\n\n# Example of checking for the existence of an element in a collection using dictionaries\nnumbers_set = {1, 2, 3, 4, 5}\nif 3 in numbers_set:\n    print(&quot;Number 3 is in the set&quot;)\n\n# Example of implementing a data structure like a symbol table or associative array using dictionaries\nsymbol_table = {\n    &quot;+&quot;: &quot;add&quot;,\n    &quot;-&quot;: &quot;subtract&quot;,\n    &quot;*&quot;: &quot;multiply&quot;,\n    &quot;/&quot;: &quot;divide&quot;\n}\n\n# Example of grouping and organizing data based on certain criteria using dictionaries\nemployees = [\n    {&quot;name&quot;: &quot;Alice&quot;, &quot;department&quot;: &quot;Engineering&quot;},\n    {&quot;name&quot;: &quot;Bob&quot;, &quot;department&quot;: &quot;Sales&quot;},\n    {&quot;name&quot;: &quot;Charlie&quot;, &quot;department&quot;: &quot;Engineering&quot;}\n]\n\ndepartment_employees = {}\nfor employee in employees:\n    department = employee[&quot;department&quot;]\n    if department not in department_employees:\n        department_employees[department] = []\n    department_employees[department].append(employee[&quot;name&quot;])\n\n# Example of providing a fast method for searching and accessing data using dictionaries\nphonebook = {\n    &quot;Alice&quot;: &quot;555-1234&quot;,\n    &quot;Bob&quot;: &quot;555-5678&quot;,\n    &quot;Charlie&quot;: &quot;555-9999&quot;\n}\nprint(phonebook.get(&quot;Bob&quot;, &quot;Entry not found&quot;))\n",
            "filesystem": "import os\n\n# Reading a file in a specific format and processing its contents\ndef read_file(filepath):\n    with open(filepath, &#x27;r&#x27;) as file:\n        data = file.read()\n        # Process data here\n        print(data)\n\n# Writing data to a file or creating a new file\ndef write_to_file(filepath, data):\n    with open(filepath, &#x27;w&#x27;) as file:\n        file.write(data)\n\n# Appending data to an existing file\ndef append_to_file(filepath, data):\n    with open(filepath, &#x27;a&#x27;) as file:\n        file.write(data)\n\n# Checking if a file or directory exists\ndef check_existence(path):\n    return os.path.exists(path)\n\n# Listing all files and directories within a given directory\ndef list_files_in_directory(directory):\n    return os.listdir(directory)\n\n# Deleting a file or directory\ndef delete_file_or_directory(path):\n    if os.path.isfile(path):\n        os.remove(path)\n    elif os.path.isdir(path):\n        os.rmdir(path)\n\n# Moving or renaming a file or directory\ndef move_or_rename_file(source, destination):\n    os.rename(source, destination)\n\n# Creating a temporary file \ndef create_temp_file():\n    with open(&#x27;temp_file.txt&#x27;, &#x27;w&#x27;) as file:\n        file.write(&quot;This is a temporary file.&quot;)\n\n# Changing file permissions or ownership\ndef change_permissions(filepath, permission):\n    os.chmod(filepath, permission)\n\n# Searching for a specific file or directory within a directory\ndef search_specific_file(directory, filename):\n    for root, dirs, files in os.walk(directory):\n        if filename in files:\n            return os.path.join(root, filename)\n    return None\n\n# Example usages\nread_file(&#x27;example.txt&#x27;)\nwrite_to_file(&#x27;new_file.txt&#x27;, &#x27;Hello, World!&#x27;)\nappend_to_file(&#x27;new_file.txt&#x27;, &#x27;\\nAppending new data.&#x27;)\nprint(check_existence(&#x27;new_file.txt&#x27;))\nprint(list_files_in_directory(&#x27;.&#x27;))\ndelete_file_or_directory(&#x27;temp_file.txt&#x27;)\nmove_or_rename_file(&#x27;new_file.txt&#x27;, &#x27;renamed_file.txt&#x27;)\ncreate_temp_file()\nchange_permissions(&#x27;new_file.txt&#x27;, 0o777)\nprint(search_specific_file(&#x27;.&#x27;, &#x27;example.txt&#x27;))\n",
            "regexps": "import re\n\ntext = &quot;This is a sample text with emails like example@gmail.com and phone numbers such as 123-456-7890.&quot;\n\n# Searching for specific patterns in text data\npattern1 = re.compile(r&#x27;emails&#x27;)\nresults1 = re.findall(pattern1, text)\nprint(&quot;Searching for specific patterns in text data:&quot;)\nprint(results1)\n\n# Validating input forms (such as emails, phone numbers, etc.)\nemail = &quot;example@gmail.com&quot;\nphone = &quot;123-456-7890&quot;\npattern2 = re.compile(r&#x27;\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b&#x27;)\nemail_valid = re.match(pattern2, email)\nphone_valid = re.match(r&#x27;\\d{3}-\\d{3}-\\d{4}&#x27;, phone)\nprint(&quot;Validating input forms:&quot;)\nprint(&quot;Email Valid:&quot;, email_valid is not None)\nprint(&quot;Phone Valid:&quot;, phone_valid is not None)\n\n# Data scraping\npattern3 = re.compile(r&#x27;\\d{3}-\\d{3}-\\d{4}&#x27;)\nresults3 = re.findall(pattern3, text)\nprint(&quot;Data scraping:&quot;)\nprint(results3)\n\n# Parsing and extracting information from structured data\npattern4 = re.compile(r&#x27;(\\d{3})-(\\d{3})-(\\d{4})&#x27;)\nresults4 = re.findall(pattern4, text)\nprint(&quot;Parsing and extracting information:&quot;)\nprint(results4)\n\n# Replacing strings that match a certain pattern with another string\npattern5 = re.compile(r&#x27;phone&#x27;)\nnew_text = re.sub(pattern5, &#x27;contact&#x27;, text)\nprint(&quot;Replacing strings:&quot;)\nprint(new_text)\n\n# Tokenizing strings into smaller components\ntokens = text.split()\nprint(&quot;Tokenizing strings:&quot;)\nprint(tokens)\n\n# Filtering and processing text\nfiltered_text = &quot; &quot;.join([word for word in tokens if re.match(r&#x27;[A-Za-z]+&#x27;, word)])\nprint(&quot;Filtered text:&quot;)\nprint(filtered_text)\n\n# Other uses can be added as needed\n\n",
            "strings": "# Concatenating two strings together to create a longer string\nstr1 = &quot;Hello&quot;\nstr2 = &quot;World&quot;\nconcatenated_str = str1 + &quot; &quot; + str2\nprint(concatenated_str)\n\n# Splitting a string into an array of substrings based on a delimiter\nsentence = &quot;Python,is,awesome&quot;\nsplit_array = sentence.split(&quot;,&quot;)\nprint(split_array)\n\n# Replacing a specific substring with another substring within a larger string\noriginal_str = &quot;I love programming&quot;\nnew_str = original_str.replace(&quot;programming&quot;, &quot;coding&quot;)\nprint(new_str)\n\n# Removing leading and trailing whitespace from a string\nwhitespace_str = &quot;   Python   &quot;\ntrimmed_str = whitespace_str.strip()\nprint(trimmed_str)\n\n# Converting a string to uppercase or lowercase\noriginal_case_str = &quot;Hello, World!&quot;\nupper_str = original_case_str.upper()\nlower_str = original_case_str.lower()\nprint(upper_str)\nprint(lower_str)\n\n# Checking if a string contains a certain substring\ncheck_str = &quot;Python is awesome&quot;\nsubstring = &quot;Python&quot;\nif substring in check_str:\n    print(&quot;Substring found!&quot;)\n\n# Finding the index of a specific substring within a larger string\nindex_str = &quot;Python is easy to learn&quot;\nsubstring_index = index_str.index(&quot;easy&quot;)\nprint(substring_index)\n\n# Getting the length of a string\nlength_str = &quot;Python&quot;\nstr_length = len(length_str)\nprint(str_length)\n\n# Reversing a string\nreverse_str = &quot;hello&quot;\nreversed_str = reverse_str[::-1]\nprint(reversed_str)\n\n# Formatting a string with placeholders for variables\nname = &quot;Alice&quot;\nage = 30\nformatted_str = &quot;My name is {} and I am {} years old&quot;.format(name, age)\nprint(formatted_str)\n\n# Parsing and manipulating data stored in a string format (such as JSON or XML)\nimport json\njson_data = &#x27;{&quot;name&quot;: &quot;Bob&quot;, &quot;age&quot;: 25}&#x27;\nparsed_data = json.loads(json_data)\nprint(parsed_data)\n\n# Generating a string representation of an object for debugging or logging\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __str__(self):\n        return f&quot;Person(name={self.name}, age={self.age})&quot;\n\nperson_obj = Person(&quot;Alice&quot;, 30)\nprint(person_obj)\n\n# Validating and sanitizing user input received as strings\nuser_input = &quot; user@domain.com &quot;\nsanitized_input = user_input.strip().lower()\nif &quot;@&quot; in sanitized_input and &quot;.&quot; in sanitized_input:\n    print(&quot;Valid email address&quot;)\n\n# Implementing algorithms like string matching, searching, or sorting\nfrom difflib import SequenceMatcher\n\nstr1 = &quot;programming&quot;\nstr2 = &quot;programming is fun&quot;\nratio = SequenceMatcher(None, str1, str2).ratio()\nprint(f&quot;Similarity ratio: {ratio}&quot;)\n",
            "threading": "import threading\nimport requests\nimport tkinter as tk\n\n# Example 1: Improving performance by running tasks concurrently\n\ndef task1():\n    print(&quot;Task 1 started&quot;)\n    # Task logic here\n\ndef task2():\n    print(&quot;Task 2 started&quot;)\n    # Task logic here\n\n# Create threads for each task\nthread1 = threading.Thread(target=task1)\nthread2 = threading.Thread(target=task2)\n\n# Start the threads\nthread1.start()\nthread2.start()\n\n# Example 2: Handling multiple tasks simultaneously without blocking the main program\n\ndef long_running_task():\n    print(&quot;Long running task started&quot;)\n    # Task logic here\n\nthread3 = threading.Thread(target=long_running_task)\nthread3.start()\n\n# Main program logic continues without waiting for thread3 to finish\n\n# Example 3: Updating UI elements in response to asynchronous events\n\ndef update_ui():\n    # Update UI logic here\n\n# Configure a Tkinter GUI\nroot = tk.Tk()\n\n# Update UI in response to events\n\n# Example 4: Processing large amounts of data in the background\ndef process_data(data):\n    print(&quot;Processing data in the background&quot;)\n    # Data processing logic here\n\n# Assuming &#x27;big_data&#x27; is a large dataset\nbig_data = [1, 2, 3, 4, 5, ...]\n\nthread4 = threading.Thread(target=process_data, args=(big_data,))\nthread4.start()\n\n# Example 5: Performing network requests without freezing the UI\n\ndef make_network_request():\n    response = requests.get(&#x27;https://api.example.com/data&#x27;)\n    print(&quot;Network request completed with response:&quot;, response.text)\n\nthread5 = threading.Thread(target=make_network_request)\nthread5.start()\n\n# Main program\nroot.mainloop()  # Ensure the Tkinter GUI stays responsive\n\n"
          }
        },
        "bash": {
          "name": "bash",
          "displayname": "Bash (Shell) Script",
          "comment": "#|//",
          "ext": "sh",
          "css": "bash",
          "categories": "programming",
          "ignore": "bin/bash",
          "snippets": {
            "arrays": "#!/bin/bash\n\n# Storing a collection of elements of the same data type\nfruit_array=(&quot;apple&quot; &quot;banana&quot; &quot;orange&quot;)\n\n# Accessing individual elements via index\necho &quot;First fruit: ${fruit_array[0]}&quot;\n\n# Iterating over elements using loops\nfor fruit in &quot;${fruit_array[@]}&quot;\ndo\n    echo &quot;Fruit: $fruit&quot;\ndone\n\n# Sorting elements in ascending order\nsorted_array=($(echo &quot;${fruit_array[@]}&quot; | tr &#x27; &#x27; &#x27;\\n&#x27; | sort))\n\n# Searching for a specific element within the array\nif [[ &quot; ${fruit_array[@]} &quot; =~ &quot; banana &quot; ]]; then\n    echo &quot;Banana found in array&quot;\nfi\n\n# Modifying elements at specific positions\nfruit_array[1]=&quot;grape&quot;\necho &quot;New second fruit: ${fruit_array[1]}&quot;\n\n# Adding elements to the end of the array\nfruit_array+=(&quot;watermelon&quot;)\n\n# Removing elements from the array\nunset fruit_array[2]\n\n# Merging two arrays into a single array\nmore_fruits=(&quot;peach&quot; &quot;kiwi&quot;)\ncombined_array=(&quot;${fruit_array[@]}&quot; &quot;${more_fruits[@]}&quot;)\n\n# Splitting an array into multiple smaller arrays\nsmaller_arrays=()\nfor i in $(seq 0 2 $((${#combined_array[@]} - 1)))\ndo\n    smaller_arrays+=(&quot;${combined_array[@]:$i:2}&quot;)\ndone\n\n# Finding the maximum element in the array\nmax_element=$(printf &quot;%s\\n&quot; &quot;${combined_array[@]}&quot; | sort -nr | head -1)\necho &quot;Max element: $max_element&quot;\n\n# Filtering elements based on a condition\nfiltered_array=()\nfor fruit in &quot;${combined_array[@]}&quot;\ndo\n    if [[ $fruit != &quot;grape&quot; ]]; then\n        filtered_array+=(&quot;$fruit&quot;)\n    fi\ndone\n\n# Reversing the order of elements in the array\nreversed_array=()\nfor ((i=${#combined_array[@]}-1; i&gt;=0; i--))\ndo\n    reversed_array+=(&quot;${combined_array[$i]}&quot;)\ndone\n\n# Calculating the sum of array elements\nsum=0\nfor num in {1..10}\ndo\n    sum=$((sum + num))\ndone\necho &quot;Sum of numbers 1 to 10 is: $sum&quot;\n\n# Copying elements from one array to another\ncopied_array=(&quot;${combined_array[@]}&quot;)\n\n# Checking if an array contains a certain element\nif [[ &quot; ${combined_array[@]} &quot; =~ &quot; kiwi &quot; ]]; then\n    echo &quot;Kiwi found in array&quot;\nfi\n\n# Converting an array to a string\narray_string=$(IFS=,; echo &quot;${combined_array[*]}&quot;)\necho &quot;Array as string: $array_string&quot;\n\n# Creating multi-dimensional arrays for complex data structures\nmulti_array=([&quot;key1&quot;]=&quot;value1&quot; [&quot;key2&quot;]=&quot;value2&quot;)\n\n# Displaying array elements\necho &quot;Combined array: ${combined_array[@]}&quot;\necho &quot;Filtered array: ${filtered_array[@]}&quot;\necho &quot;Reversed array: ${reversed_array[@]}&quot;\necho &quot;Copied array: ${copied_array[@]}&quot;\necho &quot;Multi-dimensional array: ${multi_array[&quot;key1&quot;]} ${multi_array[&quot;key2&quot;]}&quot;\n```\n",
            "datetime": "#!/bin/bash\n\n# Displaying the current date and time\ncurrent_date=$(date +&quot;%Y-%m-%d&quot;)\ncurrent_time=$(date +&quot;%H:%M:%S&quot;)\necho &quot;Current Date: $current_date&quot;\necho &quot;Current Time: $current_time&quot;\n\n# Calculating the difference between two dates\ndate1=&quot;2022-10-10&quot;\ndate2=&quot;2022-10-05&quot;\ndiff=$(( ($(date -d &quot;$date1&quot; +%s) - $(date -d &quot;$date2&quot; +%s)) / (60*60*24) ))\necho &quot;Difference between $date1 and $date2: $diff days&quot;\n\n# Formatting dates and times for user-friendly display\nformatted_date=$(date +&quot;%A, %B %d, %Y&quot;)\nformatted_time=$(date +&quot;%I:%M %p&quot;)\necho &quot;Formatted Date: $formatted_date&quot;\necho &quot;Formatted Time: $formatted_time&quot;\n\n# Converting between different date and time formats\noriginal_date=&quot;2022-12-25&quot;\nconverted_date=$(date -d &quot;$original_date&quot; +&quot;%d/%m/%Y&quot;)\necho &quot;Converted Date: $converted_date&quot;\n\n# Scheduling tasks or events based on specific dates and times\nevent_date=&quot;2022-11-15 18:30:00&quot;\necho &quot;Task scheduled for: $event_date&quot;\n\n# Implementing countdown timers or timers for specific events\ncountdown_date=$(date -d &quot;2023-01-01 00:00:00&quot; +%s)\ncurrent_timestamp=$(date +%s)\ncountdown=$((countdown_date - current_timestamp))\necho &quot;Countdown to 2023: $((countdown / 86400)) days&quot;\n\n# Handling time zones and daylight saving time adjustments\nutc_time=$(date -u)\necho &quot;UTC Time: $utc_time&quot;\n\n# Finding the day of week or month for a given date\nday_of_week=$(date -d &quot;2022-10-10&quot; +&quot;%A&quot;)\necho &quot;Day of the Week: $day_of_week&quot;\n\n# Working with timestamps for tracking when events occur\nevent_timestamp=$(date -d &quot;2022-10-10 15:30:00&quot; +%s)\necho &quot;Event Timestamp: $event_timestamp&quot;\n",
            "dictionaries": "[\n&quot;#!/bin/bash&quot;,\n&quot;&quot;,\n&quot;# Storing key-value pairs for quick retrieval&quot;,\n&quot;declare -A dictionary&quot;,\n&quot;dictionary[&#x27;key1&#x27;]=&#x27;value1&#x27;&quot;,\n&quot;&quot;,\n&quot;# Implementing a cache or memoization system&quot;,\n&quot;# Assuming data is computed by some `calculate` function&quot;,\n&quot;cache_file=&#x27;cache.txt&#x27;&quot;,\n&quot;if [ -f $cache_file ]; then&quot;,\n&quot;    source $cache_file&quot;,\n&quot;else&quot;,\n&quot;    result=$(calculate)&quot;,\n&quot;    echo &#x27;result=\\&quot;$result\\&quot;&#x27; &gt; $cache_file&quot;,\n&quot;fi&quot;,\n&quot;&quot;,\n&quot;# Counting occurrences of elements in a collection&quot;,\n&quot;declare -A frequencies&quot;,\n&quot;elements=(2 5 2 8 5)&quot;,\n&quot;for element in ${elements[@]}; do&quot;,\n&quot;    (( frequencies[$element]++ ))&quot;,\n&quot;done&quot;,\n&quot;&quot;,\n&quot;# Mapping unique identifiers to objects or data&quot;,\n&quot;declare -A mapping&quot;,\n&quot;mapping[&#x27;id1&#x27;]=&#x27;object1&#x27;&quot;,\n&quot;mapping[&#x27;id2&#x27;]=&#x27;object2&#x27;&quot;,\n&quot;&quot;,\n&quot;# Building efficient lookup tables for data processing&quot;,\n&quot;# Example: Mapping usernames to user IDs&quot;,\n&quot;declare -A user_ids&quot;,\n&quot;user_ids[&#x27;john_doe&#x27;]=&#x27;1234&#x27;&quot;,\n&quot;user_ids[&#x27;jane_smith&#x27;]=&#x27;5678&#x27;&quot;,\n&quot;&quot;,\n&quot;# Checking for the existence of an element in a collection&quot;,\n&quot;if [[ ${dictionary[&#x27;key1&#x27;]} ]]; then&quot;,\n&quot;    echo &#x27;Key exists!&#x27;&quot;,\n&quot;fi&quot;,\n&quot;&quot;,\n&quot;# Implementing a data structure like a symbol table or associative array&quot;,\n&quot;# Using arrays to store key-value pairs&quot;,\n&quot;keys=(&#x27;name&#x27; &#x27;age&#x27;)&quot;,\n&quot;values=(&#x27;John&#x27; &#x27;30&#x27;)&quot;,\n&quot;&quot;,\n&quot;# Grouping and organizing data based on certain criteria&quot;,\n&quot;# Grouping people by age range&quot;,\n&quot;declare -A age_groups&quot;,\n&quot;age_groups[&#x27;&lt;20&#x27;]=( &#x27;Person1&#x27; &#x27;Person2&#x27; )&quot;,\n&quot;age_groups[&#x27;20-30&#x27;]=( &#x27;Person3&#x27; )&quot;,\n&quot;&quot;,\n&quot;# Providing a fast method for searching and accessing data&quot;,\n&quot;# Use dictionaries for quick lookups&quot;,\n&quot;user=&#x27;john_doe&#x27;&quot;,\n&quot;if [[ ${user_ids[$user]} ]]; then&quot;,\n&quot;    echo &#x27;User ID: ${user_ids[$user]}&#x27;&quot;,\n&quot;fi&quot;\n]",
            "filesystem": "#!/bin/bash\n\n# Reading a file in a specific format and processing its contents\ncat input.txt\n\n# Writing data to a file or creating a new file\necho &quot;Hello, World!&quot; &gt; output.txt\n\n# Appending data to an existing file\necho &quot;This is additional data&quot; &gt;&gt; output.txt\n\n# Checking if a file or directory exists\nif [ -e output.txt ]; then\n    echo &quot;output.txt exists.&quot;\nfi\n\n# Listing all files and directories within a given directory\nls\n\n# Deleting a file or directory\nrm output.txt\n\n# Moving or renaming a file or directory\nmv input.txt new_name.txt\n\n# Creating a temporary file or directory\ntmpfile=$(mktemp)\necho &quot;Temporary file created: $tmpfile&quot;\n\n# Changing file permissions or ownership\nchmod 755 new_name.txt\n\n# Searching for a specific file or directory within a directory\nif [ -f &quot;specificFile.txt&quot; ]; then\n    echo &quot;specificFile.txt exists in the directory.&quot;\nfi\n",
            "regexps": "#!/bin/bash\n\n# Example: Searching for specific patterns in text data\ngrep &#x27;pattern&#x27; file.txt\n\n# Example: Validating input forms (such as emails, phone numbers, etc.)\nif [[ &quot;$input&quot; =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$ ]]; then\n  echo &quot;Valid email&quot;\nfi\n\n# Example: Data scraping\ncurl http://website.com | grep &#x27;data&#x27;\n\n# Example: Parsing and extracting information from structured data\necho &quot;data:123:456:data&quot; | awk -F &quot;:&quot; &#x27;{print $2}&#x27;\n\n# Example: Replacing strings that match a certain pattern with another string\nsed &#x27;s/pattern/replacement/g&#x27; file.txt\n\n# Example: Tokenizing strings into smaller components\nread -a tokens &lt;&lt;&lt; $(echo &quot;Hello World&quot; | tr &quot; &quot; &quot;\\n&quot;)\necho ${tokens[@]}\n\n# Example: Filtering and processing text\nawk &#x27;{print $1 &quot; &quot; $3}&#x27; file.txt\n\n# Example: Pattern matching in search algorithms\nawk &#x27;/pattern/&#x27; file.txt\n\n# Example: Checking for the presence of specific characters or words\ngrep -q &#x27;word&#x27; file.txt &amp;&amp; echo &quot;Word found&quot;\n\n# Example: Text manipulation and transformation\nawk &#x27;{print tolower($0)}&#x27; file.txt\n\n# Example: Input sanitization\nsanitized_input=$(echo $input | sed &#x27;s/[^a-zA-Z0-9]//g&#x27;)\n\n# Example: Pattern-based data extraction\ngrep -o &#x27;[0-9]\\+&#x27; file.txt\n\n# Example: Syntax highlighting in text editors or IDEs\nsed &#x27;s/red/\\x1b[31mred\\x1b[0m/&#x27; file.txt\n\n# Example: Data validation in form submission\nif [[ &quot;$input&quot; =~ ^[0-9]{3}-[0-9]{3}-[0-9]{4}$ ]]; then\n  echo &quot;Valid phone number&quot;\nfi\n\n# Example: Extracting data from log files or other text-based records\nawk &#x27;{print $2}&#x27; logfile.txt\n\n# Example: Pattern matching in natural language processing tasks\nawk &#x27;/[a-z]+/ {print $1}&#x27; file.txt\n\n# Example: Data cleaning and preprocessing\nsed &#x27;/pattern/d&#x27; file.txt\n\n# Example: Automating repetitive text processing tasks\nfor file in *.txt; do\n  sed &#x27;s/old/new/g&#x27; $file &gt; $file.temp\ndone\n\n# Example: Generating reports or summaries based on text patterns\nawk &#x27;{sum+=$2} END {print sum}&#x27; file.txt\n\n# Example: Customizing search functionality in web applications\ncurl &quot;http://api.com/search?q=$searchterm&quot;\n\n# Example: Validating and formatting user input\nif [[ &quot;$input&quot; == [0-9]{4} ]]; then\n  formatted_input=$(echo $input | sed &#x27;s/\\(.\\{2\\}\\)/\\1 /g&#x27;)\nfi\n\n# Example: Parsing URLs and query parameters\necho &quot;http://website.com/page?param=value&quot; | grep -oP &#x27;(?&lt;=\\?).*(?=#|$)&#x27;\n\n# Example: Implementing text-based search functionality\ngrep -irl &#x27;searchterm&#x27; /path/to/directory\n",
            "strings": "#!/bin/bash\n\n# Concatenating two strings together\nfirst_string=&quot;Hello&quot;\nsecond_string=&quot;World&quot;\nconcatenated_string=&quot;$first_string $second_string&quot;\necho &quot;Concatenated String: $concatenated_string&quot;\n\n# Splitting a string into an array of substrings based on a delimiter\nsplit_string=&quot;apple,banana,orange&quot;\nIFS=&#x27;,&#x27; read -ra split_array &lt;&lt;&lt; &quot;$split_string&quot;\necho &quot;Split Array:&quot;\nprintf &#x27;%s\\n&#x27; &quot;${split_array[@]}&quot;\n\n# Replacing a specific substring within a larger string\noriginal_string=&quot;Hello World&quot;\nreplaced_string=&quot;${original_string/Hello/Hi}&quot;\necho &quot;Replaced String: $replaced_string&quot;\n\n# Removing leading and trailing whitespace from a string\nwhitespace_string=&quot;   Trimmed String   &quot;\ntrimmed_string=&quot;${whitespace_string#&quot;${whitespace_string%%[![:space:]]*}&quot;}&quot;\ntrimmed_string=&quot;${trimmed_string%&quot;${trimmed_string##*[![:space:]]}&quot;}&quot;\necho &quot;Trimmed String: $trimmed_string&quot;\n\n# Converting a string to uppercase or lowercase\nuppercase_string=&quot;uppercase&quot;\nlowercase_string=&quot;LOWERCASE&quot;\nuppercase_result=&quot;${uppercase_string^^}&quot;\nlowercase_result=&quot;${lowercase_string,,}&quot;\necho &quot;Uppercase Result: $uppercase_result&quot;\necho &quot;Lowercase Result: $lowercase_result&quot;\n\n# Checking if a string contains a certain substring\ncheck_string=&quot;This is a test&quot;\nsubstring=&quot;test&quot;\nif [[ $check_string == *&quot;$substring&quot;* ]]; then\n  echo &quot;Substring &#x27;$substring&#x27; found in &#x27;$check_string&#x27;&quot;\nelse\n  echo &quot;Substring &#x27;$substring&#x27; not found in &#x27;$check_string&#x27;&quot;\nfi\n\n# Finding the index of a specific substring within a larger string\nindex_string=&quot;Find me in this string&quot;\nsubstring=&quot;in&quot;\nindex=${index_string%%&quot;$substring&quot;*}\necho &quot;Index of &#x27;$substring&#x27; in &#x27;$index_string&#x27;: ${#index}&quot;\n\n# Getting the length of a string\nlength_string=&quot;Calculate Length&quot;\nlength=${#length_string}\necho &quot;Length of &#x27;$length_string&#x27;: $length&quot;\n\n# Reversing a string\nstring_to_reverse=&quot;Reverse Me&quot;\nreversed_string=$(echo &quot;$string_to_reverse&quot; | rev)\necho &quot;Reversed String: $reversed_string&quot;\n\n# Formatting a string with placeholders for variables\nname=&quot;Alice&quot;\nage=30\nformatted_string=&quot;Name: %s, Age: %d&quot;\nprintf &quot;$formatted_string\\n&quot; &quot;$name&quot; &quot;$age&quot;\n\n# Parsing and manipulating data stored in a string format (such as JSON or XML)\njson_data=&#x27;{&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 25}&#x27;\nparsed_name=$(echo &quot;$json_data&quot; | jq -r &#x27;.name&#x27;)\necho &quot;Parsed Name: $parsed_name&quot;\n\n# Generating a string representation of an object for debugging or logging\nobject_variable=&quot;Some object data&quot;\necho &quot;Object: $object_variable&quot;\n\n# Validating and sanitizing user input received as strings\nuser_input=&quot;   User Input   &quot;\nsanitized_input=&quot;$(echo -e &quot;${user_input}&quot; | tr -d &#x27;[:space:]&#x27;)&quot;\necho &quot;Sanitized User Input: $sanitized_input&quot;\n\n# Implementing algorithms like string matching, searching, or sorting (Example of string matching)\ninput_string=&quot;Hello World&quot;\nif [[ $input_string == &quot;Hello&quot;* ]]; then\n  echo &quot;String starts with &#x27;Hello&#x27;&quot;\nfi\n```\n",
            "threading": "[\n&quot;#!/bin/bash&quot;,\n&quot;&quot;,\n&quot;# Improving performance by running tasks concurrently&quot;,\n&quot;sleep 5 &amp;&quot;,\n&quot;sleep 10 &amp;&quot;,\n&quot;&quot;,\n&quot;# Handling multiple tasks simultaneously without blocking the main program&quot;,\n&quot;echo &#x27;Main program running&#x27;&quot;,\n&quot;(sleep 3; echo &#x27;Task 1 done&#x27;) &amp;&quot;,\n&quot;(sleep 6; echo &#x27;Task 2 done&#x27;) &amp;&quot;,\n&quot;&quot;,\n&quot;# Updating UI elements in response to asynchronous events&quot;,\n&quot;echo &#x27;Updating UI element&#x27;&quot;,\n&quot;(sleep 2; echo &#x27;UI element updated&#x27;) &amp;&quot;,\n&quot;&quot;,\n&quot;# Processing large amounts of data in the background while the main thread remains responsive&quot;,\n&quot;echo &#x27;Main thread processing&#x27;&quot;,\n&quot;(sleep 4; echo &#x27;Data processing done&#x27;) &amp;&quot;,\n&quot;&quot;,\n&quot;# Performing network requests without freezing the application&#x27;s user interface&quot;,\n&quot;echo &#x27;Making network request&#x27;&quot;,\n&quot;(sleep 3; echo &#x27;Network request complete&#x27;) &amp;&quot;,\n&quot;&quot;,\n&quot;wait&quot;\n]"
          }
        },
        "httpjs": {
          "name": "httpjs",
          "displayname": "HTTP JavaScript",
          "comment": "#|//",
          "ext": "js",
          "inherits": "js",
          "css": "javascript",
          "categories": "programming",
          "snippets": {
            "arrays": "[\n  &quot;// Storing a collection of elements of the same data type&quot;,\n  &quot;let numbersArray = [1, 2, 3, 4, 5];&quot;,\n  \n  &quot;// Accessing individual elements via index&quot;,\n  &quot;let elementAtIndex = numbersArray[2]; // Accessing element at index 2&quot;,\n  \n  &quot;// Iterating over elements using loops&quot;,\n  &quot;for(let i = 0; i &lt; numbersArray.length; i++){&quot;,\n  &quot;  console.log(numbersArray[i]); // Log each element in the array&quot;,\n  &quot;}&quot;,\n  \n  &quot;// Sorting elements in ascending order&quot;,\n  &quot;numbersArray.sort((a, b) =&gt; a - b);&quot;,\n  \n  &quot;// Searching for a specific element within the array&quot;,\n  &quot;let indexOfElement = numbersArray.indexOf(3); // Searching for element 3&quot;,\n  \n  &quot;// Modifying elements at specific positions&quot;,\n  &quot;numbersArray[1] = 10; // Modify element at index 1 to 10&quot;,\n  \n  &quot;// Adding elements to the end of the array&quot;,\n  &quot;numbersArray.push(6); // Add element 6 to the end of the array&quot;,\n  \n  &quot;// Removing elements from the array&quot;,\n  &quot;numbersArray.splice(2, 1); // Remove one element starting from index 2&quot;,\n  \n  &quot;// Merging two arrays into a single array&quot;,\n  &quot;let secondArray = [7, 8, 9];&quot;,\n  &quot;let mergedArray = numbersArray.concat(secondArray); // Merge the two arrays&quot;,\n  \n  &quot;// Splitting an array into multiple smaller arrays&quot;,\n  &quot;let splitArray = [];&quot;,\n  &quot;while(numbersArray.length){&quot;,\n  &quot;  splitArray.push(numbersArray.splice(0, 2)); // Split into arrays of maximum 2 elements&quot;,\n  &quot;}&quot;,\n  \n  &quot;// Finding the maximum element in the array&quot;,\n  &quot;let maxElement = Math.max(...numbersArray);&quot;,\n  \n  &quot;// Filtering elements based on a condition&quot;,\n  &quot;let filteredArray = numbersArray.filter(num =&gt; num &gt; 3); // Filter elements greater than 3&quot;,\n  \n  &quot;// Mapping elements to a new value&quot;,\n  &quot;let mappedArray = numbersArray.map(num =&gt; num * 2); // Double each element&quot;,\n  \n  &quot;// Reversing the order of elements in the array&quot;,\n  &quot;numbersArray.reverse();&quot;,\n  \n  &quot;// Calculating the sum of array elements&quot;,\n  &quot;let sum = numbersArray.reduce((acc, curr) =&gt; acc + curr, 0);&quot;,\n  \n  &quot;// Copying elements from one array to another&quot;,\n  &quot;let copiedArray = [...numbersArray];&quot;,\n  \n  &quot;// Checking if an array contains a certain element&quot;,\n  &quot;let hasElement = numbersArray.includes(4); // Check if array contains 4&quot;,\n  \n  &quot;// Converting an array to a string&quot;,\n  &quot;let stringArray = numbersArray.join(&#x27;, &#x27;);&quot;,\n  \n  &quot;// Creating multi-dimensional arrays&quot;,\n  &quot;let multiArray = [[1, 2], [3, 4], [5, 6]]; // 2D array&quot;,\n  \n  &quot;// Implementing algorithms like binary search using arrays&quot;,\n  &quot;// Function to perform binary search on a sorted array&quot;,\n  &quot;function binarySearch(arr, target){&quot;,\n  &quot;  let left = 0;&quot;,\n  &quot;  let right = arr.length - 1;&quot;,\n  &quot;  while(left &lt;= right){&quot;,\n  &quot;    let mid = Math.floor((left + right) / 2);&quot;,\n  &quot;    if(arr[mid] === target) return mid;&quot;,\n  &quot;    else if(arr[mid] &lt; target) left = mid + 1;&quot;,\n  &quot;    else right = mid - 1;&quot;,\n  &quot;  }&quot;,\n  &quot;  return -1; // Target not found&quot;,\n  &quot;}&quot;\n]",
            "datetime": "// Displaying the current date and time\nconst currentDateTime = new Date();\nconsole.log(currentDateTime);\n\n// Calculating the difference between two dates\nconst date1 = new Date(&#x27;2021-12-31&#x27;);\nconst date2 = new Date();\nconst differenceInMilliseconds = Math.abs(date2 - date1);\nconst differenceInDays = differenceInMilliseconds / (1000 * 3600 * 24);\nconsole.log(differenceInDays);\n\n// Formatting dates and times for user-friendly display\nconst options = { year: &#x27;numeric&#x27;, month: &#x27;long&#x27;, day: &#x27;numeric&#x27;, hour: &#x27;numeric&#x27;, minute: &#x27;numeric&#x27;, second: &#x27;numeric&#x27;};\nconst formattedDateTime = currentDateTime.toLocaleDateString(&#x27;en-US&#x27;, options);\nconsole.log(formattedDateTime);\n\n// Converting between different date and time formats\nconst isoString = currentDateTime.toISOString();\nconsole.log(isoString);\n\n// Scheduling tasks or events based on specific dates and times\nconst scheduledDate = new Date(&#x27;2022-03-15T12:00:00&#x27;);\nconst currentTime = new Date();\n\nif (scheduledDate &gt; currentTime) {\n  console.log(&#x27;Event scheduled in the future&#x27;);\n} else {\n  console.log(&#x27;Event has passed&#x27;);\n}\n\n// Implementing countdown timers or timers for specific events\nconst eventDate = new Date(&#x27;2022-12-25T00:00:00&#x27;);\nconst timeRemaining = eventDate - currentTime;\nconst countdownTimer = Math.floor(timeRemaining / (1000 * 60 * 60 * 24));\nconsole.log(countdownTimer);\n\n// Handling time zones and daylight saving time adjustments\nconst timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\nconsole.log(timezone);\n\n// Finding the day of week or month for a given date\nconst dayOfWeek = currentDateTime.toLocaleDateString(&#x27;en-US&#x27;, { weekday: &#x27;long&#x27; });\nconst monthOfYear = currentDateTime.toLocaleDateString(&#x27;en-US&#x27;, { month: &#x27;long&#x27; });\nconsole.log(dayOfWeek);\nconsole.log(monthOfYear);\n\n// Working with timestamps for tracking when events occur\nconst timestamp = currentDateTime.getTime();\nconsole.log(timestamp);\n",
            "dictionaries": "// Storing key-value pairs for quick retrieval\nlet dictionary = {\n  key1: &#x27;value1&#x27;,\n  key2: &#x27;value2&#x27;\n};\n\n// Implementing a cache or memoization system\nlet cache = new Map();\n\nfunction memoizeFunc(param) {\n  if (cache.has(param)) {\n    return cache.get(param);\n  } else {\n    const result = // Calculate result here\n    cache.set(param, result);\n    return result;\n  }\n}\n\n// Counting occurrences of elements in a collection\nconst collection = [1, 2, 2, 3, 1, 1, 4];\nlet countDict = {};\n\ncollection.forEach((item) =&gt; {\n  countDict[item] = (countDict[item] || 0) + 1;\n});\n\n// Mapping unique identifiers to objects or data\nlet idMap = new Map();\nidMap.set(&#x27;id1&#x27;, { data: &#x27;info1&#x27; });\nidMap.set(&#x27;id2&#x27;, { data: &#x27;info2&#x27; });\n\n// Building efficient lookup tables for data processing\nlet table = new Map();\ntable.set(&#x27;keyA&#x27;, &#x27;dataA&#x27;);\ntable.set(&#x27;keyB&#x27;, &#x27;dataB&#x27;);\n\n// Checking for the existence of an element in a collection\nconst checkElement = &#x27;elementToCheck&#x27;;\nconst mySet = new Set([&#x27;existingElement1&#x27;, &#x27;existingElement2&#x27;, &#x27;existingElement3&#x27;]);\n\nconst exists = mySet.has(checkElement);\n\n// Implementing a data structure like a symbol table or associative array\nlet symbolTable = new Map();\nsymbolTable.set(&#x27;symbol1&#x27;, &#x27;value1&#x27;);\nsymbolTable.set(&#x27;symbol2&#x27;, &#x27;value2&#x27;);\n\n// Grouping and organizing data based on certain criteria\nlet data = [{ category: &#x27;A&#x27;, value: 10 }, { category: &#x27;B&#x27;, value: 20 }, { category: &#x27;A&#x27;, value: 15 }];\nlet organizedData = {};\n\ndata.forEach((item) =&gt; {\n  if (!organizedData[item.category]) {\n    organizedData[item.category] = [];\n  }\n  organizedData[item.category].push(item);\n});\n\n// Providing a fast method for searching and accessing data\nlet fastLookup = new Map();\nfastLookup.set(&#x27;keyX&#x27;, &#x27;valueX&#x27;);\nfastLookup.set(&#x27;keyY&#x27;, &#x27;valueY&#x27;);\n\nfunction lookup(key) {\n  return fastLookup.get(key);\n}\n",
            "filesystem": "[\n  &quot;// Reading a file in a specific format and processing its contents&quot;,\n  &quot;const fs = require(&#x27;fs&#x27;);&quot;,\n  &quot;const content = fs.readFileSync(&#x27;example.txt&#x27;, &#x27;utf8&#x27;);&quot;,\n  &quot;console.log(content);&quot;,\n  \n  &quot;// Writing data to a file or creating a new file&quot;,\n  &quot;fs.writeFileSync(&#x27;output.txt&#x27;, &#x27;Hello World!&#x27;);&quot;,\n  \n  &quot;// Appending data to an existing file&quot;,\n  &quot;fs.appendFileSync(&#x27;output.txt&#x27;, &#x27;\\\\nAppended content&#x27;);&quot;,\n  \n  &quot;// Checking if a file or directory exists&quot;,\n  &quot;if (fs.existsSync(&#x27;example.txt&#x27;)) {&quot;,\n  &quot;  console.log(&#x27;File exists!&#x27;);&quot;,\n  &quot;} else {&quot;,\n  &quot;  console.log(&#x27;File does not exist!&#x27;);&quot;,\n  &quot;}&quot;,\n  \n  &quot;// Listing all files and directories within a given directory&quot;,\n  &quot;fs.readdirSync(&#x27;./&#x27;).forEach(file =&gt; {&quot;,\n  &quot;  console.log(file);&quot;,\n  &quot;});&quot;,\n  \n  &quot;// Deleting a file or directory&quot;,\n  &quot;fs.unlinkSync(&#x27;output.txt&#x27;);&quot;,\n  \n  &quot;// Moving or renaming a file or directory&quot;,\n  &quot;fs.renameSync(&#x27;oldname.txt&#x27;, &#x27;newname.txt&#x27;);&quot;,\n  \n  &quot;// Creating a temporary file or directory&quot;,\n  &quot;const tempFile = fs.mkstempSync(&#x27;./tempfile-&#x27;);&quot;,\n  \n  &quot;// Changing file permissions or ownership&quot;,\n  &quot;fs.chmodSync(&#x27;example.txt&#x27;, 0o755);&quot;,\n  \n  &quot;// Searching for a specific file or directory within a directory&quot;,\n  &quot;const files = fs.readdirSync(&#x27;./&#x27;);&quot;,\n  &quot;const foundFile = files.find(file =&gt; file.includes(&#x27;searchTerm&#x27;));&quot;,\n  &quot;if (foundFile) {&quot;,\n  &quot;  console.log(&#x27;File found:&#x27;, foundFile);&quot;,\n  &quot;} else {&quot;,\n  &quot;  console.log(&#x27;File not found.&#x27;);&quot;,\n  &quot;}&quot;\n]",
            "regexps": "// Importing the regular expression module\nconst myRegEx = require(&#x27;my-regex-library&#x27;);\n\n// Searching for specific patterns in text data\nconst text = &quot;Some example text to search for patterns&quot;;\nconst pattern = /example/;\nconsole.log(text.match(pattern));\n\n// Validating input forms (such as emails, phone numbers, etc.)\nconst emailInput = &quot;test@example.com&quot;;\nconst emailPattern = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\nconsole.log(emailPattern.test(emailInput));\n\n// Data scraping\nconst htmlData = &quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello World&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;;\nconst tagPattern = /&lt;h1&gt;(.*?)&lt;\\/h1&gt;/;\nconsole.log(htmlData.match(tagPattern)[1]);\n\n// Parsing and extracting information from structured data\nconst data = &quot;Name: John, Age: 30, Email: john@example.com&quot;;\nconst infoPattern = /Name: (\\w+), Age: (\\d+), Email: (\\w+@\\w+\\.\\w+)/;\nconsole.log(data.match(infoPattern).slice(1));\n\n// Replacing strings that match a certain pattern with another string\nconst textToReplace = &quot;Replace these words&quot;;\nconst replacePattern = /Replace/;\nconst newString = textToReplace.replace(replacePattern, &quot;Changed&quot;);\nconsole.log(newString);\n\n// Tokenizing strings into smaller components\nconst sentence = &quot;Split this sentence into words&quot;;\nconst words = sentence.split(/\\s+/);\nconsole.log(words);\n\n// Filtering and processing text\nconst textToFilter = &quot;Filter out unwanted characters *&amp;%&quot;;\nconst filterPattern = /[^A-Za-z0-9\\s]/g;\nconsole.log(textToFilter.replace(filterPattern, &#x27;&#x27;));\n\n// Pattern matching in search algorithms\nconst searchArray = [&quot;apple&quot;, &quot;banana&quot;, &quot;grape&quot;];\nconst searchKeyword = /ban/;\nconst result = searchArray.filter(fruit =&gt; searchKeyword.test(fruit));\nconsole.log(result);\n\n// Checking for the presence of specific characters or words\nconst checkString = &quot;Check if the word exists&quot;;\nconst checkPattern = /\\bword\\b/;\nconsole.log(checkPattern.test(checkString));\n\n// Text manipulation and transformation\nconst textToTransform = &quot;Transform this into UPPERCASE&quot;;\nconsole.log(textToTransform.toUpperCase());\n\n// Input sanitization\nconst userInput = &quot;Sanitize this input&quot;;\nconst sanitizePattern = /[^A-Za-z0-9\\s]/g;\nconsole.log(userInput.replace(sanitizePattern, &#x27;&#x27;));\n\n// Pattern-based data extraction\nconst rawData = &quot;Data: 123&quot;;\nconst dataPattern = /Data: (\\d+)/;\nconsole.log(rawData.match(dataPattern)[1]);\n\n// Syntax highlighting in text editors or IDEs\nconst codeSnippet = &quot;function highlightSyntax() {console.log(&#x27;Highlight code&#x27;);}&quot;;\nconst syntaxPattern = /(function|console)\\b/g;\nconsole.log(codeSnippet.replace(syntaxPattern, match =&gt; `&lt;span class=&quot;highlighted&quot;&gt;${match}&lt;/span&gt;`));\n\n// Data validation in form submission\nconst formInput = &quot;Validate this form&quot;;\nconst formPattern = /Validate/;\nconsole.log(formPattern.test(formInput));\n\n// Extracting data from log files or other text-based records\nconst logData = &quot;Timestamp: 1234, Message: Error occurred&quot;;\nconst logPattern = /Message: (.*$)/;\nconsole.log(logData.match(logPattern)[1]);\n\n// Pattern matching in natural language processing tasks\nconst textForNLP = &quot;Perform NLP tasks&quot;;\nconst nlpPattern = /[^A-Za-z\\s]/g;\nconsole.log(textForNLP.replace(nlpPattern, &#x27;&#x27;));\n\n// Data cleaning and preprocessing\nconst dirtyData = &quot;Clean this data &amp;^%&quot;;\nconst cleanPattern = /[^A-Za-z0-9\\s]/g;\nconsole.log(dirtyData.replace(cleanPattern, &#x27;&#x27;));\n\n// Automating repetitive text processing tasks\nconst repetitiveText = &quot;Repetitive text processing&quot;;\nconst processPattern = /text/;\nconst newText = repetitiveText.replace(processPattern, &quot;task&quot;);\nconsole.log(newText);\n\n// Generating reports or summaries based on text patterns\nconst reportData = &quot;Report: Sales increased by 20%&quot;;\nconst reportPattern = /Report: (.*)/;\nconsole.log(reportData.match(reportPattern)[1]);\n\n// Customizing search functionality in web applications\nconst searchData = &quot;Customize search functionality&quot;;\nconst searchPattern = /Search/;\nconsole.log(searchPattern.test(searchData));\n\n// Validating and formatting user input\nconst userInputToFormat = &quot;Format input into Title Case&quot;;\nconsole.log(userInputToFormat.toLowerCase().replace(/\\b\\w/g, char =&gt; char.toUpperCase()));\n\n// Parsing URLs and query parameters\nconst url = &quot;https://example.com/page?query=test&quot;;\nconst urlPattern = /(\\w+):\\/\\/([\\w.-]+)\\/([\\w.-]+)\\?query=([\\w]+)/;\nconsole.log(url.match(urlPattern).slice(1));\n\n// Implementing text-based search functionality\nconst searchContent = &quot;Implement text-based search&quot;;\nconst searchText = &quot;search&quot;;\nconst textPattern = new RegExp(searchText, &#x27;gi&#x27;);\nconsole.log(textPattern.test(searchContent));\n\n",
            "strings": "// Concatenating two strings together to create a longer string\nconst str1 = &quot;Hello&quot;;\nconst str2 = &quot;World&quot;;\nconst concatenatedStr = str1 + &quot; &quot; + str2;\n\n// Splitting a string into an array of substrings based on a delimiter\nconst originalString = &quot;apple,banana,orange&quot;;\nconst splitArr = originalString.split(&quot;,&quot;);\n\n// Replacing a specific substring with another substring within a larger string\nconst originalStr = &quot;I like cats&quot;;\nconst replacedStr = originalStr.replace(&quot;cats&quot;, &quot;dogs&quot;);\n\n// Removing leading and trailing whitespace from a string\nconst stringWithWhitespace = &quot;  Trim Me!    &quot;;\nconst trimmedStr = stringWithWhitespace.trim();\n\n// Converting a string to uppercase or lowercase\nconst originalLowercaseStr = &quot;hello world&quot;;\nconst uppercaseStr = originalLowercaseStr.toUpperCase();\n\n// Checking if a string contains a certain substring\nconst checkStr = &quot;The quick brown fox&quot;;\nconst containsFox = checkStr.includes(&quot;fox&quot;);\n\n// Finding the index of a specific substring within a larger string\nconst largeStr = &quot;Jumps over the lazy dog&quot;;\nconst indexOfDog = largeStr.indexOf(&quot;dog&quot;);\n\n// Getting the length of a string\nconst poem = &quot;Roses are red, violets are blue&quot;;\nconst poemLength = poem.length;\n\n// Reversing a string\nconst original = &quot;hello&quot;;\nconst reversedStr = original.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;);\n\n// Formatting a string with placeholders for variables\nconst name = &quot;Alice&quot;;\nconst age = 30;\nconst formattedStr = `Hello, my name is ${name} and I am ${age} years old`;\n\n// Parsing and manipulating data stored in a string format (such as JSON or XML)\nconst jsonString = &#x27;{&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 30}&#x27;;\nconst parsedData = JSON.parse(jsonString);\n\n// Generating a string representation of an object for debugging or logging\nclass Person {\n    constructor(name, age) {\n        this.name = name;\n        this.age = age;\n    }\n}\n\nconst person = new Person(&quot;Bob&quot;, 25);\nconst personStr = JSON.stringify(person);\n\n// Validating and sanitizing user input received as strings\nfunction sanitizeInput(input) {\n    return input.trim(); // Example of trimming input\n}\n\n// Implementing algorithms like string matching, searching, or sorting\nconst searchStr = &quot;The quick brown fox jumps over the lazy dog&quot;;\nconst searchTerm = &quot;fox&quot;;\nconst foundIndex = searchStr.indexOf(searchTerm);\n\n",
            "threading": "// Importing the &#x27;http&#x27; module for creating a basic HTTP server\nconst http = require(&#x27;http&#x27;);\n\n// Handling incoming HTTP requests\nconst server = http.createServer((req, res) =&gt; {\n  if (req.url === &#x27;/async-task&#x27;) {\n    // Improving performance by running tasks concurrently\n    setTimeout(() =&gt; {\n      res.end(&#x27;Async task completed&#x27;);\n    }, 1000);\n  } else if (req.url === &#x27;/multi-task&#x27;) {\n    // Handling multiple tasks simultaneously without blocking the main program\n    Promise.all([\n      new Promise((resolve) =&gt; setTimeout(() =&gt; resolve(&#x27;Task 1 done&#x27;), 2000)),\n      new Promise((resolve) =&gt; setTimeout(() =&gt; resolve(&#x27;Task 2 done&#x27;), 1500))\n    ]).then((results) =&gt; {\n      res.end(JSON.stringify(results));\n    });\n  } else if (req.url === &#x27;/update-ui&#x27;) {\n    // Updating UI elements in response to asynchronous events\n    res.write(&#x27;Updating UI...&#x27;);\n\n    setTimeout(() =&gt; {\n      res.write(&#x27;Update 25%...&#x27;);\n      setTimeout(() =&gt; {\n        res.write(&#x27;Update 50%...&#x27;);\n        setTimeout(() =&gt; {\n          res.write(&#x27;Update 75%...&#x27;);\n          setTimeout(() =&gt; {\n            res.end(&#x27;Update 100%&#x27;);\n          }, 1000);\n        }, 1000);\n      }, 1000);\n    }, 1000);\n  } else if (req.url === &#x27;/background-process&#x27;) {\n    // Processing large amounts of data in the background while the main thread remains responsive\n    const data = [];\n    for (let i = 0; i &lt; 1000000; i++) {\n      data.push(i);\n    }\n\n    // Perform some processing of the large data array asynchronously\n    setTimeout(() =&gt; {\n      res.end(&#x27;Processed data in the background&#x27;);\n    }, 2000);\n  } else if (req.url === &#x27;/network-request&#x27;) {\n    // Performing network requests without freezing the application&#x27;s user interface\n    const options = {\n      hostname: &#x27;api.example.com&#x27;,\n      path: &#x27;/data&#x27;,\n      method: &#x27;GET&#x27;\n    };\n\n    const httpRequest = http.request(options, (networkRes) =&gt; {\n      let data = &#x27;&#x27;;\n\n      networkRes.on(&#x27;data&#x27;, (chunk) =&gt; {\n        data += chunk;\n      });\n\n      networkRes.on(&#x27;end&#x27;, () =&gt; {\n        res.end(data);\n      });\n    });\n\n    httpRequest.end();\n  } else {\n    res.end(&#x27;Hello, send requests to /async-task, /multi-task, /update-ui, /background-process, or /network-request&#x27;);\n  }\n});\n\n// Server listening on port 3000\nserver.listen(3000, () =&gt; {\n  console.log(&#x27;Server running on port 3000&#x27;);\n});\n"
          }
        },
        "dart": {
          "name": "dart",
          "displayname": "Dart",
          "comment": "#|//",
          "ext": "dart",
          "css": "dart",
          "categories": "programming",
          "snippets": {
            "arrays": "void main() {\n  // Storing a collection of elements of the same data type\n  List&lt;int&gt; numbers = [1, 2, 3, 4, 5];\n\n  // Accessing individual elements via index\n  int elementAtIndex2 = numbers[2];\n  \n  // Iterating over elements using loops\n  for (int i = 0; i &lt; numbers.length; i++) {\n    print(numbers[i]);\n  }\n\n  // Sorting elements in ascending order\n  numbers.sort();\n\n  // Searching for a specific element within the array\n  int searchElement = 4;\n  bool isPresent = numbers.contains(searchElement);\n\n  // Modifying elements at specific positions\n  numbers[3] = 10;\n\n  // Adding elements to the end of the array\n  numbers.add(6);\n\n  // Removing elements from the array\n  numbers.remove(2);\n\n  // Merging two arrays into a single array\n  List&lt;int&gt; otherNumbers = [7, 8, 9];\n  List&lt;int&gt; mergedNumbers = [...numbers, ...otherNumbers];\n\n  // Splitting an array into multiple smaller arrays\n  List&lt;List&lt;int&gt;&gt; chunks = [];\n  for (var i = 0; i &lt; numbers.length; i += 2) {\n    chunks.add(numbers.sublist(i, i + 2));\n  }\n\n  // Finding the maximum or minimum element in the array\n  int maxElement = numbers.reduce((current, next) =&gt; current &gt; next ? current : next);\n  int minElement = numbers.reduce((current, next) =&gt; current &lt; next ? current : next);\n\n  // Filtering elements based on a condition\n  List&lt;int&gt; evenNumbers = numbers.where((element) =&gt; element % 2 == 0).toList();\n\n  // Mapping elements to a new value\n  List&lt;int&gt; squaredNumbers = numbers.map((element) =&gt; element * element).toList();\n\n  // Reversing the order of elements in the array\n  numbers = numbers.reversed.toList();\n\n  // Calculating the sum or average of array elements\n  int sum = numbers.reduce((value, element) =&gt; value + element);\n  double average = sum / numbers.length;\n\n  // Copying elements from one array to another\n  List&lt;int&gt; copiedNumbers = List.from(numbers);\n\n  // Checking if an array contains a certain element\n  bool containsElement = numbers.contains(4);\n\n  // Converting an array to a string\n  String numbersString = numbers.join(&quot;, &quot;);\n\n  // Creating multi-dimensional arrays for complex data structures\n  List&lt;List&lt;int&gt;&gt; matrix = [\n    [1, 2],\n    [3, 4]\n  ];\n\n  // Implementing binary search algorithm using arrays\n  int binarySearch(List&lt;int&gt; array, int target) {\n    int low = 0;\n    int high = array.length - 1;\n\n    while (low &lt;= high) {\n      int mid = (low + high) ~/ 2;\n\n      if (array[mid] == target) {\n        return mid;\n      } else if (array[mid] &lt; target) {\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n    }\n\n    return -1; // Element not found\n  }\n\n  // Implementing quicksort algorithm using arrays\n  void quickSort(List&lt;int&gt; array, int left, int right) {\n    if (left &lt; right) {\n      int partitionIndex = partition(array, left, right);\n\n      quickSort(array, left, partitionIndex - 1);\n      quickSort(array, partitionIndex + 1, right);\n    }\n  }\n\n  int partition(List&lt;int&gt; array, int left, int right) {\n    int pivot = array[right];\n    int i = left - 1;\n\n    for (int j = left; j &lt; right; j++) {\n      if (array[j] &lt; pivot) {\n        i++;\n        int temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n      }\n    }\n\n    int temp = array[i + 1];\n    array[i + 1] = array[right];\n    array[right] = temp;\n\n    return i + 1;\n  }\n\n  // Testing binary search\n  print(binarySearch(numbers, elementAtIndex2));\n\n  // Testing quicksort\n  quickSort(numbers, 0, numbers.length - 1);\n}\n",
            "datetime": "// Displaying the current date and time\nvoid displayCurrentDateTime() {\n  DateTime now = DateTime.now();\n  print(&#x27;Current date and time: $now&#x27;);\n}\n\n// Calculating the difference between two dates\nvoid calculateDateDifference() {\n  DateTime date1 = DateTime(2022, 1, 1);\n  DateTime date2 = DateTime(2023, 1, 1);\n  Duration difference = date2.difference(date1);\n  print(&#x27;Difference between two dates: ${difference.inDays} days&#x27;);\n}\n\n// Formatting dates and times for user-friendly display\nvoid formatDatesAndTimes() {\n  DateTime now = DateTime.now();\n  print(&#x27;Formatted date: ${now.day}-${now.month}-${now.year}&#x27;);\n  print(&#x27;Formatted time: ${now.hour}:${now.minute}:${now.second}&#x27;);\n}\n\n// Converting between different date and time formats\nvoid convertDateFormats() {\n  DateTime now = DateTime.now();\n  print(&#x27;ISO 8601 format: ${now.toIso8601String()}&#x27;);\n  print(&#x27;Readable format: ${now.toString()}&#x27;);\n}\n\n// Scheduling tasks or events based on specific dates and times\nvoid scheduleEvents(DateTime eventDate) {\n  // Implement your scheduling logic here\n  print(&#x27;Event scheduled for: $eventDate&#x27;);\n}\n\n// Implementing countdown timers or timers for specific events\nvoid countdownTimer(DateTime eventDate) {\n  Duration timeLeft = eventDate.difference(DateTime.now());\n  print(&#x27;Time left until event: ${timeLeft.inHours} hours&#x27;);\n}\n\n// Handling time zones and daylight saving time adjustments\nvoid handleTimezones() {\n  DateTime now = DateTime.now();\n  print(&#x27;Current time in UTC: ${now.toUtc()}&#x27;);\n}\n\n// Finding the day of week or month for a given date\nvoid findDayOfWeekOrMonth(DateTime date) {\n  print(&#x27;Day of week: ${date.weekday}&#x27;);\n  print(&#x27;Month: ${date.month}&#x27;);\n}\n\n// Working with timestamps for tracking when events occur\nvoid trackEventTimestamp() {\n  DateTime eventTime = DateTime.now();\n  int timestamp = eventTime.millisecondsSinceEpoch; // Convert DateTime to timestamp\n  print(&#x27;Event timestamp: $timestamp&#x27;);\n}\n\nvoid main() {\n  displayCurrentDateTime();\n  calculateDateDifference();\n  formatDatesAndTimes();\n  convertDateFormats();\n\n  scheduleEvents(DateTime(2022, 12, 25, 18, 30));\n  countdownTimer(DateTime(2022, 12, 31));\n  handleTimezones();\n  findDayOfWeekOrMonth(DateTime.now());\n  trackEventTimestamp();\n}\n",
            "dictionaries": "void main() {\n  // Storing key-value pairs for quick retrieval\n  var dictionary = {\n    &#x27;apple&#x27;: &#x27;fruit&#x27;,\n    &#x27;banana&#x27;: &#x27;fruit&#x27;,\n    &#x27;carrot&#x27;: &#x27;vegetable&#x27;,\n  };\n\n  // Implementing a cache or memoization system\n  var cache = &lt;String, int&gt;{};\n\n  int fibonacci(int n) {\n    if (cache.containsKey(n.toString())) {\n      return cache[n.toString()]!;\n    }\n  \n    if (n &lt;= 2) {\n      return 1;\n    }\n  \n    var result = fibonacci(n - 1) + fibonacci(n - 2);\n    cache[n.toString()] = result;\n    return result;\n  }\n\n  // Counting occurrences of elements in a collection\n  var list = [1, 2, 3, 1, 2, 1, 4];\n  var counts = &lt;int, int&gt;{};\n  list.forEach((element) {\n    counts[element] = (counts[element] ?? 0) + 1;\n  });\n\n  // Mapping unique identifiers to objects or data\n  var userMap = {\n    &#x27;user1&#x27;: {&#x27;name&#x27;: &#x27;Alice&#x27;, &#x27;age&#x27;: 30},\n    &#x27;user2&#x27;: {&#x27;name&#x27;: &#x27;Bob&#x27;, &#x27;age&#x27;: 25},\n  };\n\n  // Building efficient lookup tables for data processing\n  var lookupTable = {\n    1: &#x27;One&#x27;,\n    2: &#x27;Two&#x27;,\n    3: &#x27;Three&#x27;,\n  };\n\n  // Checking for the existence of an element in a collection\n  print(dictionary.containsKey(&#x27;apple&#x27;));\n\n  // Implementing a data structure like a symbol table or associative array\n  var symbolTable = {\n    &#x27;key1&#x27;: &#x27;value1&#x27;,\n    &#x27;key2&#x27;: &#x27;value2&#x27;,\n  };\n\n  // Grouping and organizing data based on certain criteria\n  var data = [\n    {&#x27;name&#x27;: &#x27;Alice&#x27;, &#x27;age&#x27;: 30},\n    {&#x27;name&#x27;: &#x27;Bob&#x27;, &#x27;age&#x27;: 25},\n    {&#x27;name&#x27;: &#x27;Charlie&#x27;, &#x27;age&#x27;: 35},\n  ];\n\n  var groupedData = &lt;String, List&lt;Map&lt;String, dynamic&gt;&gt;&gt;{};\n  data.forEach((element) {\n    var ageGroup = groupedData.putIfAbsent(element[&#x27;age&#x27;].toString(), () =&gt; []);\n    ageGroup.add(element);\n  });\n\n  // Providing a fast method for searching and accessing data\n  print(userMap[&#x27;user1&#x27;]);\n}\n",
            "filesystem": "[\n&quot;import &#x27;dart:io&#x27;;&quot;,\n&quot;void main() {&quot;,\n&quot;  // Reading a file in a specific format and processing its contents&quot;,\n&quot;  File myFile = File(&#x27;text.txt&#x27;);&quot;,\n&quot;  String content = myFile.readAsStringSync();&quot;,\n&quot;  print(content);&quot;,\n&quot;  // Writing data to a file or creating a new file&quot;,\n&quot;  File newFile = File(&#x27;new_file.txt&#x27;);&quot;,\n&quot;  newFile.writeAsStringSync(&#x27;Hello, World!&#x27;);&quot;,\n&quot;  // Appending data to an existing file&quot;,\n&quot;  File existingFile = File(&#x27;existing_file.txt&#x27;);&quot;,\n&quot;  existingFile.writeAsStringSync(&#x27;Additional content&#x27;, mode: FileMode.append);&quot;,\n&quot;  // Checking if a file or directory exists&quot;,\n&quot;  bool fileExists = File(&#x27;example.dart&#x27;).existsSync();&quot;,\n&quot;  print(fileExists);&quot;,\n&quot;  // Listing all files and directories within a given directory&quot;,\n&quot;  Directory dir = Directory.current;&quot;,\n&quot;  List&lt;FileSystemEntity&gt; files = dir.listSync();&quot;,\n&quot;  print(files);&quot;,\n&quot;  // Deleting a file or directory&quot;,\n&quot;  File fileToDelete = File(&#x27;file_to_delete.txt&#x27;);&quot;,\n&quot;  fileToDelete.deleteSync();&quot;,\n&quot;  // Moving or renaming a file or directory&quot;,\n&quot;  File fileToMove = File(&#x27;file.txt&#x27;);&quot;,\n&quot;  fileToMove.renameSync(&#x27;new_file.txt&#x27;);&quot;,\n&quot;  // Creating a temporary file or directory&quot;,\n&quot;  File tempFile = File(&#x27;${Directory.systemTemp.path}/temp.txt&#x27;);&quot;,\n&quot;  tempFile.createSync(recursive: true);&quot;,\n&quot;  // Changing file permissions or ownership&quot;,\n&quot;  File fileToChange = File(&#x27;some_file.txt&#x27;);&quot;,\n&quot;  fileToChange.setPermissionsSync(FileStat.statSync(&#x27;other_file.txt&#x27;).mode);&quot;,\n&quot;  // Searching for a specific file or directory within a directory&quot;,\n&quot;  Directory searchDir = Directory.current;&quot;,\n&quot;  List&lt;FileSystemEntity&gt; results = searchDir.listSync(recursive: true).where((entity) =&gt; entity.path.contains(&#x27;search_query&#x27;)).toList();&quot;,\n&quot;}&quot;\n]",
            "regexps": "void main() {\n  // Searching for specific patterns in text data\n  RegExp pattern1 = RegExp(r&#x27;\\b\\d{3}-\\d{2}-\\d{4}\\b&#x27;);\n  String text1 = &#x27;Social Security number: 123-45-6789&#x27;;\n  print(pattern1.hasMatch(text1)); // true\n\n  // Validating input forms (such as emails, phone numbers, etc.)\n  RegExp emailPattern = RegExp(r&#x27;^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$&#x27;);\n  String email = &#x27;test@example.com&#x27;;\n  print(emailPattern.hasMatch(email)); // true\n\n  // Data scraping\n  RegExp scrapePattern = RegExp(r&#x27;&lt;h1&gt;(.*?)&lt;\\/h1&gt;&#x27;);\n  String html = &#x27;&lt;h1&gt;Welcome&lt;/h1&gt;&#x27;;\n  print(scrapePattern.firstMatch(html)?.group(1)); // Welcome\n\n  // Parsing and extracting information from structured data\n  RegExp dataPattern = RegExp(r&#x27;(\\d{2})[\\/\\-](\\d{2})[\\/\\-](\\d{4})&#x27;);\n  String date = &#x27;10/25/2022&#x27;;\n  var match = dataPattern.firstMatch(date);\n  print(&#x27;${match?.group(1)}/${match?.group(2)}/${match?.group(3)}&#x27;); // 10/25/2022\n\n  // Other examples can be implemented in a similar manner\n}\n",
            "strings": "void main() {\n  // Concatenating two strings together\n  String concatenation1 = &quot;Hello&quot;;\n  String concatenation2 = &quot;World&quot;;\n  String concatenatedString = concatenation1 + &quot; &quot; + concatenation2;\n  print(concatenatedString);\n\n  // Splitting a string into an array of substrings based on a delimiter\n  String splitString = &quot;apple,banana,orange&quot;;\n  List&lt;String&gt; splitArray = splitString.split(&quot;,&quot;);\n  print(splitArray);\n\n  // Replacing a specific substring within a larger string\n  String replacedString = &quot;The quick brown fox jumps&quot;;\n  String newString = replacedString.replaceAll(&quot;quick&quot;, &quot;lazy&quot;);\n  print(newString);\n\n  // Removing leading and trailing whitespace from a string\n  String stringWithSpaces = &quot;   Trim this string  &quot;;\n  String trimmedString = stringWithSpaces.trim();\n  print(trimmedString);\n\n  // Converting a string to uppercase or lowercase\n  String originalString = &quot;Hello World&quot;;\n  String upperCaseString = originalString.toUpperCase();\n  String lowerCaseString = originalString.toLowerCase();\n  print(upperCaseString);\n  print(lowerCaseString);\n\n  // Checking if a string contains a certain substring\n  String mainString = &quot;I love programming in Dart&quot;;\n  bool containsSubstring = mainString.contains(&quot;programming&quot;);\n  print(containsSubstring);\n\n  // Finding the index of a specific substring within a larger string\n  String searchString = &quot;The quick brown fox jumps over the lazy dog&quot;;\n  int index = searchString.indexOf(&quot;lazy&quot;);\n  print(index);\n\n  // Getting the length of a string\n  String lengthString = &quot;Dart Programming&quot;;\n  int length = lengthString.length;\n  print(length);\n\n  // Reversing a string\n  String original = &quot;hello&quot;;\n  String reversed = original.split(&#x27;&#x27;).reversed.join();\n  print(reversed);\n\n  // Formatting a string with placeholders for variables\n  String name = &quot;Alice&quot;;\n  int age = 30;\n  String formatted = &quot;My name is $name and I am $age years old&quot;;\n  print(formatted);\n\n  // Parsing and manipulating data stored in a string format\n  String jsonData = &#x27;{&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 25}&#x27;;\n  Map&lt;String, dynamic&gt; parsedData = json.decode(jsonData);\n  print(parsedData);\n\n  // Generating a string representation of an object for debugging or logging\n  String obj = Object().toString();\n  print(obj);\n\n  // Validating and sanitizing user input received as strings\n  String userInput = &quot; user123 &quot;;\n  String sanitizedInput = userInput.trim();\n  print(sanitizedInput);\n\n  // Implementing algorithms like string matching, searching, or sorting\n  String searchString = &quot;programming&quot;;\n  String text = &quot;I love programming in Dart&quot;;\n  if (text.contains(searchString)) {\n    print(&quot;String found&quot;);\n  } else {\n    print(&quot;String not found&quot;);\n  }\n}\n",
            "threading": "import &#x27;dart:async&#x27;;\n\nvoid main() {\n  // Improving performance by running tasks concurrently\n  Future&lt;int&gt; computeFibonacci(int n) async {\n    if (n == 0 || n == 1) {\n      return n;\n    }\n    return await compute(computeFibonacci, n - 1) + await compute(computeFibonacci, n - 2);\n  }\n\n  // Handling multiple tasks simultaneously without blocking the main program\n  Future&lt;void&gt; executeConcurrentTasks() async {\n    await Future.wait([\n      computeFibonacci(10),\n      computeFibonacci(20),\n      computeFibonacci(30),\n    ]);\n    print(&#x27;All tasks completed&#x27;);\n  }\n\n  // Updating UI elements in response to asynchronous events\n  Future&lt;void&gt; updateUI() async {\n    await Future.delayed(Duration(seconds: 2));\n    print(&#x27;UI elements updated&#x27;);\n  }\n\n  // Processing large amounts of data in the background while the main thread remains responsive\n  Future&lt;void&gt; processDataInBackground() async {\n    await Future.delayed(Duration(seconds: 3));\n    print(&#x27;Data processing completed&#x27;);\n  }\n\n  // Performing network requests without freezing the application&#x27;s user interface\n  Future&lt;void&gt; performNetworkRequest() async {\n    await Future.delayed(Duration(seconds: 4));\n    print(&#x27;Network request completed&#x27;);\n  }\n\n  // Call the functions\n  executeConcurrentTasks();\n  updateUI();\n  processDataInBackground();\n  performNetworkRequest();\n}\n"
          }
        },
        "cpp": {
          "name": "cpp",
          "displayname": "C++ (C Plus Plus, C++)",
          "comment": "#|//",
          "ext": "cpp",
          "css": "cpp",
          "categories": "programming",
          "snippets": {
            "arrays": "#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\nint main() {\n    // Storing a collection of elements of the same data type\n    std::vector&lt;int&gt; myArray = {1, 2, 3, 4, 5};\n\n    // Accessing individual elements via index\n    std::cout &lt;&lt; &quot;Element at index 2: &quot; &lt;&lt; myArray[2] &lt;&lt; std::endl;\n\n    // Iterating over elements using loops\n    for (int i = 0; i &lt; myArray.size(); ++i) {\n        std::cout &lt;&lt; myArray[i] &lt;&lt; &quot; &quot;;\n    }\n    std::cout &lt;&lt; std::endl;\n\n    // Sorting elements in ascending order\n    std::sort(myArray.begin(), myArray.end());\n\n    // Searching for a specific element within the array\n    auto it = std::find(myArray.begin(), myArray.end(), 3);\n    if (it != myArray.end()) {\n        std::cout &lt;&lt; &quot;Element found at index: &quot; &lt;&lt; std::distance(myArray.begin(), it) &lt;&lt; std::endl;\n    }\n\n    // Modifying elements at specific positions\n    myArray[3] = 10;\n\n    // Adding elements to the end of the array\n    myArray.push_back(6);\n\n    // Removing elements from the array\n    myArray.pop_back();\n\n    // Merging two arrays into a single array\n    std::vector&lt;int&gt; anotherArray = {7, 8, 9};\n    myArray.insert(myArray.end(), anotherArray.begin(), anotherArray.end());\n\n    // Splitting an array into multiple smaller arrays\n    std::vector&lt;std::vector&lt;int&gt;&gt; splitArrays;\n    for (int i = 0; i &lt; myArray.size(); i += 2) {\n        splitArrays.push_back({myArray[i], myArray[i + 1]});\n    }\n\n    // Finding the maximum element in the array\n    int maxElement = *std::max_element(myArray.begin(), myArray.end());\n\n    // Filtering elements based on a condition\n    std::vector&lt;int&gt; filteredArray;\n    std::copy_if(myArray.begin(), myArray.end(), std::back_inserter(filteredArray), [](int num) {\n        return num % 2 == 0;\n    });\n\n    // Mapping elements to a new value\n    std::vector&lt;int&gt; mappedArray;\n    std::transform(myArray.begin(), myArray.end(), std::back_inserter(mappedArray), [](int num) {\n        return num * 2;\n    });\n\n    // Reversing the order of elements in the array\n    std::reverse(myArray.begin(), myArray.end());\n\n    // Calculating the sum of array elements\n    int sum = std::accumulate(myArray.begin(), myArray.end(), 0);\n\n    // Copying elements from one array to another\n    std::vector&lt;int&gt; copiedArray(myArray.begin(), myArray.end());\n\n    // Checking if an array contains a certain element\n    bool containsElement = std::find(myArray.begin(), myArray.end(), 4) != myArray.end();\n\n    // Converting an array to a string\n    std::string arrayAsString;\n    for (auto num : myArray) {\n        arrayAsString += std::to_string(num) + &quot; &quot;;\n    }\n\n    std::cout &lt;&lt; &quot;Array as string: &quot; &lt;&lt; arrayAsString &lt;&lt; std::endl;\n\n    // Displaying the results\n    std::cout &lt;&lt; &quot;Max Element: &quot; &lt;&lt; maxElement &lt;&lt; std::endl;\n    std::cout &lt;&lt; &quot;Filtered Array: &quot;;\n    for (auto num : filteredArray) {\n        std::cout &lt;&lt; num &lt;&lt; &quot; &quot;;\n    }\n    std::cout &lt;&lt; std::endl;\n\n    std::cout &lt;&lt; &quot;Mapped Array: &quot;;\n    for (auto num : mappedArray) {\n        std::cout &lt;&lt; num &lt;&lt; &quot; &quot;;\n    }\n    std::cout &lt;&lt; std::endl;\n\n    std::cout &lt;&lt; &quot;Reversed Array: &quot;;\n    for (auto num : myArray) {\n        std::cout &lt;&lt; num &lt;&lt; &quot; &quot;;\n    }\n    std::cout &lt;&lt; std::endl;\n\n    std::cout &lt;&lt; &quot;Sum of Array: &quot; &lt;&lt; sum &lt;&lt; std::endl;\n\n    std::cout &lt;&lt; &quot;Copied Array: &quot;;\n    for (auto num : copiedArray) {\n        std::cout &lt;&lt; num &lt;&lt; &quot; &quot;;\n    }\n    std::cout &lt;&lt; std::endl;\n\n    std::cout &lt;&lt; &quot;Array contains 4: &quot; &lt;&lt; (containsElement ? &quot;Yes&quot; : &quot;No&quot;) &lt;&lt; std::endl;\n\n    return 0;\n}\n",
            "datetime": "#include &lt;iostream&gt;\n#include &lt;chrono&gt;\n#include &lt;ctime&gt;\n#include &lt;iomanip&gt;\n\nint main() {\n    // Displaying the current date and time\n    auto now = std::chrono::system_clock::now();\n    std::time_t current_time = std::chrono::system_clock::to_time_t(now);\n    std::cout &lt;&lt; &quot;Current Date and Time: &quot; &lt;&lt; std::ctime(&amp;current_time);\n\n    // Calculating the difference between two dates\n    std::tm date1 = {0, 0, 0, 1, 1, 120}; // Date: Jan 1, 2020\n    std::tm date2 = {0, 0, 0, 1, 1, 121}; // Date: Jan 1, 2021\n    std::time_t time1 = std::mktime(&amp;date1);\n    std::time_t time2 = std::mktime(&amp;date2);\n    double difference_in_seconds = std::difftime(time2, time1);\n    std::cout &lt;&lt; &quot;Difference in seconds between two dates: &quot; &lt;&lt; difference_in_seconds &lt;&lt; &quot; seconds\\n&quot;;\n\n    // Formatting dates and times for user-friendly display\n    std::tm user_date = {0, 0, 0, 1, 0, 121}; // Date: Jan 1, 2021\n    std::cout &lt;&lt; &quot;Formatted Date: &quot; &lt;&lt; std::put_time(&amp;user_date, &quot;%d-%m-%Y&quot;) &lt;&lt; &quot;\\n&quot;;\n\n    // Converting between different date and time formats\n    std::string date_str = &quot;2021-04-15 12:30:00&quot;;\n    std::tm converted_date = {};\n    std::istringstream ss(date_str);\n    ss &gt;&gt; std::get_time(&amp;converted_date, &quot;%Y-%m-%d %H:%M:%S&quot;);\n    std::cout &lt;&lt; &quot;Converted Date: &quot; &lt;&lt; std::put_time(&amp;converted_date, &quot;%d-%m-%Y %H:%M:%S&quot;) &lt;&lt; &quot;\\n&quot;;\n\n    // Scheduling tasks or events based on specific dates and times\n    // Implementation for task scheduling can vary based on requirements\n\n    // Implementing countdown timers or timers for specific events\n    // Implementation for countdown timers depends on specific use case\n\n    // Handling time zones and daylight saving time adjustments\n    // Time zone handling involves system-specific API calls\n\n    // Finding the day of week or month for a given date\n    std::tm day_of_week = {0, 0, 0, 23, 7, 121}; // Date: July 23, 2021\n    std::mktime(&amp;day_of_week);\n    std::cout &lt;&lt; &quot;Day of week for the given date: &quot; &lt;&lt; day_of_week.tm_wday &lt;&lt; &quot;\\n&quot;;\n\n    // Working with timestamps for tracking when events occur\n    std::chrono::steady_clock::time_point start_time = std::chrono::steady_clock::now();\n    // Perform some task here\n    std::chrono::steady_clock::time_point end_time = std::chrono::steady_clock::now();\n    std::chrono::duration&lt;double&gt; elapsed_seconds = end_time - start_time;\n    std::cout &lt;&lt; &quot;Time taken for the task: &quot; &lt;&lt; elapsed_seconds.count() &lt;&lt; &quot; seconds\\n&quot;;\n\n    return 0;\n}\n",
            "dictionaries": "#include &lt;iostream&gt;\n#include &lt;unordered_map&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n\nint main() {\n    // Storing key-value pairs for quick retrieval\n    std::unordered_map&lt;std::string, int&gt; keyValuePairs = {\n        {&quot;apple&quot;, 5},\n        {&quot;banana&quot;, 3},\n        {&quot;orange&quot;, 10}\n    };\n\n    // Implementing a cache or memoization system\n    std::unordered_map&lt;int, int&gt; cache;\n\n    // Counting occurrences of elements in a collection\n    std::vector&lt;int&gt; collection = {1, 2, 3, 4, 1, 2, 3, 1, 2, 1};\n    std::unordered_map&lt;int, int&gt; elementCount;\n    for (int element : collection) {\n        elementCount[element]++;\n    }\n\n    // Mapping unique identifiers to objects or data\n    std::unordered_map&lt;std::string, std::string&gt; uniqueIdentifiersMap;\n    uniqueIdentifiersMap[&quot;ID1&quot;] = &quot;Object1&quot;;\n    uniqueIdentifiersMap[&quot;ID2&quot;] = &quot;Object2&quot;;\n\n    // Building efficient lookup tables for data processing\n    std::unordered_map&lt;std::string, std::vector&lt;int&gt;&gt; lookupTable;\n    lookupTable[&quot;category1&quot;] = {10, 20, 30};\n    lookupTable[&quot;category2&quot;] = {15, 25, 35};\n\n    // Checking for the existence of an element in a collection\n    std::string searchKey = &quot;apple&quot;;\n    if (keyValuePairs.find(searchKey) != keyValuePairs.end()) {\n        std::cout &lt;&lt; searchKey &lt;&lt; &quot; exists in the key-value pairs.&quot; &lt;&lt; std::endl;\n    } else {\n        std::cout &lt;&lt; searchKey &lt;&lt; &quot; does not exist in the key-value pairs.&quot; &lt;&lt; std::endl;\n    }\n\n    // Grouping and organizing data based on certain criteria\n    std::unordered_map&lt;std::string, std::vector&lt;std::string&gt;&gt; groupedData;\n    groupedData[&quot;Group1&quot;] = {&quot;Data1&quot;, &quot;Data2&quot;};\n    groupedData[&quot;Group2&quot;] = {&quot;Data3&quot;, &quot;Data4&quot;};\n\n    // Providing a fast method for searching and accessing data\n    std::string keyToAccess = &quot;orange&quot;;\n    std::cout &lt;&lt; &quot;Value for &quot; &lt;&lt; keyToAccess &lt;&lt; &quot; is: &quot; &lt;&lt; keyValuePairs[keyToAccess] &lt;&lt; std::endl;\n\n    return 0;\n}\n",
            "filesystem": "#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n#include &lt;filesystem&gt;\n\nnamespace fs = std::filesystem;\n\nint main() {\n    // Reading a file in a specific format and processing its contents\n    std::ifstream inputFile(&quot;input.txt&quot;);\n    std::string line;\n    if (inputFile.is_open()) {\n        while (std::getline(inputFile, line)) {\n            // Process each line here\n            std::cout &lt;&lt; line &lt;&lt; std::endl;\n        }\n        inputFile.close();\n    }\n\n    // Writing data to a file or creating a new file\n    std::ofstream outputFile(&quot;output.txt&quot;);\n    if (outputFile.is_open()) {\n        outputFile &lt;&lt; &quot;Writing data to file\\n&quot;;\n        outputFile.close();\n    }\n\n    // Appending data to an existing file\n    std::ofstream appendFile(&quot;append.txt&quot;, std::ios::app);\n    if (appendFile.is_open()) {\n        appendFile &lt;&lt; &quot;Appending data to file\\n&quot;;\n        appendFile.close();\n    }\n\n    // Checking if a file or directory exists\n    if (fs::exists(&quot;test.txt&quot;)) {\n        std::cout &lt;&lt; &quot;File exists\\n&quot;;\n    }\n\n    // Listing all files and directories within a given directory\n    for (const auto&amp; entry : fs::directory_iterator(&quot;path/to/directory&quot;)) {\n        std::cout &lt;&lt; entry.path() &lt;&lt; std::endl;\n    }\n\n    // Deleting a file\n    fs::remove(&quot;file_to_delete.txt&quot;);\n\n    // Moving or renaming a file\n    fs::rename(&quot;old_name.txt&quot;, &quot;new_name.txt&quot;);\n\n    // Creating a temporary file\n    std::ofstream tempFile(fs::temp_directory_path() / &quot;temp.txt&quot;);\n\n    // Changing file permissions or ownership \n    fs::permissions(&quot;file.txt&quot;, fs::perms::owner_read | fs::perms::owner_write);\n\n    // Searching for a specific file or directory within a directory\n    for (const auto&amp; entry : fs::directory_iterator(&quot;path/to/search&quot;)) {\n        if (entry.is_regular_file() &amp;&amp; entry.path().filename() == &quot;target_file.txt&quot;) {\n            std::cout &lt;&lt; &quot;Found target_file.txt at: &quot; &lt;&lt; entry.path() &lt;&lt; std::endl;\n            break;\n        }\n    }\n\n    return 0;\n}\n",
            "regexps": "#include &lt;iostream&gt;\n#include &lt;regex&gt;\n#include &lt;string&gt;\n\nint main() {\n    // Searching for specific patterns in text data\n    std::string text = &quot;Hello, regular expressions are powerful!&quot;;\n    std::regex pattern(&quot;reg[a-z]+&quot;);\n\n    if (std::regex_search(text, pattern)) {\n        std::cout &lt;&lt; &quot;Pattern found in text.&quot; &lt;&lt; std::endl;\n    }\n\n    // Validating input forms (such as emails, phone numbers, etc.)\n    std::string email = &quot;test@example.com&quot;;\n    std::regex emailPattern(R&quot;(^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$)&quot;);\n\n    if (std::regex_match(email, emailPattern)) {\n        std::cout &lt;&lt; &quot;Valid email.&quot; &lt;&lt; std::endl;\n    }\n\n    // Replace strings that match a certain pattern with another string\n    std::string sentence = &quot;Regular expressions are cool!&quot;;\n    std::regex word(&quot;cool&quot;);\n    std::string newSentence = std::regex_replace(sentence, word, &quot;awesome&quot;);\n\n    std::cout &lt;&lt; newSentence &lt;&lt; std::endl;\n\n    // Other uses of regular expressions can be added as needed\n\n    return 0;\n}\n",
            "strings": "#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;algorithm&gt;\n\nint main() {\n    // Concatenating two strings together to create a longer string\n    std::string str1 = &quot;Hello&quot;;\n    std::string str2 = &quot;World&quot;;\n    std::string concatenated = str1 + &quot; &quot; + str2;\n    std::cout &lt;&lt; &quot;Concatenated string: &quot; &lt;&lt; concatenated &lt;&lt; std::endl;\n\n    // Splitting a string into an array of substrings based on a delimiter\n    std::string sentence = &quot;This is a sample sentence&quot;;\n    size_t pos = 0;\n    std::string token;\n    while ((pos = sentence.find(&quot; &quot;)) != std::string::npos) {\n        token = sentence.substr(0, pos);\n        std::cout &lt;&lt; token &lt;&lt; std::endl;\n        sentence.erase(0, pos + 1);\n    }\n    \n    // Replacing a specific substring with another substring within a larger string\n    std::string text = &quot;Replace this text with new text&quot;;\n    std::string toReplace = &quot;text&quot;;\n    std::string replacement = &quot;string&quot;;\n    size_t found = text.find(toReplace);\n    if (found != std::string::npos) {\n        text.replace(found, toReplace.size(), replacement);\n    }\n    std::cout &lt;&lt; &quot;Replaced string: &quot; &lt;&lt; text &lt;&lt; std::endl;\n\n    // Removing leading and trailing whitespace from a string\n    std::string spacedString = &quot;   Trim the spaces    &quot;;\n    spacedString.erase(0, spacedString.find_first_not_of(&#x27; &#x27;));\n    spacedString.erase(spacedString.find_last_not_of(&#x27; &#x27;) + 1, std::string::npos);\n    std::cout &lt;&lt; &quot;Trimmed string: &quot; &lt;&lt; spacedString &lt;&lt; std::endl;\n\n    // Converting a string to uppercase or lowercase\n    std::string mixedCase = &quot;MiXeD CaSe&quot;;\n    std::transform(mixedCase.begin(), mixedCase.end(), mixedCase.begin(), ::tolower);\n    std::cout &lt;&lt; &quot;Lowercase string: &quot; &lt;&lt; mixedCase &lt;&lt; std::endl;\n\n    // Checking if a string contains a certain substring\n    std::string checkSubstring = &quot;This is a sample string&quot;;\n    std::string substringToCheck = &quot;sample&quot;;\n    if (checkSubstring.find(substringToCheck) != std::string::npos) {\n        std::cout &lt;&lt; &quot;String contains substring&quot; &lt;&lt; std::endl;\n    }\n\n    // Finding the index of a specific substring within a larger string\n    std::string searchStr = &quot;Find the index of &#x27;index&#x27; in this string&quot;;\n    size_t indexPos = searchStr.find(&quot;index&quot;);\n    std::cout &lt;&lt; &quot;Index position: &quot; &lt;&lt; indexPos &lt;&lt; std::endl;\n\n    // Getting the length of a string\n    std::string longString = &quot;This is a very long string&quot;;\n    std::cout &lt;&lt; &quot;Length of the string: &quot; &lt;&lt; longString.size() &lt;&lt; std::endl;\n\n    // Reversing a string\n    std::string originalString = &quot;Reverse me&quot;;\n    std::reverse(originalString.begin(), originalString.end());\n    std::cout &lt;&lt; &quot;Reversed string: &quot; &lt;&lt; originalString &lt;&lt; std::endl;\n\n    return 0;\n}\n",
            "threading": "#include &lt;iostream&gt;\n#include &lt;thread&gt;\n#include &lt;chrono&gt;\n\n// Function to simulate performing a task\nvoid performTask(int taskID) {\n    // Simulating task execution\n    std::this_thread::sleep_for(std::chrono::seconds(2));\n    std::cout &lt;&lt; &quot;Task &quot; &lt;&lt; taskID &lt;&lt; &quot; completed!&quot; &lt;&lt; std::endl;\n}\n\nint main() {\n    // Example: Improving performance by running tasks concurrently\n    // Launching multiple threads to perform tasks concurrently\n    std::thread task1(performTask, 1);\n    std::thread task2(performTask, 2);\n\n    // Waiting for the tasks to finish\n    task1.join();\n    task2.join();\n\n    // Example: Handling multiple tasks simultaneously without blocking the main program\n    // These tasks are independent and run concurrently\n\n    // Example: Updating UI elements in response to asynchronous events\n    // In a GUI application, you can use asynchronous tasks to update elements\n\n    // Example: Processing large amounts of data in the background while the main thread remains responsive\n    // Offloading data processing to separate threads to keep the main thread responsive\n\n    // Example: Performing network requests without freezing the application&#x27;s user interface\n    // Running network requests on separate threads to prevent UI freezing\n\n    return 0;\n}\n"
          }
        },
        "node": {
          "name": "node",
          "displayname": "Node.js JavaScript",
          "comment": "#|//",
          "ext": "js",
          "css": "javascript",
          "inherits": "js",
          "categories": "programming",
          "snippets": {
            "arrays": "// Storing a collection of elements of the same data type\nconst numbers = [1, 2, 3, 4, 5];\n\n// Accessing individual elements via index\nconst firstElement = numbers[0]; // Output: 1\nconst lastElement = numbers[numbers.length - 1]; // Output: 5\n\n// Iterating over elements using loops\nfor (let i = 0; i &lt; numbers.length; i++) {\n  console.log(numbers[i]);\n}\n\n// Sorting elements in ascending or descending order\nconst sortedNumbersAsc = numbers.slice().sort((a, b) =&gt; a - b);\nconst sortedNumbersDesc = numbers.slice().sort((a, b) =&gt; b - a);\n\n// Searching for a specific element within the array\nconst searchElement = numbers.indexOf(3); // Output: 2\n\n// Modifying elements at specific positions\nnumbers[2] = 10; // Update element at index 2\n\n// Adding elements to the end of the array\nnumbers.push(6);\n\n// Removing elements from the array\nnumbers.pop();\n\n// Merging two arrays into a single array\nconst numbers2 = [6, 7, 8];\nconst mergedArray = numbers.concat(numbers2);\n\n// Splitting an array into multiple smaller arrays\nconst chunks = Array.from(Array(Math.ceil(numbers.length / 2)), (_, i) =&gt;\n  numbers.slice(i * 2, i * 2 + 2)\n);\n\n// Finding the maximum or minimum element in the array\nconst maxElement = Math.max(...numbers);\nconst minElement = Math.min(...numbers);\n\n// Filtering elements based on a condition\nconst filteredNumbers = numbers.filter((num) =&gt; num % 2 === 0);\n\n// Mapping elements to a new value\nconst mappedNumbers = numbers.map((num) =&gt; num * 2);\n\n// Reversing the order of elements in the array\nconst reversedNumbers = numbers.slice().reverse();\n\n// Calculating the sum or average of array elements\nconst sum = numbers.reduce((acc, cur) =&gt; acc + cur, 0);\nconst average = sum / numbers.length;\n\n// Copying elements from one array to another\nconst copiedArray = [...numbers];\n\n// Checking if an array contains a certain element\nconst hasElement = numbers.includes(4); // Output: true\n\n// Converting an array to a string or vice versa\nconst stringArray = numbers.join(&#x27;,&#x27;);\nconst parsedArray = stringArray.split(&#x27;,&#x27;);\n\n// Creating multi-dimensional arrays for complex data structures\nconst matrix = [[1, 2], [3, 4], [5, 6]];\n\n// Implementing algorithms like binary search or quicksort using arrays\nfunction binarySearch(arr, target) {\n  let low = 0;\n  let high = arr.length - 1;\n\n  while (low &lt;= high) {\n    const mid = Math.floor((low + high) / 2);\n    if (arr[mid] === target) {\n      return mid;\n    } else if (arr[mid] &lt; target) {\n      low = mid + 1;\n    } else {\n      high = mid - 1;\n    }\n  }\n  return -1;\n}\n",
            "datetime": "const moment = require(&#x27;moment&#x27;);\n\n// Displaying the current date and time\nconst currentDateAndTime = moment().format(&#x27;LLLL&#x27;);\nconsole.log(&#x27;Current Date and Time:&#x27;, currentDateAndTime);\n\n// Calculating the difference between two dates\nconst firstDate = moment(&#x27;2022-01-01&#x27;);\nconst secondDate = moment(&#x27;2022-12-31&#x27;);\nconst dateDifference = secondDate.diff(firstDate, &#x27;days&#x27;);\nconsole.log(&#x27;Difference in days between two dates:&#x27;, dateDifference);\n\n// Formatting dates and times for user-friendly display\nconst userFormattedDate = moment().format(&#x27;DD/MM/YYYY&#x27;);\nconsole.log(&#x27;User-friendly formatted date:&#x27;, userFormattedDate);\n\n// Converting between different date and time formats\nconst isoDateTime = &#x27;2023-06-15T13:30:00Z&#x27;;\nconst convertedDateTime = moment(isoDateTime).format(&#x27;MMMM Do, YYYY h:mm:ss a&#x27;);\nconsole.log(&#x27;Converted Date and Time:&#x27;, convertedDateTime);\n\n// Scheduling tasks or events based on specific dates and times\nconst eventDate = moment(&#x27;2022-09-15 10:00&#x27;);\nconst currentDate = moment();\nif (currentDate.isBefore(eventDate)) {\n  console.log(&#x27;Event scheduled for September 15, 2022.&#x27;);\n} else {\n  console.log(&#x27;Event has passed.&#x27;);\n}\n\n// Implementing countdown timers or timers for specific events\nconst countdownToDate = moment(&#x27;2023-01-01&#x27;);\nconst countdownDuration = moment.duration(countdownToDate.diff(moment()));\nconsole.log(`Countdown to ${countdownToDate.format(&#x27;MMM DD, YYYY&#x27;)}: ${countdownDuration.humanize()}`);\n\n// Handling time zones and daylight saving time adjustments\nconst dateTimeInNewYork = moment().tz(&#x27;America/New_York&#x27;).format(&#x27;LLLL&#x27;);\nconsole.log(&#x27;Current Date and Time in New York:&#x27;, dateTimeInNewYork);\n\n// Finding the day of week or month for a given date\nconst dayOfWeek = moment().format(&#x27;dddd&#x27;);\nconsole.log(&#x27;Day of the week:&#x27;, dayOfWeek);\nconst dayOfMonth = moment().format(&#x27;MMMM Do&#x27;);\nconsole.log(&#x27;Day of the month:&#x27;, dayOfMonth);\n\n// Working with timestamps for tracking when events occur\nconst eventTimestamp = moment(&#x27;2022-06-01&#x27;).unix();\nconsole.log(&#x27;Timestamp of the event:&#x27;, eventTimestamp);\n",
            "dictionaries": "// Storing key-value pairs for quick retrieval\nconst dictionary = {\n  apple: &#x27;a fruit&#x27;,\n  banana: &#x27;a fruit&#x27;,\n  carrot: &#x27;a vegetable&#x27;\n};\n\n// Implementing a cache or memoization system\nconst cache = {};\n\nfunction fibonacci(n) {\n  if (n &lt;= 1) return n;\n  if (n in cache) {\n    return cache[n];\n  } else {\n    cache[n] = fibonacci(n - 1) + fibonacci(n - 2);\n    return cache[n];\n  }\n}\n\n// Counting occurrences of elements in a collection\nconst elements = [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;apple&#x27;, &#x27;carrot&#x27;, &#x27;banana&#x27;, &#x27;apple&#x27;];\nconst occurrences = elements.reduce((acc, el) =&gt; {\n  acc[el] = acc[el] ? acc[el] + 1 : 1;\n  return acc;\n}, {});\n\n// Mapping unique identifiers to objects or data\nconst userMap = new Map();\nuserMap.set(1, { name: &#x27;Alice&#x27;, age: 30 });\nuserMap.set(2, { name: &#x27;Bob&#x27;, age: 25 });\n\n// Building efficient lookup tables for data processing\nconst hashMap = new Map();\nhashMap.set(&#x27;key1&#x27;, &#x27;value1&#x27;);\nhashMap.set(&#x27;key2&#x27;, &#x27;value2&#x27;);\n\n// Checking for the existence of an element in a collection\nconst collection = [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;carrot&#x27;];\nconst elementExists = collection.includes(&#x27;banana&#x27;);\n\n// Implementing a data structure like a symbol table or associative array\nconst symbolTable = new Map();\nsymbolTable.set(&#x27;keyA&#x27;, &#x27;valueA&#x27;);\nsymbolTable.set(&#x27;keyB&#x27;, &#x27;valueB&#x27;);\n\n// Grouping and organizing data based on certain criteria\nconst data = [\n  { type: &#x27;fruit&#x27;, name: &#x27;apple&#x27; },\n  { type: &#x27;fruit&#x27;, name: &#x27;banana&#x27; },\n  { type: &#x27;vegetable&#x27;, name: &#x27;carrot&#x27; }\n];\n\nconst groupedData = data.reduce((acc, obj) =&gt; {\n  acc[obj.type] = acc[obj.type] || [];\n  acc[obj.type].push(obj.name);\n  return acc;\n}, {});\n\n// Providing a fast method for searching and accessing data\nconst lookupTable = {\n  key1: &#x27;value1&#x27;,\n  key2: &#x27;value2&#x27;\n};\n\nconst valueForKey = lookupTable[&#x27;key1&#x27;];\n",
            "filesystem": "const fs = require(&#x27;fs&#x27;);\nconst path = require(&#x27;path&#x27;);\n\n// Reading a file in a specific format and processing its contents\nfs.readFile(&#x27;sample.txt&#x27;, &#x27;utf8&#x27;, (err, data) =&gt; {\n  if (err) throw err;\n  console.log(data);\n});\n\n// Writing data to a file or creating a new file\nfs.writeFile(&#x27;newFile.txt&#x27;, &#x27;Hello, World!&#x27;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&#x27;File created and data written successfully&#x27;);\n});\n\n// Appending data to an existing file\nfs.appendFile(&#x27;existingFile.txt&#x27;, &#x27;More data to append&#x27;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&#x27;Data appended to existing file&#x27;);\n});\n\n// Checking if a file or directory exists\nfs.access(&#x27;someFile.txt&#x27;, (err) =&gt; {\n  if (err) {\n    console.log(&#x27;File does not exist&#x27;);\n  } else {\n    console.log(&#x27;File exists&#x27;);\n  }\n});\n\n// Listing all files and directories within a given directory\nfs.readdir(&#x27;.&#x27;, (err, files) =&gt; {\n  if (err) throw err;\n  console.log(&#x27;Files and directories in the current directory:&#x27;, files);\n});\n\n// Deleting a file or directory\nfs.unlink(&#x27;fileToDelete.txt&#x27;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&#x27;File deleted successfully&#x27;);\n});\n\n// Moving or renaming a file or directory\nfs.rename(&#x27;oldFile.txt&#x27;, &#x27;newFile.txt&#x27;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&#x27;File moved/renamed successfully&#x27;);\n});\n\n// Creating a temporary file or directory\nconst tempDir = fs.mkdtempSync(path.join(__dirname, &#x27;tmp-&#x27;));\nconsole.log(&#x27;Temporary directory created:&#x27;, tempDir);\n\n// Changing file permissions or ownership\nfs.chmod(&#x27;file.txt&#x27;, 0o755, (err) =&gt; {\n  if (err) throw err;\n  console.log(&#x27;File permissions changed successfully&#x27;);\n});\n\n// Searching for a specific file or directory within a directory\nconst searchTerm = &#x27;searchFile.txt&#x27;;\nfs.readdir(&#x27;.&#x27;, (err, files) =&gt; {\n  if (err) throw err;\n\n  const fileFound = files.find(file =&gt; file === searchTerm);\n  if (fileFound) {\n    console.log(`${searchTerm} found in the directory`);\n  } else {\n    console.log(`${searchTerm} not found in the directory`);\n  }\n});\n",
            "regexps": "// Importing the built-in Node.js &#x27;fs&#x27; module for file system operations\nconst fs = require(&#x27;fs&#x27;);\n// Importing the built-in Node.js &#x27;readline&#x27; module for reading input\nconst readline = require(&#x27;readline&#x27;);\n\n// Example 1: Searching for specific patterns in text data\nconst searchPattern = /example/;\nconst textData = &#x27;This is an example sentence.&#x27;;\nif (searchPattern.test(textData)) {\n  console.log(&#x27;Pattern found in text data.&#x27;);\n}\n\n// Example 2: Validating input forms (emails)\nconst emailPattern = /^\\S+@\\S+\\.\\S+$/;\nconst email = &#x27;example@email.com&#x27;;\nif (emailPattern.test(email)) {\n  console.log(&#x27;Email is valid.&#x27;);\n}\n\n// Example 3: Data scraping\n// Assume data to be scraped is in &#x27;scrapedData.txt&#x27;\nfs.readFile(&#x27;scrapedData.txt&#x27;, &#x27;utf8&#x27;, (err, data) =&gt; {\n  if (err) throw err;\n  const scrapedPattern = /regex pattern/;\n  const scrapedResults = data.match(scrapedPattern);\n  console.log(&#x27;Scraped data results:&#x27;, scrapedResults);\n});\n\n// Example 4: Replacing strings that match a certain pattern\nconst replacePattern = /example/;\nconst replaceText = &#x27;This is an example text.&#x27;;\nconst replacedText = replaceText.replace(replacePattern, &#x27;replacement&#x27;);\nconsole.log(&#x27;Replaced text:&#x27;, replacedText);\n\n// More examples can be added following a similar structure\n",
            "strings": "// Concatenating two strings together to create a longer string\nconst concatStrings = (str1, str2) =&gt; {\n  return str1 + str2;\n};\n\n// Splitting a string into an array of substrings based on a delimiter\nconst splitString = (str, delimiter) =&gt; {\n  return str.split(delimiter);\n};\n\n// Replacing a specific substring with another substring within a larger string\nconst replaceSubstring = (str, oldSubstr, newSubstr) =&gt; {\n  return str.replace(oldSubstr, newSubstr);\n};\n\n// Removing leading and trailing whitespace from a string\nconst trimString = (str) =&gt; {\n  return str.trim();\n};\n\n// Converting a string to uppercase or lowercase\nconst toUpperCase = (str) =&gt; {\n  return str.toUpperCase();\n};\n\nconst toLowerCase = (str) =&gt; {\n  return str.toLowerCase();\n};\n\n// Checking if a string contains a certain substring\nconst containsSubstring = (str, substring) =&gt; {\n  return str.includes(substring);\n};\n\n// Finding the index of a specific substring within a larger string\nconst findSubstringIndex = (str, substring) =&gt; {\n  return str.indexOf(substring);\n};\n\n// Getting the length of a string\nconst getStringLength = (str) =&gt; {\n  return str.length;\n};\n\n// Reversing a string\nconst reverseString = (str) =&gt; {\n  return str.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;);\n};\n\n// Formatting a string with placeholders for variables\nconst formatString = (str, ...args) =&gt; {\n  return str.replace(/{(\\d+)}/g, (match, index) =&gt; args[index]);\n};\n\n// Parsing and manipulating data stored in a string format (such as JSON or XML)\nconst parseJSON = (jsonString) =&gt; {\n  return JSON.parse(jsonString);\n};\n\n// Generating a string representation of an object for debugging or logging\nconst stringifyObject = (obj) =&gt; {\n  return JSON.stringify(obj);\n};\n\n// Validating and sanitizing user input received as strings\nconst sanitizeInput = (input) =&gt; {\n  // Add sanitization logic here\n  return sanitizedInput;\n};\n\n// Implementing algorithms like string matching, searching, or sorting\n// Example: String Matching using regular expression\nconst matchString = (str, regex) =&gt; {\n  return str.match(regex);\n};\n\n// example usage\nconst str1 = &#x27;Hello&#x27;;\nconst str2 = &#x27;World&#x27;;\nconsole.log(concatStrings(str1, str2));\nconsole.log(splitString(&#x27;apple,orange,banana&#x27;, &#x27;,&#x27;));\nconsole.log(replaceSubstring(&#x27;Hello World&#x27;, &#x27;World&#x27;, &#x27;Universe&#x27;));\nconsole.log(trimString(&#x27;   Hello   &#x27;));\nconsole.log(toUpperCase(&#x27;hello&#x27;));\nconsole.log(toLowerCase(&#x27;WORLD&#x27;));\nconsole.log(containsSubstring(&#x27;Hello World&#x27;, &#x27;World&#x27;));\nconsole.log(findSubstringIndex(&#x27;Hello World&#x27;, &#x27;World&#x27;));\nconsole.log(getStringLength(&#x27;Hello&#x27;));\nconsole.log(reverseString(&#x27;hello&#x27;));\nconsole.log(formatString(&#x27;The {0} is {1}&#x27;, &#x27;sky&#x27;, &#x27;blue&#x27;));\nconsole.log(parseJSON(&#x27;{&quot;key&quot;: &quot;value&quot;}&#x27;));\nconsole.log(stringifyObject({ key: &#x27;value&#x27; }));\nconsole.log(matchString(&#x27;The quick brown fox jumps over the lazy dog.&#x27;, /quick/));\n\nmodule.exports = {\n  concatStrings,\n  splitString,\n  replaceSubstring,\n  trimString,\n  toUpperCase,\n  toLowerCase,\n  containsSubstring,\n  findSubstringIndex,\n  getStringLength,\n  reverseString,\n  formatString,\n  parseJSON,\n  stringifyObject,\n  sanitizeInput,\n  matchString\n};\n",
            "threading": "// Import the necessary modules\nconst { Worker, isMainThread, parentPort } = require(&#x27;worker_threads&#x27;);\nconst axios = require(&#x27;axios&#x27;);\nconst express = require(&#x27;express&#x27;);\n\n// Create an Express server\nconst app = express();\n\n// Route for handling asynchronous processing of data in the background while keeping the main thread responsive\napp.get(&#x27;/process-data&#x27;, async (req, res) =&gt; {\n  // Create a Worker thread to process the large data in the background\n  const worker = new Worker(`\n    const { parentPort } = require(&#x27;worker_threads&#x27;);\n    \n    // Simulating processing large data asynchronously\n    setTimeout(() =&gt; {\n      parentPort.postMessage(&#x27;Data processing completed&#x27;);\n    }, 5000);\n  `, { eval: true });\n  \n  worker.on(&#x27;message&#x27;, (message) =&gt; {\n    // Once processing is completed, send a response back to the user\n    res.json({ message: message });\n  });\n});\n\n// Route for making a network request asynchronously without blocking the UI\napp.get(&#x27;/make-request&#x27;, async (req, res) =&gt; {\n  try {\n    // Make a network request to a sample API using Axios\n    const response = await axios.get(&#x27;https://jsonplaceholder.typicode.com/posts/1&#x27;);\n    // Send the response back to the user\n    res.json(response.data);\n  } catch (error) {\n    console.error(&#x27;Error:&#x27;, error);\n    res.status(500).json({ error: &#x27;An error occurred while making the request&#x27; });\n  }\n});\n\n// Start the Express server on port 3000\napp.listen(3000, () =&gt; {\n  console.log(&#x27;Server running on http://localhost:3000&#x27;);\n});\n"
          }
        },
        "kotlin": {
          "name": "kotlin",
          "displayname": "Kotlin",
          "comment": "#|//",
          "ext": "kt",
          "css": "kotlin",
          "categories": "programming",
          "snippets": {
            "arrays": "fun main() {\n    val numbers = arrayOf(4, 13, 7, 21, 16)\n\n    // Accessing individual elements via index\n    val elementAtIndex2 = numbers[2]\n    println(&quot;Element at index 2: $elementAtIndex2&quot;)\n\n    // Iterating over elements using loops\n    for (number in numbers) {\n        println(number)\n    }\n\n    // Sorting elements in ascending order\n    val sortedNumbers = numbers.sorted()\n    println(&quot;Sorted numbers: $sortedNumbers&quot;)\n\n    // Searching for a specific element within the array\n    val numberToFind = 7\n    val index = numbers.indexOf(numberToFind)\n    if (index != -1) {\n        println(&quot;$numberToFind found at index $index&quot;)\n    } else {\n        println(&quot;$numberToFind not found&quot;)\n    }\n\n    // Modifying elements at specific positions\n    numbers[3] = 100\n    println(&quot;Modified array: ${numbers.joinToString()}&quot;)\n\n    // Adding elements to the end of the array\n    numbers += 5\n    println(&quot;Array after adding 5: ${numbers.joinToString()}&quot;)\n\n    // Removing elements from the array\n    numbers.drop(2)\n    println(&quot;Array after removing first 2 elements: ${numbers.joinToString()}&quot;)\n\n    // Merging two arrays into a single array\n    val moreNumbers = arrayOf(3, 8)\n    val mergedArray = numbers + moreNumbers\n    println(&quot;Merged array: ${mergedArray.joinToString()}&quot;)\n\n    // Splitting an array into multiple smaller arrays\n    val chunkedArrays = numbers.chunked(2)\n    println(&quot;Chunked arrays: $chunkedArrays&quot;)\n\n    // Finding the maximum element in the array\n    val maxNumber = numbers.maxOrNull()\n    println(&quot;Max number: $maxNumber&quot;)\n\n    // Filtering elements based on a condition\n    val filteredNumbers = numbers.filter { it % 2 == 0 }\n    println(&quot;Filtered numbers (even): $filteredNumbers&quot;)\n\n    // Mapping elements to a new value\n    val doubledNumbers = numbers.map { it * 2 }\n    println(&quot;Doubled numbers: ${doubledNumbers.joinToString()}&quot;)\n\n    // Reversing the order of elements in the array\n    val reversedArray = numbers.reversed()\n    println(&quot;Reversed array: ${reversedArray.joinToString()}&quot;)\n\n    // Calculating the sum of array elements\n    val sum = numbers.sum()\n    println(&quot;Sum of array elements: $sum&quot;)\n\n    // Checking if an array contains a certain element\n    val containsSeven = numbers.contains(7)\n    println(&quot;Array contains 7: $containsSeven&quot;)\n\n    // Converting an array to a string\n    val numbersString = numbers.joinToString(separator = &quot;, &quot;, prefix = &quot;[&quot;, postfix = &quot;]&quot;)\n    println(&quot;Array as string: $numbersString&quot;)\n}\n",
            "datetime": "import java.time.*\nimport java.time.format.DateTimeFormatter\n\nfun main() {\n    // Displaying the current date and time\n    val currentDateTime = LocalDateTime.now()\n    println(&quot;Current Date and Time: $currentDateTime&quot;)\n\n    // Calculating the difference between two dates\n    val date1 = LocalDate.of(2022, Month.JANUARY, 1)\n    val date2 = LocalDate.now()\n    val daysDifference = ChronoUnit.DAYS.between(date1, date2)\n    println(&quot;Difference in days between $date1 and $date2: $daysDifference days&quot;)\n\n    // Formatting dates and times for user-friendly display\n    val dateToFormat = LocalDate.of(2022, Month.DECEMBER, 31)\n    val formattedDate = dateToFormat.format(DateTimeFormatter.ofPattern(&quot;MM/dd/yyyy&quot;))\n    println(&quot;Formatted Date: $formattedDate&quot;)\n\n    // Converting between different date and time formats\n    val dateStr = &quot;2022-06-30&quot;\n    val parsedDate = LocalDate.parse(dateStr, DateTimeFormatter.ISO_DATE)\n    println(&quot;Parsed Date from String: $parsedDate&quot;)\n\n    // Scheduling tasks or events based on specific dates and times\n    val futureDateTime = LocalDateTime.of(2022, Month.AUGUST, 15, 10, 0)\n    val eventScheduled = futureDateTime.isAfter(LocalDateTime.now())\n    println(&quot;Is event scheduled for the future? $eventScheduled&quot;)\n\n    // Implementing countdown timers or timers for specific events\n    val eventDateTime = LocalDateTime.of(2023, Month.MARCH, 5, 18, 30)\n    val timeLeft = Duration.between(LocalDateTime.now(), eventDateTime)\n    println(&quot;Time left until the event: ${timeLeft.toDays()} days and ${timeLeft.toHoursPart()} hours&quot;)\n\n    // Handling time zones and daylight saving time adjustments\n    val newYorkZone = ZoneId.of(&quot;America/New_York&quot;)\n    val newYorkDateTime = ZonedDateTime.now(newYorkZone)\n    println(&quot;Current Date and Time in New York: $newYorkDateTime&quot;)\n\n    // Finding the day of week or month for a given date\n    val someDate = LocalDate.of(2022, Month.SEPTEMBER, 15)\n    val dayOfWeek = someDate.dayOfWeek\n    val month = someDate.month\n    println(&quot;Day of Week for $someDate: $dayOfWeek, Month: $month&quot;)\n\n    // Working with timestamps for tracking when events occur\n    val eventTimestamp = Instant.now().epochSecond\n    println(&quot;Event occurred at timestamp: $eventTimestamp seconds since epoch&quot;)\n}\n",
            "dictionaries": "// Storing key-value pairs for quick retrieval\nval dictionary = mutableMapOf&lt;String, Int&gt;()\ndictionary[&quot;apple&quot;] = 5\ndictionary[&quot;banana&quot;] = 10\nprintln(&quot;Value for key &#x27;apple&#x27;: ${dictionary[&quot;apple&quot;]}&quot;)\n\n// Implementing a cache or memoization system\nval cache = mutableMapOf&lt;Int, Int&gt;()\nfun fibonacci(n: Int): Int {\n    return cache.getOrPut(n) {\n        if (n &lt;= 1) n else fibonacci(n - 1) + fibonacci(n - 2)\n    }\n}\nprintln(&quot;Fibonacci value for 10: ${fibonacci(10)}&quot;)\n\n// Counting occurrences of elements in a collection\nval elements = listOf(1, 2, 3, 1, 2, 1, 4, 5)\nval countMap = elements.groupingBy { it }.eachCount()\nprintln(&quot;Occurrences of 1: ${countMap[1]}&quot;)\n\n// Mapping unique identifiers to objects or data\ndata class Product(val id: String, val name: String)\nval products = listOf(Product(&quot;A001&quot;, &quot;Chair&quot;), Product(&quot;A002&quot;, &quot;Table&quot;))\nval productMap = products.associateBy { it.id }\nprintln(&quot;Product with ID A001: ${productMap[&quot;A001&quot;]}&quot;)\n\n// Building efficient lookup tables for data processing\nval employeeData = mapOf(\n    &quot;John&quot; to 30,\n    &quot;Alice&quot; to 25,\n    &quot;Bob&quot; to 28\n)\nprintln(&quot;Age of Bob: ${employeeData[&quot;Bob&quot;]}&quot;)\n\n// Checking for the existence of an element in a collection\nval fruits = setOf(&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;)\nif (&quot;banana&quot; in fruits) {\n    println(&quot;Found banana in the set&quot;)\n}\n\n// Implementing a data structure like a symbol table or associative array\nval symbolTable = mutableMapOf&lt;Char, String&gt;()\nsymbolTable[&#x27;A&#x27;] = &quot;Alpha&quot;\nsymbolTable[&#x27;B&#x27;] = &quot;Beta&quot;\nprintln(&quot;Value for symbol &#x27;A&#x27;: ${symbolTable[&#x27;A&#x27;]}&quot;)\n\n// Grouping and organizing data based on certain criteria\ndata class Person(val name: String, val age: Int)\nval people = listOf(\n    Person(&quot;Alice&quot;, 30),\n    Person(&quot;Bob&quot;, 25),\n    Person(&quot;Alice&quot;, 28)\n)\nval groupedByAge = people.groupBy { it.age }\nprintln(&quot;People aged 28: ${groupedByAge[28]}&quot;)\n\n// Providing a fast method for searching and accessing data\nval bookCollection = mapOf(\n    &quot;SciFi&quot; to listOf(&quot;Dune&quot;, &quot;Foundation&quot;),\n    &quot;Fantasy&quot; to listOf(&quot;Harry Potter&quot;, &quot;Lord of the Rings&quot;)\n)\nval sciFiBooks = bookCollection[&quot;SciFi&quot;]\nprintln(&quot;SciFi books: $sciFiBooks&quot;)\n",
            "filesystem": "import java.io.File\nimport java.nio.file.Files\nimport java.nio.file.Paths\n\nfun main() {\n    val fileName = &quot;example.txt&quot;\n\n    // Reading a file in a specific format and processing its contents\n    val fileContents = File(fileName).readText()\n    println(&quot;File contents: $fileContents&quot;)\n\n    // Writing data to a file or creating a new file\n    File(&quot;newFile.txt&quot;).writeText(&quot;Hello, World!&quot;)\n\n    // Appending data to an existing file\n    File(fileName).appendText(&quot;\\nThis is new content.&quot;)\n\n    // Checking if a file or directory exists\n    val fileExists = File(&quot;newFile.txt&quot;).exists()\n    println(&quot;Does file exist? $fileExists&quot;)\n\n    // Listing all files and directories within a given directory\n    val filesInDirectory = File(&quot;.&quot;).listFiles()?.map { it.name }\n    println(&quot;Files in directory: $filesInDirectory&quot;)\n\n    // Deleting a file or directory\n    Files.delete(Paths.get(&quot;newFile.txt&quot;))\n\n    // Moving or renaming a file or directory\n    Files.move(Paths.get(&quot;example.txt&quot;), Paths.get(&quot;newName.txt&quot;))\n\n    // Creating a temporary file or directory\n    val tempFile = File.createTempFile(&quot;temp&quot;, &quot;.txt&quot;)\n    println(&quot;Temporary file created: ${tempFile.absolutePath}&quot;)\n\n    // Changing file permissions or ownership (Not recommended in Kotlin, typically done on lower-level APIs)\n\n    // Searching for a specific file or directory within a directory\n    val searchFileName = &quot;searchFile.txt&quot;\n    val directory = File(&quot;.&quot;)\n    val matchingFiles = directory.listFiles { file -&gt; file.isDirectory || file.name == searchFileName }\n    println(&quot;Matching files: ${matchingFiles.map { it.name }}&quot;)\n}\n",
            "regexps": "import java.util.regex.Pattern\n\nfun main() {\n    val text = &quot;Regular expressions are very useful for text processing.&quot;\n    \n    // Searching for specific patterns in text data\n    val pattern1 = Pattern.compile(&quot;text&quot;)\n    val matcher1 = pattern1.matcher(text)\n    while (matcher1.find()) {\n        println(&quot;Found: ${matcher1.group()}&quot;)\n    }\n    \n    // Validating input forms (such as emails, phone numbers, etc.)\n    val emailPattern = Pattern.compile(&quot;\\\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Z]{2,}\\\\b&quot;, Pattern.CASE_INSENSITIVE)\n    val email = &quot;example@email.com&quot;\n    println(&quot;Is email valid: ${emailPattern.matcher(email).matches()}&quot;)\n    \n    // Data scraping\n    val html = &quot;&lt;h1&gt;Hello, World!&lt;/h1&gt;&quot;\n    val tagPattern = Pattern.compile(&quot;&lt;.*?&gt;&quot;)\n    val scrapedText = tagPattern.matcher(html).replaceAll(&quot;&quot;)\n    println(&quot;Scraped text: $scrapedText&quot;)\n    \n    // Parsing and extracting information from structured data\n    val data = &quot;Name: John, Age: 30&quot;\n    val extractPattern = Pattern.compile(&quot;Name: (.*), Age: (\\\\d+)&quot;)\n    val matcher2 = extractPattern.matcher(data)\n    while (matcher2.find()) {\n        val name = matcher2.group(1)\n        val age = matcher2.group(2)\n        println(&quot;Name: $name, Age: $age&quot;)\n    }\n    \n    // Replacing strings that match a certain pattern with another string\n    val replacePattern = Pattern.compile(&quot;\\\\buseful\\\\b&quot;)\n    val updatedText = replacePattern.matcher(text).replaceAll(&quot;powerful&quot;)\n    println(&quot;Updated text: $updatedText&quot;)\n    \n    // Tokenizing strings into smaller components\n    val tokens = text.split(&quot;\\\\s+&quot;.toRegex())\n    println(&quot;Tokens: $tokens&quot;)\n    \n    // Other use cases can be implemented similarly using regular expressions\n}\n",
            "strings": "class WorkingWithStrings {\n    fun concatenateStrings(str1: String, str2: String): String {\n        return str1 + str2\n    }\n\n    fun splitString(str: String, delimiter: String): List&lt;String&gt; {\n        return str.split(delimiter)\n    }\n\n    fun replaceSubstring(str: String, oldSub: String, newSub: String): String {\n        return str.replace(oldSub, newSub)\n    }\n\n    fun removeWhitespace(str: String): String {\n        return str.trim()\n    }\n\n    fun convertToUpperCase(str: String): String {\n        return str.toUpperCase()\n    }\n\n    fun convertToLowerCase(str: String): String {\n        return str.toLowerCase()\n    }\n\n    fun checkSubstring(str: String, sub: String): Boolean {\n        return str.contains(sub)\n    }\n\n    fun findSubstringIndex(str: String, sub: String): Int {\n        return str.indexOf(sub)\n    }\n\n    fun getStringLength(str: String): Int {\n        return str.length\n    }\n\n    fun reverseString(str: String): String {\n        return str.reversed()\n    }\n\n    fun formatString(name: String, age: Int): String {\n        return &quot;My name is $name and I am $age years old.&quot;\n    }\n\n    fun manipulateData(str: String): String {\n        // Parsing and manipulating data can vary based on specific format e.g., JSON or XML\n        // Logic to parse and manipulate the input string\n        return &quot;Manipulated data: $str&quot;\n    }\n\n    fun generateObjectString(obj: Any): String {\n        return obj.toString()\n    }\n\n    fun validateUserInput(input: String): Boolean {\n        // Validation and sanitization logic\n        return input.isNotBlank()\n    }\n\n    fun stringMatching(str1: String, str2: String): Boolean {\n        return str1 == str2\n    }\n\n    fun searchSubstring(str: String, sub: String): Boolean {\n        return str.contains(sub)\n    }\n\n    fun sortStrings(strList: List&lt;String&gt;): List&lt;String&gt; {\n        return strList.sorted()\n    }\n}\n\nfun main() {\n    val helper = WorkingWithStrings()\n\n    // Examples\n    println(helper.concatenateStrings(&quot;Hello&quot;, &quot;World&quot;))\n    println(helper.splitString(&quot;Apple,Orange,Peach&quot;, &quot;,&quot;))\n    println(helper.replaceSubstring(&quot;Hello Kotlin&quot;, &quot;Kotlin&quot;, &quot;World&quot;))\n    println(helper.removeWhitespace(&quot;  Trim me  &quot;))\n    println(helper.convertToUpperCase(&quot;hello&quot;))\n    println(helper.convertToLowerCase(&quot;WORLD&quot;))\n    println(helper.checkSubstring(&quot;Hello World&quot;, &quot;World&quot;))\n    println(helper.findSubstringIndex(&quot;Hello World&quot;, &quot;World&quot;))\n    println(helper.getStringLength(&quot;Kotlin&quot;))\n    println(helper.reverseString(&quot;TechGig&quot;))\n    println(helper.formatString(&quot;Alice&quot;, 30))\n    println(helper.manipulateData(&quot;{\\&quot;name\\&quot;: \\&quot;Alice\\&quot;}&quot;))\n    println(helper.generateObjectString(42))\n    println(helper.validateUserInput(&quot;Input&quot;))\n    println(helper.stringMatching(&quot;Hello&quot;, &quot;Hello&quot;))\n    println(helper.searchSubstring(&quot;Hello World&quot;, &quot;World&quot;))\n    println(helper.sortStrings(listOf(&quot;Banana&quot;, &quot;Apple&quot;, &quot;Orange&quot;)))\n}\n",
            "threading": "import kotlinx.coroutines.*\n\nfun main() {\n    // Improving performance by running tasks concurrently\n    runBlocking {\n        val job1 = launch {\n            repeat(3) {\n                println(&quot;Task 1 is running&quot;)\n                delay(1000)\n            }\n        }\n        val job2 = launch {\n            repeat(3) {\n                println(&quot;Task 2 is running&quot;)\n                delay(1500)\n            }\n        }\n        job1.join()\n        job2.join()\n    }\n\n    // Handling multiple tasks simultaneously without blocking the main program\n    runBlocking {\n        val deferred1 = async {\n            delay(1000)\n            &quot;Task 1 is done&quot;\n        }\n        val deferred2 = async {\n            delay(1500)\n            &quot;Task 2 is done&quot;\n        }\n        println(deferred1.await())\n        println(deferred2.await())\n    }\n\n    // Updating UI elements in response to asynchronous events\n    fun updateUI(message: String) {\n        println(&quot;UI Updated: $message&quot;)\n    }\n    runBlocking {\n        launch {\n            delay(2000)\n            updateUI(&quot;Data loaded successfully&quot;)\n        }\n    }\n\n    // Processing large amounts of data in the background while the main thread remains responsive\n    runBlocking {\n        launch {\n            repeat(5) {\n                println(&quot;Processing data chunk $it&quot;)\n                delay(1000)\n            }\n        }\n    }\n\n    // Performing network requests without freezing the application&#x27;s user interface\n    suspend fun fetchData(): String {\n        delay(2000) // Simulating network request delay\n        return &quot;Data fetched successfully&quot;\n    }\n\n    runBlocking {\n        launch {\n            val data = fetchData()\n            println(&quot;Network Request Result: $data&quot;)\n        }\n    }\n}\n\n"
          }
        },
        "typescript": {
          "name": "typescript",
          "displayname": "Typescript",
          "comment": "#|//",
          "ext": "ts",
          "css": "typescript",
          "categories": "programming",
          "snippets": {
            "arrays": "// Storing a collection of elements of the same data type\nconst numbers: number[] = [1, 2, 3, 4, 5];\n\n// Accessing individual elements via index\nconst firstElement: number = numbers[0];\nconst thirdElement: number = numbers[2];\n\n// Iterating over elements using loops\nfor (let i = 0; i &lt; numbers.length; i++) {\n    console.log(numbers[i]);\n}\n\n// Sorting elements in ascending order\nconst sortedNumbersAscending: number[] = numbers.sort((a, b) =&gt; a - b);\n\n// Sorting elements in descending order\nconst sortedNumbersDescending: number[] = numbers.sort((a, b) =&gt; b - a);\n\n// Searching for a specific element within the array\nconst searchElement: number = 3;\nconst indexOfElement: number = numbers.indexOf(searchElement);\n\n// Modifying elements at specific positions\nnumbers[1] = 10;\n\n// Adding elements to the end of the array\nnumbers.push(6);\n\n// Removing elements from the array\nnumbers.pop();\n\n// Merging two arrays into a single array\nconst newNumbers: number[] = [7, 8, 9];\nconst mergedArray: number[] = numbers.concat(newNumbers);\n\n// Splitting an array into multiple smaller arrays\nconst chunkedArray: number[][] = [];\nconst chunkSize = 2;\nfor (let i = 0; i &lt; numbers.length; i += chunkSize) {\n    chunkedArray.push(numbers.slice(i, i + chunkSize));\n}\n\n// Finding the maximum or minimum element in the array\nconst maxElement: number = Math.max(...numbers);\nconst minElement: number = Math.min(...numbers);\n\n// Filtering elements based on a condition\nconst filteredArray: number[] = numbers.filter(num =&gt; num &gt; 3);\n\n// Mapping elements to a new value\nconst mappedArray: number[] = numbers.map(num =&gt; num * 2);\n\n// Reversing the order of elements in the array\nconst reversedArray: number[] = numbers.reverse();\n\n// Calculating the sum or average of array elements\nconst sum: number = numbers.reduce((acc, curr) =&gt; acc + curr, 0);\nconst average: number = sum / numbers.length;\n\n// Copying elements from one array to another\nconst copiedArray: number[] = [...numbers];\n\n// Checking if an array contains a certain element\nconst includesElement: boolean = numbers.includes(4);\n\n// Converting an array to a string or vice versa\nconst arrayAsString: string = numbers.join(&#x27;,&#x27;);\nconst stringAsArray: string[] = &#x27;1,2,3,4&#x27;.split(&#x27;,&#x27;);\n\n// Creating multi-dimensional arrays for complex data structures\nconst multiDimArray: number[][] = [[1, 2], [3, 4], [5, 6]];\n\n// Implementing algorithms like binary search or quicksort using arrays\n// Binary search example\nfunction binarySearch(arr: number[], target: number): number {\n    let left = 0;\n    let right = arr.length - 1;\n    \n    while (left &lt;= right) {\n        const mid = Math.floor((left + right) / 2);\n        \n        if (arr[mid] === target) {\n            return mid;\n        } else if (arr[mid] &lt; target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    \n    return -1; // Element not found\n}\n\nconst indexFound: number = binarySearch(numbers, 3);\n",
            "datetime": "// Displaying the current date and time\nconst currentDateTime: Date = new Date();\nconsole.log(`Current Date and Time: ${currentDateTime}`);\n\n// Calculating the difference between two dates\nconst date1: Date = new Date(&#x27;2022-01-01&#x27;);\nconst date2: Date = new Date(&#x27;2022-12-31&#x27;);\nconst differenceInMilliseconds: number = date2.getTime() - date1.getTime();\nconst differenceInDays: number = differenceInMilliseconds / (1000 * 3600 * 24);\nconsole.log(`Difference between two dates: ${differenceInDays} days`);\n\n// Formatting dates and times for user-friendly display\nconst formattedDate: string = currentDateTime.toLocaleDateString(&#x27;en-US&#x27;);\nconst formattedTime: string = currentDateTime.toLocaleTimeString(&#x27;en-US&#x27;);\nconsole.log(`Formatted Date: ${formattedDate}`);\nconsole.log(`Formatted Time: ${formattedTime}`);\n\n// Converting between different date and time formats\nconst isoString: string = currentDateTime.toISOString();\nconsole.log(`ISO String: ${isoString}`);\n\n// Scheduling tasks or events based on specific dates and times\nconst eventDateTime: Date = new Date(&#x27;2022-09-15T12:00:00&#x27;);\nconst now: number = Date.now();\nconst timeUntilEvent: number = eventDateTime.getTime() - now;\nsetTimeout(() =&gt; {\n    console.log(&#x27;Event is happening now!&#x27;);\n}, timeUntilEvent);\n\n// Implementing countdown timers or timers for specific events\nconst countdownDate: Date = new Date(&#x27;2023-01-01T00:00:00&#x27;);\nconst countdownTimer = setInterval(() =&gt; {\n    const currentTime: number = Date.now();\n    const timeRemaining: number = countdownDate.getTime() - currentTime;\n    console.log(`Time remaining until countdown: ${timeRemaining} milliseconds`);\n}, 1000); // Update every second\n\n// Handling time zones and daylight saving time adjustments\nconst dateWithTimeZone: Date = new Date(&#x27;2022-06-21T12:00:00-07:00&#x27;);\nconsole.log(`Date in specific time zone: ${dateWithTimeZone}`);\n\n// Finding the day of week or month for a given date\nconst dayOfWeek: number = currentDateTime.getDay(); // 0 = Sunday, 1 = Monday, ..., 6 = Saturday\nconst month: number = currentDateTime.getMonth(); // 0 = January, 1 = February, ..., 11 = December\nconsole.log(`Day of Week: ${dayOfWeek}, Month: ${month}`);\n\n// Working with timestamps for tracking when events occur\nconst timestamp: number = currentDateTime.getTime();\nconsole.log(`Timestamp for current date and time: ${timestamp}`);\n",
            "dictionaries": "// Storing key-value pairs for quick retrieval\nconst dictionary: {[key: string]: string} = {\n  &quot;apple&quot;: &quot;fruit&quot;,\n  &quot;carrot&quot;: &quot;vegetable&quot;,\n  &quot;banana&quot;: &quot;fruit&quot;\n};\n\n// Implementing a cache or memoization system\nconst cache: {[key: string]: number} = {};\n\n// Counting occurrences of elements in a collection\nconst collection: string[] = [&quot;apple&quot;, &quot;banana&quot;, &quot;apple&quot;, &quot;carrot&quot;];\nconst counter: {[key: string]: number} = {};\ncollection.forEach((element) =&gt; {\n  counter[element] = counter[element] ? counter[element] + 1 : 1;\n});\n\n// Mapping unique identifiers to objects or data\ninterface Employee {\n  name: string;\n  department: string;\n}\n\nconst employeeMap: {[key: string]: Employee} = {\n  &quot;001&quot;: { name: &quot;Alice&quot;, department: &quot;HR&quot; },\n  &quot;002&quot;: { name: &quot;Bob&quot;, department: &quot;Engineering&quot; }\n};\n\n// Building efficient lookup tables for data processing\nconst lookupTable: {[key: string]: number} = {\n  &quot;key1&quot;: 100,\n  &quot;key2&quot;: 200,\n  &quot;key3&quot;: 300\n};\n\n// Checking for the existence of an element in a collection\nconst fruits: string[] = [&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;];\nconst hasBanana = fruits.includes(&quot;banana&quot;);\n\n// Implementing a data structure like a symbol table or associative array\nconst symbolTable: {[symbol: string]: string} = {\n  &quot;a&quot;: &quot;Alpha&quot;,\n  &quot;b&quot;: &quot;Beta&quot;,\n  &quot;c&quot;: &quot;Gamma&quot;\n};\n\n// Grouping and organizing data based on certain criteria\ninterface Person {\n  name: string;\n  age: number;\n  department: string;\n}\n\nconst people: Person[] = [\n  { name: &quot;Alice&quot;, age: 30, department: &quot;HR&quot; },\n  { name: &quot;Bob&quot;, age: 25, department: &quot;Engineering&quot; }\n];\n\nconst groupedByDepartment: {[department: string]: Person[]} = {};\npeople.forEach((person) =&gt; {\n  if (groupedByDepartment[person.department]) {\n    groupedByDepartment[person.department].push(person);\n  } else {\n    groupedByDepartment[person.department] = [person];\n  }\n});\n\n// Providing a fast method for searching and accessing data\nconst hashTable: {[key: string]: any} = {\n  &quot;key1&quot;: &quot;value1&quot;,\n  &quot;key2&quot;: &quot;value2&quot;\n};\nconst searchKey = &quot;key1&quot;;\nconst searchResult = hashTable[searchKey];\n\nexport {};\n",
            "filesystem": "import * as fs from &quot;fs&quot;;\nimport * as path from &quot;path&quot;;\n\n// Reading a file in a specific format and processing its contents\nconst readAndProcessFile = (filePath: string): void =&gt; {\n  fs.readFile(filePath, &quot;utf8&quot;, (err, data) =&gt; {\n    if (err) {\n      console.error(err);\n      return;\n    }\n    console.log(data);\n    // Process the data here\n  });\n};\n\n// Writing data to a file or creating a new file\nconst writeToFile = (filePath: string, data: string): void =&gt; {\n  fs.writeFile(filePath, data, (err) =&gt; {\n    if (err) {\n      console.error(err);\n      return;\n    }\n    console.log(&quot;Data has been written to the file.&quot;);\n  });\n};\n\n// Appending data to an existing file\nconst appendToFile = (filePath: string, data: string): void =&gt; {\n  fs.appendFile(filePath, data, (err) =&gt; {\n    if (err) {\n      console.error(err);\n      return;\n    }\n    console.log(&quot;Data has been appended to the file.&quot;);\n  });\n};\n\n// Checking if a file or directory exists\nconst checkFileOrDirectoryExists = (path: string): boolean =&gt; {\n  return fs.existsSync(path);\n};\n\n// Listing all files and directories within a given directory\nconst listFilesAndDirectories = (directoryPath: string): void =&gt; {\n  fs.readdir(directoryPath, (err, files) =&gt; {\n    if (err) {\n      console.error(err);\n      return;\n    }\n    console.log(files);\n  });\n};\n\n// Deleting a file or directory\nconst deleteFileOrDirectory = (pathToDelete: string): void =&gt; {\n  fs.rm(pathToDelete, { recursive: true }, (err) =&gt; {\n    if (err) {\n      console.error(err);\n      return;\n    }\n    console.log(&quot;File or directory has been deleted.&quot;);\n  });\n};\n\n// Moving or renaming a file or directory\nconst moveOrRenameFile = (sourcePath: string, targetPath: string): void =&gt; {\n  fs.rename(sourcePath, targetPath, (err) =&gt; {\n    if (err) {\n      console.error(err);\n      return;\n    }\n    console.log(&quot;File or directory has been moved/renamed.&quot;);\n  });\n};\n\n// Creating a temporary file or directory\nconst createTempFileOrDir = (): string =&gt; {\n  return fs.mkdtempSync(path.join(__dirname, &quot;temp-&quot;));\n};\n\n// Changing file permissions or ownership\nconst changeFilePermissions = (filePath: string, mode: string): void =&gt; {\n  fs.chmod(filePath, mode, (err) =&gt; {\n    if (err) {\n      console.error(err);\n      return;\n    }\n    console.log(&quot;File permissions have been changed.&quot;);\n  });\n};\n\n// Searching for a specific file or directory within a directory\nconst searchFileOrDirectory = (directoryPath: string, searchTerm: string): void =&gt; {\n  fs.readdir(directoryPath, (err, files) =&gt; {\n    if (err) {\n      console.error(err);\n      return;\n    }\n    const foundItems = files.filter((file) =&gt; file.includes(searchTerm));\n    console.log(foundItems);\n  });\n};\n\n// Example Usage:\n\n// readAndProcessFile(&quot;example.txt&quot;);\n// writeToFile(&quot;newfile.txt&quot;, &quot;Hello, World!&quot;);\n// appendToFile(&quot;existingfile.txt&quot;, &quot;Some additional data.&quot;);\n// console.log(checkFileOrDirectoryExists(&quot;example.txt&quot;));\n// listFilesAndDirectories(__dirname);\n// deleteFileOrDirectory(&quot;fileToDelete.txt&quot;);\n// moveOrRenameFile(&quot;source.txt&quot;, &quot;destination.txt&quot;);\n// const tempDir = createTempFileOrDir();\n// console.log(tempDir);\n// changeFilePermissions(&quot;file.txt&quot;, &quot;755&quot;);\n// searchFileOrDirectory(__dirname, &quot;example&quot;);\n\n",
            "regexps": "// Import the regular expression module\nimport * as regex from &#x27;regex&#x27;;\n\n// Searching for specific patterns in text data\nconst searchText = &#x27;Lorem ipsum dolor sit amet&#x27;;\nconst patternToFind = /dolor/;\nif (regex.test(patternToFind, searchText)) {\n    console.log(&#x27;Pattern found in text&#x27;);\n}\n\n// Validating input forms (such as emails, phone numbers, etc.)\nconst emailInput = &#x27;test@example.com&#x27;;\nconst emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\nif (regex.test(emailPattern, emailInput)) {\n    console.log(&#x27;Email is valid&#x27;);\n}\n\n// Data scraping\n// Code for scraping data here\n\n// Parsing and extracting information from structured data\n// Code for parsing and extracting data here\n\n// Replacing strings that match a certain pattern with another string\nconst textToReplace = &#x27;Hello dear friend&#x27;;\nconst replacedText = textToReplace.replace(/dear/g, &#x27;beloved&#x27;);\nconsole.log(replacedText);\n\n// Tokenizing strings into smaller components\nconst sentence = &#x27;This is a sentence to tokenize&#x27;;\nconst tokens = sentence.split(&#x27; &#x27;);\nconsole.log(tokens);\n\n// Filtering and processing text\n// Code for text filtering and processing here\n\n// Pattern matching in search algorithms\n// Code for pattern matching in search algorithms here\n\n// Checking for the presence of specific characters or words\nconst textToCheck = &#x27;Sample text to search&#x27;;\nconst textPattern = /search/;\nif (regex.test(textPattern, textToCheck)) {\n    console.log(&#x27;Pattern found in text&#x27;);\n}\n\n// Text manipulation and transformation\n// Code for text manipulation and transformation here\n\n// Input sanitization\n// Code for input sanitization here\n\n// Pattern-based data extraction\n// Code for pattern-based data extraction here\n\n// Syntax highlighting in text editors or IDEs\n// Code for syntax highlighting here\n\n// Data validation in form submission\n// Code for form submission data validation here\n\n// Extracting data from log files or other text-based records\n// Code for extracting data from logs here\n\n// Pattern matching in natural language processing tasks\n// Code for pattern matching in NLP tasks here\n\n// Data cleaning and preprocessing\n// Code for data cleaning and preprocessing here\n\n// Automating repetitive text processing tasks\n// Code for automating text processing tasks here\n\n// Generating reports or summaries based on text patterns\n// Code for generating reports based on text patterns here\n\n// Customizing search functionality in web applications\n// Code for customizing search functionality here\n\n// Validating and formatting user input\n// Code for user input validation and formatting here\n\n// Parsing URLs and query parameters\n// Code for parsing URLs and query parameters here\n\n// Implementing text-based search functionality\n// Code for text-based search functionality here\n",
            "strings": "// Concatenating two strings together to create a longer string\nconst concatStrings = (str1: string, str2: string): string =&gt; {\n  return str1 + str2;\n}\n\n// Splitting a string into an array of substrings based on a delimiter\nconst splitString = (str: string, delimiter: string): string[] =&gt; {\n  return str.split(delimiter);\n}\n\n// Replacing a specific substring with another substring within a larger string\nconst replaceSubstring = (str: string, oldSubstr: string, newSubstr: string): string =&gt; {\n  return str.replace(oldSubstr, newSubstr);\n}\n\n// Removing leading and trailing whitespace from a string\nconst trimString = (str: string): string =&gt; {\n  return str.trim();\n}\n\n// Converting a string to uppercase or lowercase\nconst convertToUpperCase = (str: string): string =&gt; {\n  return str.toUpperCase();\n}\n\nconst convertToLowerCase = (str: string): string =&gt; {\n  return str.toLowerCase();\n}\n\n// Checking if a string contains a certain substring\nconst checkSubstring = (str: string, substr: string): boolean =&gt; {\n  return str.includes(substr);\n}\n\n// Finding the index of a specific substring within a larger string\nconst findSubstringIndex = (str: string, substr: string): number =&gt; {\n  return str.indexOf(substr);\n}\n\n// Getting the length of a string\nconst getStringLength = (str: string): number =&gt; {\n  return str.length;\n}\n\n// Reversing a string\nconst reverseString = (str: string): string =&gt; {\n  return str.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;);\n}\n\n// Formatting a string with placeholders for variables\nconst formatString = (str: string, ...args: string[]): string =&gt; {\n  return str.replace(/{(\\d+)}/g, (match, index) =&gt; args[index]);\n}\n\n// Parsing and manipulating data stored in a string format (such as JSON or XML)\ninterface User {\n  name: string;\n  age: number;\n}\n\nconst parseJSONString = (jsonStr: string): User =&gt; {\n  return JSON.parse(jsonStr);\n}\n\n// Generating a string representation of an object for debugging or logging\nconst objectToString = (obj: object): string =&gt; {\n  return JSON.stringify(obj);\n}\n\n// Validating and sanitizing user input received as strings\nconst sanitizeInput = (input: string): string =&gt; {\n  // add sanitization logic as needed\n  return input.trim();\n}\n\n// Implementing algorithms like string matching, searching, or sorting\nconst sortString = (str: string): string =&gt; {\n  return str.split(&#x27;&#x27;).sort().join(&#x27;&#x27;);\n}\n\nexport {\n  concatStrings,\n  splitString,\n  replaceSubstring,\n  trimString,\n  convertToUpperCase,\n  convertToLowerCase,\n  checkSubstring,\n  findSubstringIndex,\n  getStringLength,\n  reverseString,\n  formatString,\n  parseJSONString,\n  objectToString,\n  sanitizeInput,\n  sortString\n};\n",
            "threading": "// Import necessary modules\nimport * as fetch from &#x27;node-fetch&#x27;;\n\n// Improving performance by running tasks concurrently\nfunction performConcurrentTasks() {\n    const task1 = asyncTask1();\n    const task2 = asyncTask2();\n    \n    return Promise.all([task1, task2]);\n}\n\n// Handling multiple tasks simultaneously without blocking the main program\nasync function handleMultipleTasks() {\n    const result1 = await asyncTask1();\n    const result2 = await asyncTask2();\n    \n    return { result1, result2 };\n}\n\n// Updating UI elements in response to asynchronous events\nfunction updateUI() {\n    asyncTask1().then((data) =&gt; {\n        // Update UI with data\n    });\n}\n\n// Processing large amounts of data in the background while the main thread remains responsive\nfunction processDataInBackground() {\n    // Start background thread or worker to process data\n    // Main thread remains responsive\n}\n\n// Performing network requests without freezing the application&#x27;s user interface\nasync function performNetworkRequest() {\n    const response = await fetch(&#x27;https://api.example.com/data&#x27;);\n    const data = await response.json();\n\n    return data;\n}\n\nasync function asyncTask1() {\n    // Simulate some asynchronous task\n    return new Promise((resolve) =&gt; {\n        setTimeout(() =&gt; {\n            resolve(&#x27;Task 1 completed&#x27;);\n        }, 2000);\n    });\n}\n\nasync function asyncTask2() {\n    // Simulate another asynchronous task\n    return new Promise((resolve) =&gt; {\n        setTimeout(() =&gt; {\n            resolve(&#x27;Task 2 completed&#x27;);\n        }, 3000);\n    });\n}\n\n// Call the functions\nperformConcurrentTasks().then((results) =&gt; {\n    console.log(results);\n});\n\nhandleMultipleTasks().then((results) =&gt; {\n    console.log(results);\n});\n\nupdateUI();\n\nprocessDataInBackground();\n\nperformNetworkRequest().then((data) =&gt; {\n    console.log(data);\n});\n"
          }
        },
        "powershell": {
          "name": "powershell",
          "displayname": "Powershell (Windows)",
          "comment": "#|//",
          "ext": "ps1",
          "css": "powershell",
          "categories": "programming",
          "snippets": {
            "arrays": "# Storing a collection of elements of the same data type\n$numbers = @(1, 2, 3, 4, 5)\n\n# Accessing individual elements via index\n$secondNumber = $numbers[1]\n\n# Iterating over elements using loops\nforeach ($number in $numbers) {\n    Write-Output $number\n}\n\n# Sorting elements in ascending or descending order\n$numbersSorted = $numbers | Sort-Object\n$numbersSortedDescending = $numbers | Sort-Object -Descending\n\n# Searching for a specific element within the array\n$foundNumber = $numbers -contains 3\n\n# Modifying elements at specific positions\n$numbers[2] = 10\n\n# Adding elements to the end of the array\n$numbers += 6\n\n# Removing elements from the array\n$numbersRemoved = $numbers | Where-Object { $_ -ne 4 }\n\n# Merging two arrays into a single array\n$moreNumbers = @(7, 8, 9)\n$combinedNumbers = $numbers + $moreNumbers\n\n# Splitting an array into multiple smaller arrays\n$chunks = $numbers | Group-Object -Property { [math]::Floor($_ / 2) }\n\n# Finding the maximum or minimum element in the array\n$maximumNumber = $numbers | Measure-Object -Maximum\n$minimumNumber = $numbers | Measure-Object -Minimum\n\n# Filtering elements based on a condition\n$filteredNumbers = $numbers | Where-Object { $_ -gt 2 }\n\n# Mapping elements to a new value\n$mappedNumbers = $numbers | ForEach-Object { $_ * 2 }\n\n# Reversing the order of elements in the array\n$reversedNumbers = $numbers | Select-Object -Last ($numbers.Length) -First $numbers.Length\n\n# Calculating the sum or average of array elements\n$sum = ($numbers | Measure-Object -Sum).Sum\n$average = ($numbers | Measure-Object -Average).Average\n\n# Copying elements from one array to another\n$copiedNumbers = $numbers.Clone()\n\n# Checking if an array contains a certain element\n$containsNumber = $numbers -contains 5\n\n# Converting an array to a string or vice versa\n$numbersAsString = $numbers -join &quot;,&quot;\n$numbersFromString = $numbersAsString -split &quot;,&quot;\n\n# Creating multi-dimensional arrays for complex data structures\n$multiArray = @( @(&quot;A&quot;, &quot;B&quot;), @(&quot;C&quot;, &quot;D&quot;) )\n\n# Implementing algorithms like binary search or quicksort using arrays\nfunction BinarySearch([int[]]$arr, [int]$target) {\n    $left = 0\n    $right = $arr.Length - 1\n\n    while ($left -le $right) {\n        $mid = [math]::Floor(($left + $right) / 2)\n\n        if ($arr[$mid] -eq $target) {\n            return $mid\n        } elseif ($arr[$mid] -lt $target) {\n            $left = $mid + 1\n        } else {\n            $right = $mid - 1\n        }\n    }\n\n    return -1\n}\n\n# Example usage of BinarySearch algorithm\n$binarySearchResult = BinarySearch $numbers 3\n\n# End of examples\n",
            "datetime": "# Displaying the current date and time\nGet-Date\n\n# Calculating the difference between two dates\n$date1 = Get-Date\n$date2 = Get-Date\n$datediff = New-TimeSpan -Start $date1 -End $date2\n$datediff.TotalDays\n\n# Formatting dates and times for user-friendly display\n$customFormat = Get-Date -Format &quot;yyyy-MM-dd HH:mm:ss&quot;\n$customFormat\n\n# Converting between different date and time formats\n$dateString = &quot;2022-06-01&quot;\n$dateObject = [DateTime]::ParseExact($dateString, &quot;yyyy-MM-dd&quot;, $null)\n$dateObject\n\n# Scheduling tasks or events based on specific dates and times\nRegister-ScheduledJob -Name &quot;MyScheduledJob&quot; -ScriptBlock { Write-Host &quot;Scheduled task executed&quot; } -Trigger (New-JobTrigger -Once -At $(Get-Date).AddMinutes(1))\n\n# Implementing countdown timers or timers for specific events\nStart-Sleep -Seconds 10\nWrite-Host &quot;Timer finished!&quot;\n\n# Handling time zones and daylight saving time adjustments\n$currentTime = Get-Date\n$currentTime.ToUniversalTime()\n\n# Finding the day of week or month for a given date\n$date = Get-Date\n$dayOfWeek = $date.DayOfWeek\n$month = $date.Month\n$dayOfWeek\n$month\n\n# Working with timestamps for tracking when events occur\n$startTimestamp = Get-Date -UFormat &quot;%s&quot;\nStart-Sleep -Seconds 5\n$endTimestamp = Get-Date -UFormat &quot;%s&quot;\n$elapsedTime = $endTimestamp - $startTimestamp\n$elapsedTime\n",
            "dictionaries": "[\n    &quot;$myDictionary = @{}&quot;,\n    &quot;$myDictionary[&#x27;key1&#x27;] = &#x27;value1&#x27;&quot;,\n    &quot;$myDictionary[&#x27;key2&#x27;] = &#x27;value2&#x27;&quot;,\n    &quot;&quot;,\n    &quot;# Implementing a cache or memoization system&quot;,\n    &quot;$cache = @{}&quot;,\n    &quot;function CalculateFibonacci($n){&quot;,\n    &quot;    if($n -le 1){ return $n }&quot;,\n    &quot;    if($cache.ContainsKey($n)){ return $cache[$n] }&quot;,\n    &quot;    $result = CalculateFibonacci($n - 1) + CalculateFibonacci($n - 2)&quot;,\n    &quot;    $cache[$n] = $result&quot;,\n    &quot;    return $result&quot;,\n    &quot;}&quot;,\n    &quot;&quot;,\n    &quot;# Counting occurrences of elements in a collection&quot;,\n    &quot;$collection = @(&#x27;apple&#x27;, &#x27;orange&#x27;, &#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;orange&#x27;)&quot;,\n    &quot;$countDictionary = @{}&quot;,\n    &quot;foreach($item in $collection){&quot;,\n    &quot;    if($countDictionary.ContainsKey($item)){&quot;,\n    &quot;        $countDictionary[$item]++&quot;,\n    &quot;    } else {&quot;,\n    &quot;        $countDictionary[$item] = 1&quot;,\n    &quot;    }&quot;,\n    &quot;}&quot;,\n    &quot;&quot;,\n    &quot;# Mapping unique identifiers to objects or data&quot;,\n    &quot;$employeeDictionary = @{}&quot;,\n    &quot;$employeeDictionary[&#x27;emp1&#x27;] = &#x27;John Doe&#x27;&quot;,\n    &quot;$employeeDictionary[&#x27;emp2&#x27;] = &#x27;Jane Smith&#x27;&quot;,\n    &quot;&quot;,\n    &quot;# Building efficient lookup tables for data processing&quot;,\n    &quot;$lookupTable = @{&quot;,\n    &quot;    &#x27;keyA&#x27; = &#x27;valueA&#x27;&quot;,\n    &quot;    &#x27;keyB&#x27; = &#x27;valueB&#x27;&quot;,\n    &quot;}&quot;,\n    &quot;&quot;,\n    &quot;# Checking for the existence of an element in a collection&quot;,\n    &quot;$lookupKey = &#x27;keyA&#x27;&quot;,\n    &quot;if($lookupTable.ContainsKey($lookupKey)){&quot;,\n    &quot;    Write-Host &#x27;Element is present&#x27;&quot;,\n    &quot;} else {&quot;,\n    &quot;    Write-Host &#x27;Element not found&#x27;&quot;,\n    &quot;}&quot;,\n    &quot;&quot;,\n    &quot;# Implementing a data structure like a symbol table or associative array&quot;,\n    &quot;# PowerShell&#x27;s hashtable can be used for this purpose&quot;,\n    &quot;&quot;,\n    &quot;# Grouping and organizing data based on certain criteria&quot;,\n    &quot;# This can be achieved by grouping data based on a common property or value&quot;,\n    &quot;&quot;,\n    &quot;# Providing a fast method for searching and accessing data&quot;,\n    &quot;# PowerShell&#x27;s hash tables provide fast lookup and retrieval of data&quot;\n]\n",
            "filesystem": "[\n    &quot;# Reading a file in a specific format and processing its contents&quot;,\n    &quot;Get-Content -Path &#x27;C:\\\\path\\\\to\\\\file.txt&#x27; -Encoding UTF8&quot;,\n    \n    &quot;# Writing data to a file or creating a new file&quot;,\n    &quot;Set-Content -Path &#x27;C:\\\\path\\\\to\\\\newfile.txt&#x27; -Value &#x27;Hello, World!&#x27; -Encoding UTF8&quot;,\n    \n    &quot;# Appending data to an existing file&quot;,\n    &quot;&#x27;New content to append&#x27; | Add-Content -Path &#x27;C:\\\\path\\\\to\\\\existingfile.txt&#x27;&quot;,\n    \n    &quot;# Checking if a file or directory exists&quot;,\n    &quot;Test-Path -Path &#x27;C:\\\\path\\\\to\\\\file_or_directory&#x27;&quot;,\n    \n    &quot;# Listing all files and directories within a given directory&quot;,\n    &quot;Get-ChildItem -Path &#x27;C:\\\\path\\\\to\\\\directory&#x27; -Recurse&quot;,\n    \n    &quot;# Deleting a file or directory&quot;,\n    &quot;Remove-Item -Path &#x27;C:\\\\path\\\\to\\\\file_or_directory&#x27; -Force&quot;,\n    \n    &quot;# Moving or renaming a file or directory&quot;,\n    &quot;Move-Item -Path &#x27;C:\\\\path\\\\to\\\\file_or_directory&#x27; -Destination &#x27;C:\\\\new\\\\path&#x27;&quot;,\n    \n    &quot;# Creating a temporary file or directory&quot;,\n    &quot;$tempFile = [System.IO.Path]::GetTempFileName(); Remove-Item $tempFile&quot;,\n    \n    &quot;# Changing file permissions or ownership&quot;,\n    &quot;$acl = Get-Acl -Path &#x27;C:\\\\path\\\\to\\\\file_or_directory&#x27;; $rules = New-Object System.Security.AccessControl.FileSystemAccessRule(&#x27;USERNAME&#x27;, &#x27;FullControl&#x27;, &#x27;Allow&#x27;); $acl.SetAccessRule($rules); Set-Acl -Path &#x27;C:\\\\path\\\\to\\\\file_or_directory&#x27; -AclObject $acl&quot;,\n    \n    &quot;# Searching for a specific file or directory within a directory&quot;,\n    &quot;Get-ChildItem -Path &#x27;C:\\\\path\\\\to\\\\directory&#x27; -Filter &#x27;filename_pattern&#x27; -Recurse&quot;\n]\n",
            "regexps": "# Searching for specific patterns in text data\n$text = &quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit&quot;\n$pattern = &quot;dolor&quot;\nif ($text -match $pattern) {\n    Write-Output &quot;Pattern found&quot;\n}\n\n# Validating input forms (such as emails, phone numbers, etc.)\n$email = &quot;example@example.com&quot;\n$emailPattern = &quot;^\\w+([-+.&#x27;]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$&quot;\nif ($email -match $emailPattern) {\n    Write-Output &quot;Email is valid&quot;\n}\n\n# Data scraping\n$html = Invoke-WebRequest -Uri &quot;https://www.example.com&quot;\n$pattern = &quot;&lt;title&gt;(.*?)&lt;\\/title&gt;&quot;\n$match = [regex]::Match($html.Content, $pattern).Groups[1].Value\nWrite-Output &quot;Title: $match&quot;\n\n# Parsing and extracting information from structured data\n$csv = Import-Csv &quot;data.csv&quot;\nforeach ($row in $csv) {\n    Write-Output &quot;Name: $($row.Name), Age: $($row.Age)&quot;\n}\n\n# Replacing strings that match a certain pattern with another string\n$text = &quot;Hello World&quot;\n$text -replace &quot;Hello&quot;, &quot;Hi&quot;\n\n# Tokenizing strings into smaller components\n$text = &quot;apple,banana,orange&quot;\n$tokens = $text -split &quot;,&quot;\nforeach ($token in $tokens) {\n    Write-Output $token\n}\n\n# Filtering and processing text\n$text = &quot;Lorem ipsum dolor sit amet&quot;\n$filteredText = $text -split &quot; &quot; | Where-Object { $_ -ne &quot;dolor&quot; } | Out-String\nWrite-Output $filteredText\n\n# Pattern matching in search algorithms\n$pattern = &quot;Lorem&quot;\n$matches = [regex]::Matches($text, $pattern)\nforeach ($match in $matches) {\n    Write-Output $match.Value\n}\n\n# Checking for the presence of specific characters or words\n$text = &quot;Hello World&quot;\nif ($text.Contains(&quot;Hello&quot;)) {\n    Write-Output &quot;Text contains &#x27;Hello&#x27;&quot;\n}\n\n# Text manipulation and transformation\n$text.ToUpper()\n\n# Input sanitization\n$input = Read-Host &quot;Enter text&quot;\n$cleanInput = $input -replace &quot;[^\\w\\s]&quot;, &quot;&quot;\nWrite-Output $cleanInput\n\n# Pattern-based data extraction\n$text = &quot;Name: John, Age: 30&quot;\n$pattern = &quot;(Name: )(\\w+), (Age: )(\\d+)&quot;\n$extractedData = [regex]::Match($text, $pattern)\nWrite-Output &quot;Name: $($extractedData.Groups[2].Value), Age: $($extractedData.Groups[4].Value)&quot;\n\n# Syntax highlighting in text editors or IDEs\n# [Not executable in this code example]\n\n# Data validation in form submission\n$formData = @{\n    Name = &quot;John&quot;\n    Email = &quot;example@example.com&quot;\n}\nif ($formData[&quot;Name&quot;] -match &quot;\\w+&quot; -and $formData[&quot;Email&quot;] -match &quot;^\\w+([-+.&#x27;]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$&quot;) {\n    Write-Output &quot;Form data is valid&quot;\n}\n\n# Extracting data from log files or other text-based records\n$log = Get-Content &quot;logfile.txt&quot;\n$pattern = &quot;Error: (\\d+)&quot;\n$matches = $log | Select-String -Pattern $pattern -AllMatches | Foreach-Object { $_.Matches.Groups[1].Value }\nWrite-Output $matches\n\n# Pattern matching in natural language processing tasks\n# [Not executable in this code example]\n\n# Data cleaning and preprocessing\n$text = &quot;Lorem  ipsum     dolor   sit     amet&quot;\n$cleanedText = $text -split &quot;\\s+&quot; -join &quot; &quot;\nWrite-Output $cleanedText\n\n# Automating repetitive text processing tasks\n# [Depends on use case, not specified in this code example]\n\n# Generating reports or summaries based on text patterns\n# [Depends on specific reporting needs, not specified in this code example]\n\n# Customizing search functionality in web applications\n# [Depends on the specific web application implementation]\n\n# Validating and formatting user input\n$userInput = &quot;  John   Doe  &quot;\n$cleanedUserInput = $userInput.Trim()\nWrite-Output $cleanedUserInput\n\n# Parsing URLs and query parameters\n$url = &quot;https://www.example.com/page?param1=value1&amp;param2=value2&quot;\n$pattern = &quot;(\\w+)=([\\w\\d]+)&quot;\n$matches = [regex]::Matches($url, $pattern)\nforeach ($match in $matches) {\n    Write-Output &quot;$($match.Groups[1].Value): $($match.Groups[2].Value)&quot;\n}\n\n# Implementing text-based search functionality\n# [Depends on the implementation of the search functionality]\n\n",
            "strings": "# Concatenating two strings together to create a longer string\n$concatenatedString = &quot;Hello, &quot; + &quot;World&quot;\n\n# Splitting a string into an array of substrings based on a delimiter\n$stringToSplit = &quot;apple,banana,orange&quot;\n$splitArray = $stringToSplit -split &quot;,&quot;\n\n# Replacing a specific substring with another substring within a larger string\n$originalString = &quot;Hello, World!&quot;\n$modifiedString = $originalString -replace &quot;World&quot;, &quot;Everyone&quot;\n\n# Removing leading and trailing whitespace from a string\n$whitespaceString = &quot;   Trimmed String    &quot;\n$trimmedString = $whitespaceString.Trim()\n\n# Converting a string to uppercase or lowercase\n$lowerCaseString = &quot;lowercase&quot;\n$upperCaseString = $lowerCaseString.ToUpper()\n\n# Checking if a string contains a certain substring\n$searchString = &quot;This is a sample string&quot;\n$containsSubstring = $searchString.Contains(&quot;sample&quot;)\n\n# Finding the index of a specific substring within a larger string\n$findIndexString = &quot;Finding index in a string&quot;\n$index = $findIndexString.IndexOf(&quot;index&quot;)\n\n# Getting the length of a string\n$lengthOfString = &quot;Count me&quot;\n$stringLength = $lengthOfString.Length\n\n# Reversing a string\n$stringToReverse = &quot;ReverseMe&quot;\n$reversedString = [char[]]::new($stringToReverse.ToCharArray(), $stringToReverse.Length) -join &quot;&quot;\n\n# Formatting a string with placeholders for variables\n$placeholderString = &quot;This is {0} example&quot;\n$formattedString = $placeholderString -f &quot;an&quot;\n\n# Parsing and manipulating data stored in a string format (such as JSON or XML)\n$jsonString = &#x27;{ &quot;key&quot;: &quot;value&quot; }&#x27;\n$parsedJson = ConvertFrom-Json $jsonString\n\n# Generating a string representation of an object for debugging or logging\n$sampleObject = [PSCustomObject]@{\n    Name = &quot;Alice&quot;\n    Age = 30\n}\n$stringRepresentation = $sampleObject | Out-String\n\n# Validating and sanitizing user input received as strings\n$userInput = Read-Host &quot;Enter your name&quot;\n$sanitizedInput = $userInput -replace &#x27;[^\\w\\s]&#x27;\n\n# Implementing algorithms like string matching, searching, or sorting\n$haystack = &quot;Look for needle in haystack&quot;\n$needle = &quot;needle&quot;\n$needleFound = $haystack -match $needle\n\n# Output results for demonstration\nWrite-Host $concatenatedString\nWrite-Host $splitArray\nWrite-Host $modifiedString\nWrite-Host $trimmedString\nWrite-Host $upperCaseString\nWrite-Host $containsSubstring\nWrite-Host $index\nWrite-Host $stringLength\nWrite-Host $reversedString\nWrite-Host $formattedString\nWrite-Host $parsedJson\nWrite-Host $stringRepresentation\nWrite-Host $sanitizedInput\nWrite-Host $needleFound\n",
            "threading": "# Improving performance by running tasks concurrently\nStart-Job -ScriptBlock { \n    # Task to run concurrently\n}\n\n# Handling multiple tasks simultaneously without blocking the main program\n$job1 = Start-Job -ScriptBlock { \n    # Task 1 to run simultaneously\n}\n$job2 = Start-Job -ScriptBlock { \n    # Task 2 to run simultaneously\n}\n# Wait for both jobs to complete\nWait-Job $job1, $job2\n\n# Updating UI elements in response to asynchronous events\n# For updating UI in Windows Forms, you would generally use events and invoke method\n# Example: $form1.button1.Invoke($form1.button1.begininvoke($form1.button1.click))\n\n# Processing large amounts of data in the background while the main thread remains responsive\nStart-Job -ScriptBlock {\n    # Process large data here\n}\n\n# Performing network requests without freezing the application&#x27;s UI\nStart-Job -ScriptBlock {\n    # Make network request here\n}\n"
          }
        },
        "lua": {
          "name": "lua",
          "displayname": "Lua",
          "comment": "--",
          "ext": "lua",
          "css": "lua",
          "categories": "programming",
          "snippets": {
            "arrays": "-- Storing a collection of elements of the same data type\nmyArray = {1, 2, 3, 4, 5}\n\n-- Accessing individual elements via index\nprint(myArray[3])\n\n-- Iterating over elements using loops\nfor i = 1, #myArray do\n    print(myArray[i])\nend\n\n-- Sorting elements in ascending order\ntable.sort(myArray)\n\n-- Searching for a specific element within the array\nlocal searchValue = 3\nfor i = 1, #myArray do\n    if myArray[i] == searchValue then\n        print(&quot;Element found at index: &quot; .. i)\n        break\n    end\nend\n\n-- Modifying elements at specific positions\nmyArray[2] = 10\n\n-- Adding elements to the end of the array\ntable.insert(myArray, 6)\n\n-- Removing elements from the array\ntable.remove(myArray, 3)\n\n-- Merging two arrays into a single array\nsecondArray = {7, 8, 9}\nfor i = 1, #secondArray do\n    table.insert(myArray, secondArray[i])\nend\n\n-- Splitting an array into multiple smaller arrays\nsize = 3\nfor i = 1, #myArray, size do\n    local subArray = {}\n    for j = i, math.min(i + size - 1, #myArray) do\n        table.insert(subArray, myArray[j])\n    end\n    print(&quot;Split Array:&quot;)\n    for j = 1, #subArray do\n        print(subArray[j])\n    end\nend\n\n-- Finding the maximum element in the array\nlocal maxElement = math.max(table.unpack(myArray))\n\n-- Filtering elements based on a condition\nlocal filteredArray = {}\nfor i = 1, #myArray do\n    if myArray[i] &gt; 4 then\n        table.insert(filteredArray, myArray[i])\n    end\nend\n\n-- Mapping elements to a new value\nfor i = 1, #myArray do\n    myArray[i] = myArray[i] * 2\nend\n\n-- Reversing the order of elements in the array\nfor i = 1, math.floor(#myArray / 2) do\n    myArray[i], myArray[#myArray - i + 1] = myArray[#myArray - i + 1], myArray[i]\nend\n\n-- Calculating the sum of array elements\nlocal sum = 0\nfor i = 1, #myArray do\n    sum = sum + myArray[i]\nend\n\n-- Copying elements from one array to another\ncopiedArray = {}\nfor i = 1, #myArray do\n    table.insert(copiedArray, myArray[i])\nend\n\n-- Checking if an array contains a certain element\nlocal elementToCheck = 8\nlocal found = false\nfor i = 1, #myArray do\n    if myArray[i] == elementToCheck then\n        found = true\n        break\n    end\nend\n\n-- Converting an array to a string\nlocal arrayString = table.concat(myArray, &quot;, &quot;)\n\n-- Creating multi-dimensional arrays for complex data structures\nmultiArray = {\n    {1, 2, 3},\n    {4, 5, 6},\n    {7, 8, 9}\n}\n\n-- Implementing algorithms like binary search or quicksort using arrays (Binary Search example)\nlocal function binarySearch(array, element)\n    local low = 1\n    local high = #array\n    while low &lt;= high do\n        local mid = math.floor((low + high) / 2)\n        if array[mid] == element then\n            return mid\n        elseif array[mid] &lt; element then\n            low = mid + 1\n        else\n            high = mid - 1\n        end\n    end\n    return -1\nend\n\n-- Testing binary search\ntable.sort(myArray)\nlocal index = binarySearch(myArray, 6)\nif index ~= -1 then\n    print(&quot;Element found at index: &quot; .. index)\nelse\n    print(&quot;Element not found&quot;)\nend\n",
            "datetime": "[\n  &quot;-- Displaying the current date and time&quot;,\n  &quot;local currentDateTime = os.date(&#x27;%c&#x27;)&quot;,\n  \n  &quot;-- Calculating the difference between two dates&quot;,\n  &quot;local date1 = os.time({year=2022, month=4, day=1})&quot;,\n  &quot;local date2 = os.time({year=2022, month=4, day=10})&quot;,\n  &quot;local differenceInDays = math.floor((date2 - date1) / (24 * 60 * 60))&quot;,\n\n  &quot;-- Formatting dates and times for user-friendly display&quot;,\n  &quot;local formattedDate = os.date(&#x27;%A, %B %d, %Y&#x27;)&quot;,\n\n  &quot;-- Converting between different date and time formats&quot;,\n  &quot;local customFormat = os.date(&#x27;%Y-%m-%d %H:%M:%S&#x27;)&quot;,\n  \n  &quot;-- Scheduling tasks or events based on specific dates and times&quot;,\n  &quot;-- Implementing countdown timers or timers for specific events&quot;,\n  &quot;-- Handling time zones and daylight saving time adjustments&quot;,\n  &quot;-- Finding the day of week or month for a given date&quot;,\n  &quot;-- Working with timestamps for tracking when events occur&quot;\n]",
            "dictionaries": "-- Defining a dictionary with key-value pairs\nlocal dictionary = {\n  name = &quot;Alice&quot;,\n  age = 30,\n  city = &quot;New York&quot;\n}\n\n-- Implementing a cache using dictionaries\nlocal cache = {}\nfunction memoization(input)\n  if cache[input] then\n    return cache[input]\n  else\n    local result = input * input\n    cache[input] = result\n    return result\n  end\nend\n\n-- Counting occurrences of elements in a collection using dictionaries\nlocal collection = {1, 1, 2, 3, 3, 3, 4, 4, 4, 4}\nlocal counts = {}\nfor _, element in ipairs(collection) do\n  counts[element] = (counts[element] or 0) + 1\nend\n\n-- Mapping unique identifiers to objects or data\nlocal idMapping = {\n  [&quot;id123&quot;] = {name = &quot;Bob&quot;, age = 25},\n  [&quot;id456&quot;] = {name = &quot;Charlie&quot;, age = 35}\n}\n\n-- Building lookup tables for data processing\nlocal lookupTable = {\n  [&quot;key1&quot;] = &quot;value1&quot;,\n  [&quot;key2&quot;] = &quot;value2&quot;,\n  [&quot;key3&quot;] = &quot;value3&quot;\n}\n\n-- Checking for the existence of an element in a collection\nlocal checkElement = 4\nlocal exists = counts[checkElement] and true or false\n\n-- Implementing a symbol table using dictionaries\nlocal symbolTable = {\n  [&quot;sym1&quot;] = &quot;symbol1&quot;,\n  [&quot;sym2&quot;] = &quot;symbol2&quot;\n}\n\n-- Grouping and organizing data based on certain criteria\nlocal data = { \n  {name = &quot;Alice&quot;, city = &quot;New York&quot;},\n  {name = &quot;Bob&quot;, city = &quot;London&quot;}, \n  {name = &quot;Charlie&quot;, city = &quot;Paris&quot;}\n}\nlocal groupedData = {}\nfor _, person in ipairs(data) do\n  local city = person.city\n  groupedData[city] = groupedData[city] or {}\n  table.insert(groupedData[city], person)\nend\n\n-- Fast searching and accessing data in Lua tables (which can be seen as dictionaries)\nlocal fruits = {\n  apple = &quot;red&quot;,\n  banana = &quot;yellow&quot;,\n  orange = &quot;orange&quot;\n}\nlocal color = fruits[&quot;apple&quot;]\n\n-- Printing the results for demonstration\nprint(&quot;Dictionary:&quot;, dictionary)\nprint(&quot;Memoization (input 5):&quot;, memoization(5))\nprint(&quot;Counts:&quot;, counts)\nprint(&quot;ID Mapping:&quot;, idMapping)\nprint(&quot;Lookup Table:&quot;, lookupTable)\nprint(&quot;Existence of element&quot;, checkElement, &quot;:&quot;, exists)\nprint(&quot;Symbol Table:&quot;, symbolTable)\nprint(&quot;Grouped Data:&quot;, groupedData)\nprint(&quot;Color of Apple:&quot;, color)\n",
            "filesystem": "-- Reading a file in a specific format and processing its contents\nlocal file = io.open(&quot;input.txt&quot;, &quot;r&quot;)\nif file then\n   local contents = file:read(&quot;*all&quot;)\n   print(&quot;File contents:&quot;, contents)\n   file:close()\nend\n\n-- Writing data to a file or creating a new file\nlocal newFile = io.open(&quot;output.txt&quot;, &quot;w&quot;)\nnewFile:write(&quot;Hello, World!&quot;)\nnewFile:close()\n\n-- Appending data to an existing file\nlocal appendFile = io.open(&quot;output.txt&quot;, &quot;a&quot;)\nappendFile:write(&quot;\\nThis is additional content.&quot;)\nappendFile:close()\n\n-- Checking if a file or directory exists\nfunction fileOrDirExists(name)\n   return os.rename(name, name) and true or false\nend\n\n-- Listing all files and directories within a given directory\nfor file in io.popen(&#x27;ls /path/to/directory&#x27;):lines() do\n   print(file)\nend\n\n-- Deleting a file or directory\nos.remove(&quot;fileToDelete.txt&quot;)\n\n-- Moving or renaming a file or directory\nos.rename(&quot;oldName.txt&quot;, &quot;newName.txt&quot;)\n\n-- Creating a temporary file or directory\nlocal tempFile = io.open(os.tmpname(), &quot;w&quot;)\ntempFile:write(&quot;Temporary content&quot;)\ntempFile:close()\n\n-- Changing file permissions or ownership\nos.execute(&quot;chmod 777 myFile.txt&quot;)\n\n-- Searching for a specific file or directory within a directory\nfor file in io.popen(&#x27;ls /path/to/directory | grep searchFile.txt&#x27;):lines() do\n   print(&quot;Found file:&quot;, file)\nend\n",
            "regexps": "-- searching for specific patterns in text data\nlocal text = &quot;Hello, World! This is a sample text.&quot;\nlocal pattern = &quot;%w+&quot;\nfor word in text:gmatch(pattern) do\n    print(word)\nend\n\n-- validating input forms\nlocal email = &quot;example@example.com&quot;\nif string.match(email, &quot;^[%w%.]+@[%w%.]+%.[%a]+$&quot;) then\n    print(&quot;Valid email address&quot;)\nend\n\n-- data scraping\nlocal html = [[ &lt;p&gt;This is a &lt;b&gt;sample&lt;/b&gt; HTML text.&lt;/p&gt; ]]\nlocal pattern = &quot;&lt;b&gt;(.-)&lt;/b&gt;&quot;\nfor match in string.gmatch(html, pattern) do\n    print(match)\nend\n\n-- parsing and extracting information from structured data\nlocal data = &quot;name: John, age: 30, city: NYC&quot;\nfor key, value in data:gmatch(&quot;(%w+):%s*(%w+),?&quot;) do\n    print(key, value)\nend\n\n-- replacing strings that match a certain pattern\nlocal text = &quot;HeLLo WoRLd&quot;\nlocal new_text = text:gsub(&quot;%u&quot;, &quot;*&quot;)\nprint(new_text)\n\n-- tokenizing strings into smaller components\nlocal sentence = &quot;Lua programming is fun&quot;\nfor word in sentence:gmatch(&quot;%S+&quot;) do\n    print(word)\nend\n\n-- filtering and processing text\nlocal text = &quot;Lua is a powerful scripting language&quot;\nlocal filtered_text = text:gsub(&quot;powerful&quot;, &quot;awesome&quot;)\nprint(filtered_text)\n\n-- pattern matching in search algorithms\nlocal text = &quot;algorithm&quot;\nif string.match(text, &quot;rithm&quot;) then\n    print(&quot;Pattern found!&quot;)\nend\n\n-- checking for the presence of specific characters or words\nlocal text = &quot;Hello, World!&quot;\nif string.find(text, &quot;World&quot;) then\n    print(&quot;Word found!&quot;)\nend\n\n-- text manipulation and transformation\nlocal text = &quot;Lua is an awesome language&quot;\nprint(text:upper())\n\n-- input sanitization\nlocal input = &quot;user&lt;input&gt;&quot;\nlocal sanitized_input = input:gsub(&quot;&lt;.+&gt;&quot;, &quot;&quot;)\nprint(sanitized_input)\n\n-- pattern-based data extraction\nlocal data = &quot;2021-05-20&quot;\nlocal year, month, day = data:match(&quot;(%d+)-(%d+)-(%d+)&quot;)\nprint(year, month, day)\n",
            "strings": "-- Concatenating two strings together to create a longer string\nlocal str1 = &quot;Hello&quot;\nlocal str2 = &quot;World&quot;\nlocal concatStr = str1 .. &quot; &quot; .. str2\nprint(concatStr)\n\n-- Splitting a string into an array of substrings based on a delimiter\nlocal str = &quot;apple,banana,orange&quot;\nlocal substrings = {}\nfor substring in str:gmatch(&quot;[^,]+&quot;) do\n    table.insert(substrings, substring)\nend\nprint(substrings[1])\nprint(substrings[2])\nprint(substrings[3])\n\n-- Replacing a specific substring with another substring within a larger string\nlocal originalStr = &quot;I love apples&quot;\nlocal replacedStr = string.gsub(originalStr, &quot;apples&quot;, &quot;bananas&quot;)\nprint(replacedStr)\n\n-- Removing leading and trailing whitespace from a string\nlocal strWithWhitespace = &quot;    Trim whitespace    &quot;\nlocal trimmedStr = strWithWhitespace:match(&quot;^%s*(.-)%s*$&quot;)\nprint(trimmedStr)\n\n-- Converting a string to uppercase or lowercase\nlocal lowercaseStr = &quot;hello lua&quot;\nlocal uppercaseStr = string.upper(lowercaseStr)\nprint(uppercaseStr)\n\n-- Checking if a string contains a certain substring\nlocal sampleStr = &quot;The quick brown fox&quot;\nif string.find(sampleStr, &quot;brown&quot;) then\n    print(&quot;Contains &#x27;brown&#x27;&quot;)\nelse\n    print(&quot;Does not contain &#x27;brown&#x27;&quot;)\nend\n\n-- Finding the index of a specific substring within a larger string\nlocal index = string.find(&quot;Hello Lua&quot;, &quot;Lua&quot;)\nprint(index)\n\n-- Getting the length of a string\nlocal length = string.len(&quot;Hello&quot;)\nprint(length)\n\n-- Reversing a string\nlocal strToReverse = &quot;Lua Programming&quot;\nlocal reversedStr = string.reverse(strToReverse)\nprint(reversedStr)\n\n-- Formatting a string with placeholders for variables\nlocal name = &quot;Alice&quot;\nlocal age = 30\nlocal formattedStr = string.format(&quot;Name: %s, Age: %d&quot;, name, age)\nprint(formattedStr)\n\n-- Parsing and manipulating data stored in a string format (such as JSON or XML)\nlocal jsonString = &#x27;{&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 30}&#x27;\nlocal jsonData = json.decode(jsonString)\nprint(jsonData.name)\n\n-- Generating a string representation of an object for debugging or logging\nlocal tableData = {name = &quot;Bob&quot;, age = 25}\nlocal strRepresentation = table.concat(tableData, &quot;, &quot;)\nprint(strRepresentation)\n\n-- Validating and sanitizing user input received as strings\nlocal userInput = &quot;   risky input  &quot;\nlocal sanitizedInput = userInput:gsub(&quot;%s+&quot;, &quot;&quot;) -- remove whitespace\nprint(sanitizedInput)\n\n-- Implementing algorithms like string matching, searching, or sorting\nlocal pattern = &quot;banana&quot;\nlocal matchStr = &quot;I love bananas&quot;\nif string.match(matchStr, pattern) then\n    print(&quot;Found match&quot;)\nelse\n    print(&quot;No match found&quot;)\nend\n",
            "threading": "-- Lua code demonstrating threading and asynchronous execution\n\n-- Improving performance by running tasks concurrently\nfunction runConcurrently()\n    local function task1()\n        print(&quot;Task 1 started&quot;)\n        for i = 1, 3 do\n            print(&quot;Task 1 running &quot; .. i)\n            os.execute(&quot;sleep 1&quot;)  -- Simulate work\n        end\n        print(&quot;Task 1 completed&quot;)\n    end\n\n    local function task2()\n        print(&quot;Task 2 started&quot;)\n        for j = 1, 3 do\n            print(&quot;Task 2 running &quot; .. j)\n            os.execute(&quot;sleep 1&quot;)  -- Simulate work\n        end\n        print(&quot;Task 2 completed&quot;)\n    end\n\n    -- Launch tasks concurrently\n    local thread1 = coroutine.create(task1)\n    local thread2 = coroutine.create(task2)\n\n    coroutine.resume(thread1)  -- Start task 1\n    coroutine.resume(thread2)  -- Start task 2\nend\n\n-- Handling multiple tasks simultaneously without blocking the main program\nfunction handleTasksSimultaneously()\n    print(&quot;Main program started&quot;)\n\n    local function asyncTask()\n        print(&quot;Async task started&quot;)\n        for k = 1, 3 do\n            print(&quot;Async task running &quot; .. k)\n            os.execute(&quot;sleep 1&quot;)  -- Simulate work\n        end\n        print(&quot;Async task completed&quot;)\n    end\n\n    -- Launch async task in a coroutine\n    local thread = coroutine.create(asyncTask)\n    coroutine.resume(thread)\n\n    print(&quot;Main program continued&quot;)\nend\n\n-- Updating UI elements in response to asynchronous events\nfunction updateUIAsync()\n    function updateUITask()\n        print(&quot;Updating UI task started&quot;)\n        -- Update UI elements based on asynchronous events\n        print(&quot;UI elements updated&quot;)\n        print(&quot;Updating UI task completed&quot;)\n    end\n\n    -- Launch UI update task\n    local thread = coroutine.create(updateUITask)\n    coroutine.resume(thread)\nend\n\n-- Processing large amounts of data in the background while keeping UI responsive\nfunction processLargeDataInBG()\n    local data = {&quot;data1&quot;, &quot;data2&quot;, &quot;data3&quot;}\n\n    local function processData()\n        print(&quot;Processing data started&quot;)\n        -- Process the data in the background\n        for i, d in ipairs(data) do\n            print(&quot;Processing data: &quot; .. d)\n            os.execute(&quot;sleep 1&quot;)  -- Simulate work\n        end\n        print(&quot;Processing data completed&quot;)\n    end\n\n    -- Launch data processing task\n    local thread = coroutine.create(processData)\n    coroutine.resume(thread)\nend\n\n-- Performing network requests without freezing the application&#x27;s user interface\nfunction performNetworkRequest()\n    function networkRequest()\n        print(&quot;Network request started&quot;)\n        -- Perform network request operations\n        print(&quot;Network request completed&quot;)\n    end\n\n    -- Launch network request in a coroutine\n    local thread = coroutine.create(networkRequest)\n    coroutine.resume(thread)\nend\n\n-- Run the examples\nrunConcurrently()\nhandleTasksSimultaneously()\nupdateUIAsync()\nprocessLargeDataInBG()\nperformNetworkRequest()\n"
          }
        },
        "js": {
          "name": "js",
          "displayname": "JavaScript",
          "comment": "#|//",
          "ext": "js",
          "css": "javascript",
          "categories": "programming",
          "snippets": {
            "arrays": "// Creating an array to store elements of the same data type\nconst numbers = [1, 2, 3, 4, 5];\n\n// Accessing elements via index\nconst secondElement = numbers[1];\n\n// Iterating over elements using loops\nfor (let i = 0; i &lt; numbers.length; i++) {\n  console.log(numbers[i]);\n}\n\n// Sorting elements in ascending order\nnumbers.sort((a, b) =&gt; a - b);\n\n// Searching for a specific element (e.g., 3) within the array\nconst index = numbers.indexOf(3);\n\n// Modifying element at a specific position (e.g., changing 2 to 8)\nnumbers[1] = 8;\n\n// Adding elements to the end of the array\nnumbers.push(6);\n\n// Removing elements from the array (e.g., removing the first element)\nnumbers.shift();\n\n// Merging two arrays into a single array\nconst newNumbers = numbers.concat([7, 9]);\n\n// Splitting an array into smaller arrays\nconst smallerArrays = [];\nwhile (numbers.length) {\n  smallerArrays.push(numbers.splice(0, 2));\n}\n\n// Finding the maximum element in the array\nconst max = Math.max(...numbers);\n\n// Filtering elements based on a condition (e.g., even numbers)\nconst filteredNumbers = numbers.filter(num =&gt; num % 2 === 0);\n\n// Mapping elements to a new value (e.g., doubling each element)\nconst doubledNumbers = numbers.map(num =&gt; num * 2);\n\n// Reversing the order of elements in the array\nconst reversedNumbers = numbers.reverse();\n\n// Calculating the sum of array elements\nconst sum = numbers.reduce((acc, curr) =&gt; acc + curr, 0);\n\n// Copying elements from one array to another\nconst copiedNumbers = [...numbers];\n\n// Checking if an array contains a certain element (e.g., if 5 is present)\nconst containsFive = numbers.includes(5);\n\n// Converting an array to a string\nconst numbersString = numbers.join(&#x27;,&#x27;);\n\n// Converting a string back to an array\nconst newNumbersArr = numbersString.split(&#x27;,&#x27;);\n\n// Creating multi-dimensional arrays\nconst multiArray = [[1, 2], [3, 4]];\n\n// Implementing algorithms like binary search or quicksort\nfunction binarySearch(arr, target) {\n  let low = 0;\n  let high = arr.length - 1;\n\n  while (low &lt;= high) {\n    let mid = Math.floor((low + high) / 2);\n\n    if (arr[mid] === target) return mid;\n    if (arr[mid] &lt; target) low = mid + 1;\n    else high = mid - 1;\n  }\n\n  return -1; // element not found\n}\n",
            "datetime": "// Displaying the current date and time\nconst currentDate = new Date();\nconsole.log(&quot;Current Date and Time: &quot; + currentDate);\n\n// Calculating the difference between two dates\nconst date1 = new Date(&quot;2022-12-31&quot;);\nconst date2 = new Date(&quot;2022-01-01&quot;);\nconst differenceInDays = Math.abs(date2 - date1) / (1000 * 60 * 60 * 24);\nconsole.log(&quot;Difference between dates: &quot; + differenceInDays + &quot; days&quot;);\n\n// Formatting dates and times for user-friendly display\nconst formattedDate = currentDate.toLocaleString(&#x27;en-US&#x27;, { weekday: &#x27;long&#x27;, year: &#x27;numeric&#x27;, month: &#x27;long&#x27;, day: &#x27;numeric&#x27;, hour: &#x27;numeric&#x27;, minute: &#x27;numeric&#x27;, second: &#x27;numeric&#x27; });\nconsole.log(&quot;Formatted Date: &quot; + formattedDate);\n\n// Converting between different date and time formats\nconst isoDateString = currentDate.toISOString();\nconsole.log(&quot;ISO Date Format: &quot; + isoDateString);\n\n// Scheduling tasks or events based on specific dates and times\nconst eventDate = new Date(&quot;2023-10-15 09:00:00&quot;);\nconst currentTime = new Date();\nif (eventDate &gt; currentTime) {\n  console.log(&quot;Event scheduled for: &quot; + eventDate);\n}\n\n// Implementing countdown timers or timers for specific events\nconst countdownDate = new Date(&quot;2023-12-31&quot;);\nconst timeLeft = countdownDate - currentDate;\nconsole.log(&quot;Time left until countdown date: &quot; + (timeLeft / (1000 * 60 * 60 * 24)) + &quot; days&quot;);\n\n// Handling time zones and daylight saving time adjustments\nconst timeInNewYork = new Date().toLocaleString(&quot;en-US&quot;, { timeZone: &quot;America/New_York&quot; });\nconsole.log(&quot;Current Time in New York: &quot; + timeInNewYork);\n\n// Finding the day of week or month for a given date\nconst dayOfWeek = currentDate.toLocaleDateString(&#x27;en-US&#x27;, { weekday: &#x27;long&#x27; });\nconsole.log(&quot;Day of the Week: &quot; + dayOfWeek);\n\n// Working with timestamps for tracking when events occur\nconst eventTimestamp = eventDate.getTime();\nconsole.log(&quot;Event Timestamp: &quot; + eventTimestamp);\n",
            "dictionaries": "// Storing key-value pairs for quick retrieval\nlet dictionary = {\n    key1: &quot;value1&quot;,\n    key2: &quot;value2&quot;,\n    key3: &quot;value3&quot;\n};\n\n// Implementing a cache or memoization system\nlet cache = new Map();\n\nfunction memoize(func) {\n    return function(...args) {\n        const key = args.join(&quot;-&quot;);\n        if (cache.has(key)) {\n            return cache.get(key);\n        }\n        const result = func(...args);\n        cache.set(key, result);\n        return result;\n    }\n}\n\n// Counting occurrences of elements in a collection\nlet elements = [1, 2, 3, 1, 2, 3, 1, 2, 3];\nlet occurrences = {};\n\nelements.forEach(element =&gt; {\n    occurrences[element] = (occurrences[element] || 0) + 1;\n});\n\n// Mapping unique identifiers to objects or data\nlet idMap = new Map();\n\nlet obj1 = {name: &quot;John&quot;};\nlet obj2 = {name: &quot;Jane&quot;};\n\nidMap.set(&quot;id1&quot;, obj1);\nidMap.set(&quot;id2&quot;, obj2);\n\n// Building efficient lookup tables for data processing\nlet lookupTable = new Map();\n\n// Checking for the existence of an element in a collection\nlet collection = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];\n\nif (collection.includes(&quot;b&quot;)) {\n    console.log(&quot;Element exists in collection&quot;);\n}\n\n// Implementing a data structure like a symbol table or associative array\nlet symbolTable = new Map();\n\n// Grouping and organizing data based on certain criteria\nlet data = [{category: &quot;A&quot;, value: 1}, {category: &quot;B&quot;, value: 2}, {category: &quot;A&quot;, value: 3}];\n\nlet groupedData = {};\n\ndata.forEach(item =&gt; {\n    if (!groupedData[item.category]) {\n        groupedData[item.category] = [];\n    }\n    groupedData[item.category].push(item);\n});\n\n// Providing a fast method for searching and accessing data\nlet fastLookup = new Map();\n\nfastLookup.set(&quot;key1&quot;, &quot;value1&quot;);\nfastLookup.set(&quot;key2&quot;, &quot;value2&quot;);\n\nconsole.log(fastLookup.get(&quot;key1&quot;));\n",
            "filesystem": "// Importing the file system module\nconst fs = require(&#x27;fs&#x27;);\n\n// Reading a file\nfs.readFile(&#x27;example.txt&#x27;, &#x27;utf8&#x27;, (err, data) =&gt; {\n    if (err) {\n        console.error(err);\n        return;\n    }\n    console.log(data);\n});\n\n// Writing data to a file\nfs.writeFile(&#x27;newFile.txt&#x27;, &#x27;Hello, World!&#x27;, (err) =&gt; {\n    if (err) {\n        console.error(err);\n        return;\n    }\n    console.log(&#x27;File was written successfully!&#x27;);\n});\n\n// Appending data to a file\nfs.appendFile(&#x27;existingFile.txt&#x27;, &#x27;Additional content&#x27;, (err) =&gt; {\n    if (err) {\n        console.error(err);\n        return;\n    }\n    console.log(&#x27;Data was appended to the file!&#x27;);\n});\n\n// Checking if a file or directory exists\nfs.access(&#x27;example.txt&#x27;, fs.constants.F_OK, (err) =&gt; {\n    if (err) {\n        console.error(&#x27;File does not exist&#x27;);\n    } else {\n        console.log(&#x27;File exists&#x27;);\n    }\n});\n\n// Listing all files and directories within a given directory\nfs.readdir(&#x27;./&#x27;, (err, files) =&gt; {\n    if (err) {\n        console.error(err);\n        return;\n    }\n    console.log(files);\n});\n\n// Deleting a file\nfs.unlink(&#x27;fileToDelete.txt&#x27;, (err) =&gt; {\n    if (err) {\n        console.error(err);\n        return;\n    }\n    console.log(&#x27;File was deleted successfully!&#x27;);\n});\n\n// Moving or renaming a file\nfs.rename(&#x27;oldFile.txt&#x27;, &#x27;newFile.txt&#x27;, (err) =&gt; {\n    if (err) {\n        console.error(err);\n        return;\n    }\n    console.log(&#x27;File was renamed successfully!&#x27;);\n});\n\n// Creating a temporary file\nfs.mkdtemp(&#x27;temp-&#x27;, (err, folder) =&gt; {\n    if (err) {\n        console.error(err);\n        return;\n    }\n    console.log(&#x27;Temporary directory created:&#x27;, folder);\n});\n\n// Changing file permissions\nfs.chmod(&#x27;example.txt&#x27;, 0o775, (err) =&gt; {\n    if (err) {\n        console.error(err);\n        return;\n    }\n    console.log(&#x27;File permissions changed successfully&#x27;);\n});\n\n// Searching for a specific file within a directory\nconst directoryPath = &#x27;./&#x27;;\nconst searchFile = &#x27;example.txt&#x27;;\n\nfs.readdir(directoryPath, (err, files) =&gt; {\n    if (err) {\n        console.error(err);\n        return;\n    }\n\n    if (files.includes(searchFile)) {\n        console.log(`${searchFile} found in the directory`);\n    } else {\n        console.log(`${searchFile} not found in the directory`);\n    }\n});\n",
            "regexps": "// Importing the core module for regular expressions\nconst fs = require(&#x27;fs&#x27;);\n\n// Text data for demonstration\nconst textData = &quot;Hello, my email is test@example.com and my phone number is 123-456-7890. Please contact me.&quot;;\n\n// Searching for specific patterns in text data\nconst emailRegex = /[\\w-]+@([\\w-]+\\.)+[\\w-]+/;\nconst emailMatch = textData.match(emailRegex);\nconsole.log(emailMatch);\n\n// Validating input forms (such as emails, phone numbers, etc.)\nconst phoneRegex = /\\d{3}-\\d{3}-\\d{4}/;\nconst phoneValidation = phoneRegex.test(textData);\nconsole.log(phoneValidation);\n\n// Data scraping\n// Assuming scraping logic for extracting specific data\n\n// Parsing and extracting information from structured data\nconst phoneDetails = textData.match(/\\d{3}-\\d{3}-\\d{4}/);\nconsole.log(phoneDetails[0]);\n\n// Replacing strings that match a certain pattern with another string\nconst replacedText = textData.replace(/contact/g, &quot;reach out to&quot;);\nconsole.log(replacedText);\n\n// Tokenizing strings into smaller components\nconst tokens = textData.split(/\\W+/);\nconsole.log(tokens);\n\n// Filtering and processing text\nconst filteredData = textData.replace(/is/g, &quot;&quot;);\nconsole.log(filteredData);\n\n// Pattern matching in search algorithms\n// Assuming an algorithm using regular expressions for pattern matching\n\n// Checking for the presence of specific characters or words\nconst specificWord = /phone/;\nconsole.log(specificWord.test(textData));\n\n// Text manipulation and transformation\nconst transformedText = textData.toUpperCase();\nconsole.log(transformedText);\n\n// Input sanitization\nconst sanitizedData = textData.replace(/[^\\w\\s]/gi, &#x27;&#x27;);\nconsole.log(sanitizedData);\n\n// Pattern-based data extraction\n// Assuming pattern extraction logic based on regular expressions\n\n// Syntax highlighting in text editors or IDEs\n// Assuming implementation for highlighting syntax with regular expressions\n\n// Data validation in form submission\nconst formValidation = emailRegex.test(&quot;invalid-email&quot;);\nconsole.log(formValidation);\n\n// Extracting data from log files or other text-based records\n// Assuming data extraction logic from log files using regular expressions\n\n// Pattern matching in natural language processing tasks\n// Assuming NLP tasks that involve regular expressions pattern matching\n\n// Data cleaning and preprocessing\nconst cleanedData = textData.replace(/[\\-\\d]/g, &quot;&quot;);\nconsole.log(cleanedData);\n\n// Automating repetitive text processing tasks\n// Assume automation script incorporating regular expressions\n\n// Generating reports or summaries based on text patterns\n// Assume report generation logic based on text patterns\n\n// Customizing search functionality in web applications\n// Assume search customization logic using regular expressions\n\n// Validating and formatting user input\nconst formattedInput = &quot;123 456 7890&quot;.replace(/(\\d{3}) (\\d{3}) (\\d{4})/, &#x27;$1-$2-$3&#x27;);\nconsole.log(formattedInput);\n\n// Parsing URLs and query parameters\nconst url = &quot;https://www.example.com/search?q=keyword&quot;;\nconst queryParam = url.match(/q=([^&amp;]+)/)[1];\nconsole.log(queryParam);\n\n// Implementing text-based search functionality\n// Assume text-based search logic using regular expressions\n```\n",
            "strings": "// Concatenating two strings together\nconst string1 = &quot;Hello&quot;;\nconst string2 = &quot;World&quot;;\nconst concatenatedString = string1 + &quot; &quot; + string2;\nconsole.log(concatenatedString);\n\n// Splitting a string into an array of substrings\nconst sentence = &quot;The quick brown fox&quot;;\nconst words = sentence.split(&quot; &quot;);\nconsole.log(words);\n\n// Replacing a specific substring within a larger string\nconst originalString = &quot;I like apples&quot;;\nconst replacedString = originalString.replace(&quot;apples&quot;, &quot;oranges&quot;);\nconsole.log(replacedString);\n\n// Removing leading and trailing whitespace from a string\nconst stringWithSpaces = &quot;   Trim this sentence   &quot;;\nconst trimmedString = stringWithSpaces.trim();\nconsole.log(trimmedString);\n\n// Converting a string to uppercase or lowercase\nconst lowercaseString = &quot;lowercase&quot;;\nconst uppercaseString = lowercaseString.toUpperCase();\nconsole.log(uppercaseString);\n\n// Checking if a string contains a certain substring\nconst paragraph = &quot;The quick brown fox jumps over the lazy dog&quot;;\nconst containsSubstring = paragraph.includes(&quot;fox&quot;);\nconsole.log(containsSubstring);\n\n// Finding the index of a specific substring within a larger string\nconst index = paragraph.indexOf(&quot;brown&quot;);\nconsole.log(index);\n\n// Getting the length of a string\nconst str = &quot;Hello, World!&quot;;\nconst length = str.length;\nconsole.log(length);\n\n// Reversing a string\nconst originalWord = &quot;hello&quot;;\nconst reversedWord = originalWord.split(&quot;&quot;).reverse().join(&quot;&quot;);\nconsole.log(reversedWord);\n\n// Formatting a string with placeholders for variables\nconst name = &quot;Alice&quot;;\nconst age = 30;\nconst formattedMessage = `Hello, my name is ${name} and I am ${age} years old`;\nconsole.log(formattedMessage);\n\n// Parsing and manipulating data stored in a string format\nconst jsonString = &#x27;{&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 25}&#x27;;\nconst parsedObject = JSON.parse(jsonString);\nconsole.log(parsedObject.name);\n\n// Generating a string representation of an object for debugging or logging\nconst obj = { name: &quot;Tom&quot;, age: 40, city: &quot;New York&quot; };\nconst stringifiedObj = JSON.stringify(obj);\nconsole.log(stringifiedObj);\n\n// Validating and sanitizing user input received as strings\nconst userInput = &quot; &lt;script&gt;alert(&#x27;XSS&#x27;);&lt;/script&gt; &quot;;\nconst sanitizedInput = userInput.replace(/(&lt;([^&gt;]+)&gt;)/gi, &quot;&quot;);\nconsole.log(sanitizedInput);\n\n// Implementing algorithms like string matching, searching, or sorting\nconst inputStrings = [&quot;banana&quot;, &quot;apple&quot;, &quot;orange&quot;];\nconst sortedStrings = inputStrings.sort();\nconsole.log(sortedStrings);\n",
            "threading": "// Improving performance by running tasks concurrently\nfunction task1() {\n  console.log(&quot;Task 1 started&quot;);\n  setTimeout(() =&gt; {\n    console.log(&quot;Task 1 completed&quot;);\n  }, 2000);\n}\n\nfunction task2() {\n  console.log(&quot;Task 2 started&quot;);\n  setTimeout(() =&gt; {\n    console.log(&quot;Task 2 completed&quot;);\n  }, 1500);\n}\n\n// Handling multiple tasks simultaneously without blocking the main program\ntask1();\ntask2();\n\n// Updating UI elements in response to asynchronous events\nfunction updateUI() {\n  console.log(&quot;Updating UI...&quot;);\n}\n\nsetTimeout(updateUI, 1000);\n\n// Processing large amounts of data in the background while the main thread remains responsive\nconst largeData = Array.from({ length: 1000000 }, (_, index) =&gt; index);\n\nfunction processData(data) {\n  console.log(&quot;Processing data...&quot;);\n  // Perform data processing\n}\n\nsetTimeout(() =&gt; {\n  processData(largeData);\n}, 3000);\n\n// Performing network requests without freezing the application&#x27;s user interface\nfunction fetchData() {\n  console.log(&quot;Fetching data...&quot;);\n  // Make an async network request\n  // For example using fetch API or Axios library\n}\n\nsetTimeout(fetchData, 5000);\n"
          }
        },
        "go": {
          "name": "go",
          "displayname": "Go (GoLang)",
          "comment": "#|//",
          "ext": "go",
          "css": "golang",
          "categories": "programming",
          "snippets": {
            "arrays": "package main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;sort&quot;\n)\n\nfunc main() {\n\t// Storing a collection of elements of the same data type\n\tnumbers := []int{1, 2, 3, 4, 5}\n\n\t// Accessing individual elements via index\n\tfmt.Println(numbers[0])\n\n\t// Iterating over elements using loops\n\tfor i := 0; i &lt; len(numbers); i++ {\n\t\tfmt.Println(numbers[i])\n\t}\n\n\t// Sorting elements in ascending order\n\tsort.Ints(numbers)\n\tfmt.Println(numbers)\n\n\t// Searching for a specific element within the array\n\tsearchElement := 3\n\tfor i := 0; i &lt; len(numbers); i++ {\n\t\tif numbers[i] == searchElement {\n\t\t\tfmt.Printf(&quot;%d found at index %d\\n&quot;, searchElement, i)\n\t\t\tbreak\n\t\t}\n\t}\n\n\t// Modifying elements at specific positions\n\tnumbers[2] = 10\n\tfmt.Println(numbers)\n\n\t// Adding elements to the end of the array\n\tnumbers = append(numbers, 6)\n\tfmt.Println(numbers)\n\n\t// Removing elements from the array\n\tindexToRemove := 1\n\tnumbers = append(numbers[:indexToRemove], numbers[indexToRemove+1:]...)\n\tfmt.Println(numbers)\n\n\t// Merging two arrays into a single array\n\totherNumbers := []int{7, 8, 9}\n\tnumbers = append(numbers, otherNumbers...)\n\tfmt.Println(numbers)\n\n\t// Splitting an array into multiple smaller arrays\n\tchunkSize := 2\n\tfor i := 0; i &lt; len(numbers); i += chunkSize {\n\t\tfmt.Println(numbers[i : i+chunkSize])\n\t}\n\n\t// Finding the maximum element in the array\n\tmax := numbers[0]\n\tfor _, num := range numbers {\n\t\tif num &gt; max {\n\t\t\tmax = num\n\t\t}\n\t}\n\tfmt.Println(&quot;Max element:&quot;, max)\n\n\t// Filtering elements based on a condition\n\tfilteredNumbers := []int{}\n\tfor _, num := range numbers {\n\t\tif num%2 == 0 {\n\t\t\tfilteredNumbers = append(filteredNumbers, num)\n\t\t}\n\t}\n\tfmt.Println(&quot;Filtered numbers:&quot;, filteredNumbers)\n\n\t// Mapping elements to a new value\n\tfor i, num := range numbers {\n\t\tnumbers[i] = num * 2\n\t}\n\tfmt.Println(numbers)\n\n\t// Reversing the order of elements in the array\n\treversedNumbers := []int{}\n\tfor i := len(numbers) - 1; i &gt;= 0; i-- {\n\t\treversedNumbers = append(reversedNumbers, numbers[i])\n\t}\n\tfmt.Println(&quot;Reversed numbers:&quot;, reversedNumbers)\n\n\t// Calculating the sum of array elements\n\tsum := 0\n\tfor _, num := range numbers {\n\t\tsum += num\n\t}\n\tfmt.Println(&quot;Sum:&quot;, sum)\n\n\t// Copying elements from one array to another\n\tcopiedNumbers := make([]int, len(numbers))\n\tcopy(copiedNumbers, numbers)\n\tfmt.Println(&quot;Copied numbers:&quot;, copiedNumbers)\n\n\t// Checking if an array contains a certain element\n\telementToCheck := 4\n\tfound := false\n\tfor _, num := range numbers {\n\t\tif num == elementToCheck {\n\t\t\tfound = true\n\t\t\tbreak\n\t\t}\n\t}\n\tfmt.Println(&quot;Element found:&quot;, found)\n\n\t// Converting an array to a string\n\tstr := fmt.Sprint(numbers)\n\tfmt.Println(&quot;Array as string:&quot;, str)\n}\n",
            "datetime": "package main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;time&quot;\n)\n\nfunc main() {\n\t// Displaying the current date and time\n\tcurrentTime := time.Now()\n\tfmt.Println(&quot;Current date and time:&quot;, currentTime)\n\n\t// Calculating the difference between two dates\n\tdate1, _ := time.Parse(&quot;2006-01-02&quot;, &quot;2022-01-01&quot;)\n\tdate2, _ := time.Parse(&quot;2006-01-02&quot;, &quot;2022-06-01&quot;)\n\tdifference := date2.Sub(date1)\n\tfmt.Println(&quot;Difference between two dates:&quot;, difference)\n\n\t// Formatting dates and times for user-friendly display\n\tformattedTime := currentTime.Format(&quot;Monday, Jan 2, 2006 15:04:05&quot;)\n\tfmt.Println(&quot;Formatted time:&quot;, formattedTime)\n\n\t// Converting between different date and time formats\n\tparsedTime, _ := time.Parse(&quot;01/02/2006&quot;, &quot;12/25/2022&quot;)\n\tfmt.Println(&quot;Parsed time in another format:&quot;, parsedTime)\n\n\t// Scheduling tasks or events based on specific dates and times\n\tdeadline := time.Date(2023, time.January, 1, 0, 0, 0, 0, time.UTC)\n\tfmt.Println(&quot;Task deadline:&quot;, deadline)\n\n\t// Implementing countdown timers or timers for specific events\n\teventTime := time.Date(2022, time.December, 25, 0, 0, 0, 0, time.UTC)\n\tdurationUntilEvent := eventTime.Sub(currentTime)\n\tfmt.Println(&quot;Time until event:&quot;, durationUntilEvent)\n\n\t// Handling time zones and daylight saving time adjustments\n\tlocation, _ := time.LoadLocation(&quot;America/New_York&quot;)\n\tnewYorkTime := currentTime.In(location)\n\tfmt.Println(&quot;Current time in New York:&quot;, newYorkTime)\n\n\t// Finding the day of week or month for a given date\n\tdayOfWeek := date1.Weekday()\n\tmonth := date1.Month()\n\tfmt.Println(&quot;Day of week for date1:&quot;, dayOfWeek)\n\tfmt.Println(&quot;Month of date1:&quot;, month)\n\n\t// Working with timestamps for tracking when events occur\n\teventTimestamp := eventTime.Unix()\n\tfmt.Println(&quot;Timestamp for eventTime:&quot;, eventTimestamp)\n}\n",
            "dictionaries": "package main\n\nimport (\n\t&quot;fmt&quot;\n)\n\nfunc main() {\n\t// Storing key-value pairs for quick retrieval\n\tdictionary := map[string]int{\n\t\t&quot;apple&quot;:  5,\n\t\t&quot;banana&quot;: 3,\n\t\t&quot;cherry&quot;: 7,\n\t}\n\tfmt.Println(dictionary[&quot;apple&quot;])\n\n\t// Implementing a cache or memoization system\n\tcache := make(map[int]int)\n\tfibonacci := func(n int) int {\n\t\tif result, ok := cache[n]; ok {\n\t\t\treturn result\n\t\t}\n\t\tif n &lt;= 1 {\n\t\t\treturn n\n\t\t}\n\t\tresult := fibonacci(n-1) + fibonacci(n-2)\n\t\tcache[n] = result\n\t\treturn result\n\t}\n\tfmt.Println(fibonacci(5))\n\n\t// Counting occurrences of elements in a collection\n\telements := []string{&quot;a&quot;, &quot;b&quot;, &quot;a&quot;, &quot;c&quot;, &quot;b&quot;, &quot;a&quot;}\n\tcounts := make(map[string]int)\n\tfor _, element := range elements {\n\t\tcounts[element]++\n\t}\n\tfmt.Println(counts[&quot;a&quot;])\n\n\t// Mapping unique identifiers to objects or data\n\tidentifierMap := map[int]string{\n\t\t1: &quot;Alice&quot;,\n\t\t2: &quot;Bob&quot;,\n\t\t3: &quot;Charlie&quot;,\n\t}\n\tfmt.Println(identifierMap[2])\n\n\t// Building efficient lookup tables for data processing\n\tlookupTable := map[string]int{\n\t\t&quot;red&quot;:    1,\n\t\t&quot;green&quot;:  2,\n\t\t&quot;blue&quot;:   3,\n\t\t&quot;yellow&quot;: 4,\n\t}\n\tfmt.Println(lookupTable[&quot;blue&quot;])\n\n\t// Checking for the existence of an element in a collection\n\tcheckMap := map[string]bool{\n\t\t&quot;cat&quot;:  true,\n\t\t&quot;dog&quot;:  true,\n\t\t&quot;bird&quot;: true,\n\t}\n\t_, exists := checkMap[&quot;dog&quot;]\n\tfmt.Println(exists)\n\n\t// Implementing a data structure like a symbol table or associative array\n\tsymbolTable := map[string]string{\n\t\t&quot;a&quot;: &quot;alpha&quot;,\n\t\t&quot;b&quot;: &quot;beta&quot;,\n\t\t&quot;c&quot;: &quot;gamma&quot;,\n\t}\n\tfmt.Println(symbolTable[&quot;b&quot;])\n\n\t// Grouping and organizing data based on certain criteria\n\tdata := []string{&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;apricot&quot;, &quot;blueberry&quot;}\n\tgroups := make(map[rune][]string)\n\tfor _, word := range data {\n\t\tgroups[rune(word[0])] = append(groups[rune(word[0])], word)\n\t}\n\tfmt.Println(groups[&#x27;a&#x27;])\n\n\t// Providing a fast method for searching and accessing data\n\tsearchTable := map[int]string{\n\t\t1: &quot;house&quot;,\n\t\t2: &quot;car&quot;,\n\t\t3: &quot;bike&quot;,\n\t}\n\tfmt.Println(searchTable[3])\n}\n",
            "filesystem": "package main\n\nimport (\n    &quot;fmt&quot;\n    &quot;os&quot;\n    &quot;io/ioutil&quot;\n)\n\nfunc main() {\n    // Reading a file in a specific format and processing its contents\n    fileContents, err := ioutil.ReadFile(&quot;example.txt&quot;)\n    if err != nil {\n        fmt.Println(&quot;Error reading file:&quot;, err)\n    } else {\n        fmt.Println(string(fileContents))\n    }\n\n    // Writing data to a file or creating a new file\n    data := []byte(&quot;Hello, World!&quot;)\n    err = ioutil.WriteFile(&quot;newfile.txt&quot;, data, 0644)\n    if err != nil {\n        fmt.Println(&quot;Error writing to file:&quot;, err)\n    }\n\n    // Appending data to an existing file\n    file, err := os.OpenFile(&quot;existingfile.txt&quot;, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)\n    if err != nil {\n        fmt.Println(&quot;Error appending to file:&quot;, err)\n    }\n    defer file.Close()\n    file.Write([]byte(&quot; Appending data&quot;))\n\n    // Checking if a file exists\n    if _, err := os.Stat(&quot;example.txt&quot;); err == nil {\n        fmt.Println(&quot;File exists&quot;)\n    } else {\n        fmt.Println(&quot;File does not exist&quot;)\n    }\n\n    // Listing all files and directories within a given directory\n    files, err := ioutil.ReadDir(&quot;directory/path&quot;)\n    if err != nil {\n        fmt.Println(&quot;Error listing directory:&quot;, err)\n    }\n    for _, file := range files {\n        fmt.Println(file.Name())\n    }\n\n    // Deleting a file or directory\n    err = os.Remove(&quot;filetodelete.txt&quot;)\n    if err != nil {\n        fmt.Println(&quot;Error deleting file:&quot;, err)\n    }\n\n    // Moving or renaming a file or directory\n    err = os.Rename(&quot;oldfile.txt&quot;, &quot;newfile.txt&quot;)\n    if err != nil {\n        fmt.Println(&quot;Error renaming file:&quot;, err)\n    }\n\n    // Creating a temporary file or directory\n    tempFile, err := ioutil.TempFile(&quot;&quot;, &quot;temp&quot;)\n    if err != nil {\n        fmt.Println(&quot;Error creating temp file:&quot;, err)\n    }\n    defer os.Remove(tempFile.Name())\n    fmt.Println(&quot;Temporary file created at:&quot;, tempFile.Name())\n\n    // Changing file permissions\n    err = os.Chmod(&quot;file.txt&quot;, 0777)\n    if err != nil {\n        fmt.Println(&quot;Error changing file permissions:&quot;, err)\n    }\n\n    // Searching for a specific file or directory within a directory\n    files, err = ioutil.ReadDir(&quot;directory/path&quot;)\n    if err != nil {\n        fmt.Println(&quot;Error listing directory:&quot;, err)\n    }\n    for _, file := range files {\n        if file.Name() == &quot;specificfile.txt&quot; {\n            fmt.Println(&quot;File found:&quot;, file.Name())\n            break\n        }\n    }\n}\n",
            "regexps": "package main\n\nimport (\n    &quot;fmt&quot;\n    &quot;regexp&quot;\n)\n\nfunc main() {\n    // Searching for specific patterns in text data\n    text := &quot;The quick brown fox jumps over the lazy dog.&quot;\n    pattern := regexp.MustCompile(&quot;quick&quot;)\n    if pattern.MatchString(text) {\n        fmt.Println(&quot;Pattern found in text.&quot;)\n    }\n\n    // Validating input forms (such as emails, phone numbers, etc.)\n    email := &quot;user@example.com&quot;\n    emailPattern := regexp.MustCompile(`^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$`)\n    if emailPattern.MatchString(email) {\n        fmt.Println(&quot;Email is valid.&quot;)\n    }\n\n    // Data scraping\n    htmlData := &quot;&lt;h1&gt;Hello, World!&lt;/h1&gt;&quot;\n    tagPattern := regexp.MustCompile(&quot;&lt;.*?&gt;&quot;)\n    cleanedData := tagPattern.ReplaceAllString(htmlData, &quot;&quot;)\n    fmt.Println(&quot;Cleaned data:&quot;, cleanedData)\n\n    // Parsing and extracting information from structured data\n    inputData := &quot;Name: John, Age: 25, Gender: Male&quot;\n    infoPattern := regexp.MustCompile(&quot;Name: (.*), Age: (.*), Gender: (.*)&quot;)\n    result := infoPattern.FindStringSubmatch(inputData)\n    fmt.Println(&quot;Extracted information:&quot;)\n    for i, v := range result {\n        fmt.Printf(&quot;Group %d: %s\\n&quot;, i, v)\n    }\n\n    // Replacing strings that match a certain pattern with another string\n    sentence := &quot;The cat sat on the mat.&quot;\n    replacePattern := regexp.MustCompile(&quot;cat|mat&quot;)\n    replacedSentence := replacePattern.ReplaceAllString(sentence, &quot;dog&quot;)\n    fmt.Println(&quot;Replaced sentence:&quot;, replacedSentence)\n\n    // Tokenizing strings into smaller components\n    textToTokenize := &quot;Hello, World!&quot;\n    tokenizer := regexp.MustCompile(`\\b\\w+\\b`)\n    tokens := tokenizer.FindAllString(textToTokenize, -1)\n    fmt.Println(&quot;Tokens:&quot;, tokens)\n\n    // More code snippets can be added for other use cases\n}\n",
            "strings": "package main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;strings&quot;\n)\n\n// Concatenating two strings together to create a longer string\nfunc concatenateStrings(str1, str2 string) string {\n\treturn str1 + str2\n}\n\n// Splitting a string into an array of substrings based on a delimiter\nfunc splitString(str, delimiter string) []string {\n\treturn strings.Split(str, delimiter)\n}\n\n// Replacing a specific substring with another substring within a larger string\nfunc replaceSubstring(mainStr, oldSub, newSub string) string {\n\treturn strings.Replace(mainStr, oldSub, newSub, -1)\n}\n\n// Removing leading and trailing whitespace from a string\nfunc trimString(str string) string {\n\treturn strings.TrimSpace(str)\n}\n\n// Converting a string to uppercase or lowercase\nfunc convertCase(str, caseType string) string {\n\tif caseType == &quot;uppercase&quot; {\n\t\treturn strings.ToUpper(str)\n\t} else if caseType == &quot;lowercase&quot; {\n\t\treturn strings.ToLower(str)\n\t}\n\treturn &quot;&quot;\n}\n\n// Checking if a string contains a certain substring\nfunc containsSubstring(str, sub string) bool {\n\treturn strings.Contains(str, sub)\n}\n\n// Finding the index of a specific substring within a larger string\nfunc findIndexString(mainStr, sub string) int {\n\treturn strings.Index(mainStr, sub)\n}\n\n// Getting the length of a string\nfunc getStringLength(str string) int {\n\treturn len(str)\n}\n\n// Reversing a string\nfunc reverseString(str string) string {\n\trunes := []rune(str)\n\tfor i, j := 0, len(runes)-1; i &lt; j; i, j = i+1, j-1 {\n\t\trunes[i], runes[j] = runes[j], runes[i]\n\t}\n\treturn string(runes)\n}\n\nfunc main() {\n\tstr1 := &quot;Hello&quot;\n\tstr2 := &quot;World&quot;\n\tconcatenatedStr := concatenateStrings(str1, str2)\n\tfmt.Println(&quot;Concatenated String:&quot;, concatenatedStr)\n\n\tsplitStr := &quot;apple,banana,cherry&quot;\n\tdelimiter := &quot;,&quot;\n\tsplitArr := splitString(splitStr, delimiter)\n\tfmt.Println(&quot;Split Array:&quot;, splitArr)\n\n\treplacedStr := replaceSubstring(&quot;Hello, World!&quot;, &quot;Hello&quot;, &quot;Hola&quot;)\n\tfmt.Println(&quot;Replaced String:&quot;, replacedStr)\n\n\ttrimmedStr := trimString(&quot;  Example String   &quot;)\n\tfmt.Println(&quot;Trimmed String:&quot;, trimmedStr)\n\n\tcaseStr := &quot;lowercase&quot;\n\tfmt.Println(&quot;Converted Case:&quot;, convertCase(caseStr, &quot;uppercase&quot;))\n\n\tsearchStr := &quot;This is a key sentence.&quot;\n\tsubStr := &quot;key&quot;\n\tfmt.Println(&quot;Contains Substring:&quot;, containsSubstring(searchStr, subStr))\n\n\tindexStr := &quot;Finding the index&quot;\n\tsubIndex := &quot;the&quot;\n\tfmt.Println(&quot;Index of Substring:&quot;, findIndexString(indexStr, subIndex))\n\n\tlengthStr := &quot;Length of this string&quot;\n\tfmt.Println(&quot;String Length:&quot;, getStringLength(lengthStr))\n\n\treversedStr := &quot;reverse&quot;\n\tfmt.Println(&quot;Reversed String:&quot;, reverseString(reversedStr))\n}\n",
            "threading": "package main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;time&quot;\n)\n\nfunc performTask(taskID int) {\n\t// Simulating task execution\n\ttime.Sleep(2 * time.Second)\n\tfmt.Printf(&quot;Task %d completed\\n&quot;, taskID)\n}\n\nfunc main() {\n\t// Improving performance by running tasks concurrently\n\tfor i := 1; i &lt;= 5; i++ {\n\t\tgo performTask(i)\n\t}\n\n\t// Handling multiple tasks simultaneously without blocking the main program\n\tfor j := 6; j &lt;= 10; j++ {\n\t\tgo performTask(j)\n\t}\n\n\t// Updating UI elements in response to asynchronous events\n\tgo func() {\n\t\ttime.Sleep(3 * time.Second)\n\t\tfmt.Println(&quot;Updating UI elements&quot;)\n\t}()\n\n\t// Processing large amounts of data in the background while the main thread remains responsive\n\tgo func() {\n\t\ttime.Sleep(3 * time.Second)\n\t\tfmt.Println(&quot;Processing data in the background&quot;)\n\t}()\n\n\t// Performing network requests without freezing the application&#x27;s user interface\n\tgo func() {\n\t\ttime.Sleep(5 * time.Second)\n\t\tfmt.Println(&quot;Performing network request&quot;)\n\t}()\n\n\t// Keeping the program running to observe the asynchronous tasks\n\ttime.Sleep(10 * time.Second)\n}\n"
          }
        },
        "php": {
          "name": "php",
          "displayname": "PHP",
          "comment": "#|//",
          "ext": "php",
          "css": "php",
          "categories": "programming",
          "snippets": {
            "arrays": "&lt;?php\n\n// 1. Storing a collection of elements of the same data type\n$nums = [1, 2, 3, 4, 5];\n\n// 2. Accessing individual elements via index\necho $nums[0]; // Output: 1\n\n// 3. Iterating over elements using loops\nforeach ($nums as $num) {\n    echo $num . &quot; &quot;;\n}\n\n// 4. Sorting elements in ascending order\nsort($nums);\n\n// 5. Searching for a specific element within the array\n$index = array_search(3, $nums); // Output: 2\n\n// 6. Modifying elements at specific positions\n$nums[2] = 10;\n\n// 7. Adding elements to the end of the array\n$nums[] = 6;\n\n// 8. Removing elements from the array\nunset($nums[1]);\n\n// 9. Merging two arrays into a single array\n$moreNums = [7, 8, 9];\n$combinedNums = array_merge($nums, $moreNums);\n\n// 10. Splitting an array into multiple smaller arrays\n$chunks = array_chunk($combinedNums, 2);\n\n// 11. Finding the maximum element in the array\n$maxNum = max($combinedNums);\n\n// 12. Filtering elements based on a condition\n$filteredNums = array_filter($combinedNums, function ($num) {\n    return $num % 2 == 0;\n});\n\n// 13. Mapping elements to a new value\n$mappedNums = array_map(function ($num) {\n    return $num * 2;\n}, $nums);\n\n// 14. Reversing the order of elements in the array\n$reversedNums = array_reverse($nums);\n\n// 15. Calculating the sum or average of array elements\n$sum = array_sum($nums);\n$avg = $sum / count($nums);\n\n// 16. Copying elements from one array to another\n$copyOfNums = $nums;\n\n// 17. Checking if an array contains a certain element\n$containsThree = in_array(3, $nums); // Output: true\n\n// 18. Converting an array to a string\n$numsString = implode(&quot;, &quot;, $nums);\n\n// 19. Creating multi-dimensional arrays for complex data structures\n$multiDimArray = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\n// 20. Implementing algorithms like binary search or quicksort using arrays\n\n?&gt;\n",
            "datetime": "&lt;?php\n\n// Displaying the current date and time\n$currentDateTime = date(&quot;Y-m-d H:i:s&quot;);\necho &quot;Current Date and Time: &quot; . $currentDateTime . &quot;\\n&quot;;\n\n// Calculating the difference between two dates\n$dateStart = new DateTime(&quot;2022-01-01&quot;);\n$dateEnd = new DateTime(&quot;2023-01-01&quot;);\n$interval = $dateStart-&gt;diff($dateEnd);\necho &quot;Difference in Dates: &quot; . $interval-&gt;format(&#x27;%R%a days&#x27;) . &quot;\\n&quot;;\n\n// Formatting dates and times for user-friendly display\n$rawDate = &quot;2022-11-20&quot;;\n$userFriendlyDate = date(&quot;F j, Y&quot;, strtotime($rawDate));\necho &quot;User-Friendly Date: &quot; . $userFriendlyDate . &quot;\\n&quot;;\n\n// Converting between different date and time formats\n$timestamp = strtotime(&quot;2023-12-31&quot;);\n$newDateFormat = date(&quot;d/m/Y&quot;, $timestamp);\necho &quot;New Date Format: &quot; . $newDateFormat . &quot;\\n&quot;;\n\n// Scheduling tasks or events based on specific dates and times\n$taskDate = new DateTime(&quot;next Monday&quot;);\necho &quot;Task Scheduled for: &quot; . $taskDate-&gt;format(&quot;l, F j, Y&quot;) . &quot;\\n&quot;;\n\n// Implementing countdown timers or timers for specific events\n$eventDate = new DateTime(&quot;2022-12-25&quot;);\n$now = new DateTime();\n$countdown = $now-&gt;diff($eventDate);\necho &quot;Countdown to Christmas: &quot; . $countdown-&gt;format(&#x27;%a days&#x27;) . &quot;\\n&quot;;\n\n// Handling time zones and daylight saving time adjustments\n$timezone = new DateTimeZone(&#x27;America/New_York&#x27;);\n$timeInNY = new DateTime(&#x27;now&#x27;, $timezone);\necho &quot;Current time in New York: &quot; . $timeInNY-&gt;format(&#x27;H:i:s&#x27;) . &quot;\\n&quot;;\n\n// Finding the day of week or month for a given date\n$dayOfWeek = date(&quot;l&quot;, strtotime(&quot;2022-10-15&quot;));\necho &quot;Day of Week: &quot; . $dayOfWeek . &quot;\\n&quot;;\n\n// Working with timestamps for tracking when events occur\n$eventTimestamp = time();\necho &quot;Event occurred at: &quot; . date(&quot;Y-m-d H:i:s&quot;, $eventTimestamp) . &quot;\\n&quot;;\n\n?&gt;\n",
            "dictionaries": "&lt;?php\n\n// Storing key-value pairs for quick retrieval\n$phonebook = [\n    &quot;Alice&quot; =&gt; 123456,\n    &quot;Bob&quot; =&gt; 654321,\n    &quot;Charlie&quot; =&gt; 987654\n];\n\n// Implementing a cache or memoization system\n$cache = [\n    &quot;result&quot; =&gt; &quot;some result&quot;\n];\n\n// Counting occurrences of elements in a collection\n$fruitCounts = [];\n$fruits = [&quot;apple&quot;, &quot;banana&quot;, &quot;apple&quot;, &quot;orange&quot;];\nforeach ($fruits as $fruit) {\n    $fruitCounts[$fruit] = isset($fruitCounts[$fruit]) ? $fruitCounts[$fruit] + 1 : 1;\n}\n\n// Mapping unique identifiers to objects or data\n$userData = [];\n$userIdMapping = [\n    &quot;9876&quot; =&gt; &quot;Alice&quot;,\n    &quot;5432&quot; =&gt; &quot;Bob&quot;,\n    &quot;1234&quot; =&gt; &quot;Charlie&quot;\n];\n\n// Building efficient lookup tables for data processing\n$lookupTable = [\n    &quot;key1&quot; =&gt; &quot;value1&quot;,\n    &quot;key2&quot; =&gt; &quot;value2&quot;,\n    &quot;key3&quot; =&gt; &quot;value3&quot;\n];\n\n// Checking for the existence of an element in a collection\n$numbers = [1, 2, 3, 4, 5];\n$elementToCheck = 3;\n$elementExists = in_array($elementToCheck, $numbers);\n\n// Implementing a data structure like a symbol table or associative array\n$symbolTable = [\n    &quot;key1&quot; =&gt; &quot;value1&quot;,\n    &quot;key2&quot; =&gt; &quot;value2&quot;\n];\n\n// Grouping and organizing data based on certain criteria\n$people = [\n    [&quot;name&quot; =&gt; &quot;Alice&quot;, &quot;age&quot; =&gt; 30],\n    [&quot;name&quot; =&gt; &quot;Bob&quot;, &quot;age&quot; =&gt; 25],\n    [&quot;name&quot; =&gt; &quot;Charlie&quot;, &quot;age&quot; =&gt; 35]\n];\n$groupedPeople = [];\nforeach ($people as $person) {\n    $ageGroup = $person[&quot;age&quot;] &gt;= 30 ? &quot;30 and above&quot; : &quot;below 30&quot;;\n    $groupedPeople[$ageGroup][] = $person;\n}\n\n// Providing a fast method for searching and accessing data\n$fastAccessData = [\n    &quot;key1&quot; =&gt; &quot;value1&quot;,\n    &quot;key2&quot; =&gt; &quot;value2&quot;,\n    &quot;key3&quot; =&gt; &quot;value3&quot;\n];\n\n?&gt;\n",
            "filesystem": "&lt;?php\n\n// Reading a file in a specific format and processing its contents\n$filename = &quot;example.txt&quot;;\n$file_content = file_get_contents($filename);\n// Process the content as needed\n\n// Writing data to a file or creating a new file\n$output_filename = &quot;output.txt&quot;;\n$output_data = &quot;Hello, World!&quot;;\nfile_put_contents($output_filename, $output_data);\n\n// Appending data to an existing file\n$append_content = &quot;Appended Text&quot;;\nfile_put_contents($output_filename, $append_content, FILE_APPEND);\n\n// Checking if a file or directory exists\nif (file_exists($filename)) {\n    echo &quot;File exists!&quot;;\n}\n\n// Listing all files and directories within a given directory\n$directory = &quot;/path/to/directory&quot;;\n$files = scandir($directory);\nforeach ($files as $file) {\n    echo $file . &quot;\\n&quot;;\n}\n\n// Deleting a file or directory\n$file_to_delete = &quot;file_to_delete.txt&quot;;\nunlink($file_to_delete);\n\n// Moving or renaming a file or directory\n$old_name = &quot;old_file.txt&quot;;\n$new_name = &quot;new_file.txt&quot;;\nrename($old_name, $new_name);\n\n// Creating a temporary file or directory\n$temp_file = tmpfile();\n$temp_path = stream_get_meta_data($temp_file)[&#x27;uri&#x27;];\n\n// Changing file permissions or ownership\n$filename_to_change = &quot;file_to_change.txt&quot;;\nchmod($filename_to_change, 0755);\nchown($filename_to_change, &#x27;your_username&#x27;);\n\n// Searching for a specific file or directory within a directory\n$dir_to_search = &quot;/path/to/search&quot;;\n$file_to_search = &quot;file_to_search.txt&quot;;\nif (in_array($file_to_search, scandir($dir_to_search))) {\n    echo &quot;File found!&quot;;\n}\n```\n",
            "regexps": "&lt;?php\n\n// Searching for specific patterns in text data\n$text = &quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit&quot;;\n$matches = [];\npreg_match(&#x27;/ipsum/&#x27;, $text, $matches);\nprint_r($matches);\n\n// Validating input forms (such as emails, phone numbers, etc.)\n$email = &quot;example@email.com&quot;;\nif (preg_match(&#x27;/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/&#x27;, $email)) {\n    echo &quot;Valid email&quot;;\n}\n\n// Data scraping\n$html = file_get_contents(&quot;https://www.example.com&quot;);\npreg_match(&#x27;/&lt;title&gt;(.*?)&lt;\\/title&gt;/&#x27;, $html, $title);\necho $title[1];\n\n// Parsing and extracting information from structured data\n$data = &quot;Name: John, Age: 30, City: New York&quot;;\npreg_match_all(&#x27;/(\\w+): (\\w+)/&#x27;, $data, $matches);\nprint_r($matches);\n\n// Replacing strings that match a certain pattern with another string\n$str = &quot;Hello 123 World&quot;;\n$newstr = preg_replace(&#x27;/\\d+/&#x27;, &#x27;456&#x27;, $str);\necho $newstr;\n\n// Tokenizing strings into smaller components\n$words = preg_split(&#x27;/\\s+/&#x27;, &quot;Hello World&quot;);\nprint_r($words);\n\n// Filtering and processing text\n$text = &quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit&quot;;\n$filtered = preg_replace(&#x27;/\\b(ipsum|dolor)\\b/&#x27;, &#x27;&#x27;, $text);\necho $filtered;\n\n// Pattern matching in search algorithms\n$keywords = [&quot;Lorem&quot;, &quot;ipsum&quot;, &quot;dolores&quot;];\n$pattern = &#x27;/\\b(&#x27; . implode(&#x27;|&#x27;, $keywords) . &#x27;)\\b/&#x27;;\nif (preg_match($pattern, $text)) {\n    echo &quot;Match found&quot;;\n}\n\n// Checking for the presence of specific characters or words\nif (preg_match(&#x27;/\\d+/&#x27;, $text)) {\n    echo &quot;Numbers found&quot;;\n}\n\n// Text manipulation and transformation\n$transformed = preg_replace_callback(&#x27;/\\w+/&#x27;, function($match) {\n    return strtoupper($match[0]);\n}, $text);\necho $transformed;\n\n// Input sanitization\n$input = &quot;&lt;script&gt;alert(&#x27;XSS&#x27;)&lt;/script&gt;&quot;;\n$clean_input = preg_replace(&#x27;/&lt;script&gt;/&#x27;, &#x27;&#x27;, $input);\necho $clean_input;\n\n// Pattern-based data extraction\n$data = &quot;Age: 25, Height: 180cm&quot;;\npreg_match(&#x27;/Age: (\\d+), Height: (\\d+)cm/&#x27;, $data, $matches);\nprint_r($matches);\n\n// Syntax highlighting in text editors or IDEs\n$code = &quot;function test() { echo &#x27;Hello World&#x27;; }&quot;;\n$highlighted = preg_replace(&#x27;/\\b(echo|function)\\b/&#x27;, &#x27;&lt;span class=&quot;highlight&quot;&gt;$1&lt;/span&gt;&#x27;, $code);\necho $highlighted;\n\n// Data validation in form submission\n$form_data = [&quot;username&quot; =&gt; &quot;example123&quot;, &quot;password&quot; =&gt; &quot;password&quot;];\nif (preg_match(&#x27;/^[a-zA-Z0-9_]{5,}$/&#x27;, $form_data[&quot;username&quot;])) {\n    echo &quot;Valid username&quot;;\n}\n\n// Extracting data from log files or other text-based records\n$log = &quot;Error - File not found&quot;;\npreg_match(&#x27;/Error - (.+)$/&#x27;, $log, $error);\necho $error[1];\n\n// Pattern matching in natural language processing tasks\n$text = &quot;The quick brown fox jumps over the lazy dog&quot;;\n$matches = [];\npreg_match_all(&#x27;/\\b\\w{4}\\b/&#x27;, $text, $matches);\nprint_r($matches);\n\n// Data cleaning and preprocessing\n$data = &quot;123 456 789&quot;;\n$cleaned = preg_replace(&#x27;/\\d+/&#x27;, &#x27;&#x27;, $data);\necho $cleaned;\n\n// Automating repetitive text processing tasks\n$text = &quot;Lorem Ipsum&quot;;\n$repeated = preg_replace(&#x27;/(\\w+)\\s(\\w+)/&#x27;, &quot;$1 $2 $1 $2&quot;, $text);\necho $repeated;\n\n// Generating reports or summaries based on text patterns\n$text = &quot;Lorem Ipsum dolor sit amet, consectetur adipiscing elit&quot;;\n$summary = preg_replace(&#x27;/(\\b\\w{4}\\b)/&#x27;, &quot;[$1]&quot;, $text);\necho $summary;\n\n// Customizing search functionality in web applications\n$query = &quot;Lorem+ipsum+dolor&quot;;\n$search_query = urldecode($query);\n$terms = explode(&quot;+&quot;, $search_query);\nprint_r($terms);\n\n// Validating and formatting user input\n$input = &quot;john DOE&quot;;\n$clean_input = ucfirst(strtolower($input));\necho $clean_input;\n\n// Parsing URLs and query parameters\n$url = &quot;https://www.example.com/?page=1&amp;limit=10&quot;;\npreg_match(&#x27;/\\?([^#]+)/&#x27;, $url, $query_params);\nparse_str($query_params[1], $params);\nprint_r($params);\n\n// Implementing text-based search functionality\n$keywords = [&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;];\n$search_pattern = &#x27;/\\b(&#x27; . implode(&#x27;|&#x27;, $keywords) . &#x27;)\\b/i&#x27;;\nif (preg_match($search_pattern, $text)) {\n    echo &quot;Keyword found&quot;;\n}\n\n?&gt;\n",
            "strings": "&lt;?php\n\n// Concatenating two strings together to create a longer string\n$string1 = &quot;Hello&quot;;\n$string2 = &quot;World&quot;;\n$concatenatedString = $string1 . &quot; &quot; . $string2;\necho $concatenatedString . &quot;\\n&quot;;\n\n// Splitting a string into an array of substrings based on a delimiter\n$originalString = &quot;Apple,Orange,Banana,Grape&quot;;\n$splitArray = explode(&quot;,&quot;, $originalString);\nprint_r($splitArray);\n\n// Replacing a specific substring with another substring within a larger string\n$bigString = &quot;I like apples and apples are delicious.&quot;;\n$newString = str_replace(&quot;apples&quot;, &quot;bananas&quot;, $bigString);\necho $newString . &quot;\\n&quot;;\n\n// Removing leading and trailing whitespace from a string\n$whitespaceString = &quot;   Trim whitespaces   &quot;;\n$trimmedString = trim($whitespaceString);\necho $trimmedString . &quot;\\n&quot;;\n\n// Converting a string to uppercase or lowercase\n$originalCaseString = &quot;Hello, World!&quot;;\n$uppercaseString = strtoupper($originalCaseString);\n$lowercaseString = strtolower($originalCaseString);\necho $uppercaseString . &quot;\\n&quot;;\necho $lowercaseString . &quot;\\n&quot;;\n\n// Checking if a string contains a certain substring\n$searchString = &quot;The quick brown fox jumps over the lazy dog&quot;;\n$substrToCheck = &quot;brown&quot;;\nif (strpos($searchString, $substrToCheck) !== false) {\n    echo &quot;Substring found!\\n&quot;;\n} else {\n    echo &quot;Substring not found.\\n&quot;;\n}\n\n// Finding the index of a specific substring within a larger string\n$subStrToFind = &quot;lazy&quot;;\n$index = strpos($searchString, $subStrToFind);\necho &quot;Index of &#x27;{$subStrToFind}&#x27;: {$index}\\n&quot;;\n\n// Getting the length of a string\n$lengthString = &quot;This is a string&quot;;\n$length = strlen($lengthString);\necho &quot;Length of string: {$length}\\n&quot;;\n\n// Reversing a string\n$reverseString = strrev($lengthString);\necho &quot;Reversed string: {$reverseString}\\n&quot;;\n\n// Formatting a string with placeholders for variables\n$name = &quot;Alice&quot;;\n$age = 30;\n$formattedString = sprintf(&quot;Name: %s, Age: %d&quot;, $name, $age);\necho $formattedString . &quot;\\n&quot;;\n\n// Parsing and manipulating data stored in a string format (such as JSON or XML)\n$jsonData = &#x27;{&quot;name&quot;: &quot;Bob&quot;, &quot;age&quot;: 25}&#x27;;\n$decodedData = json_decode($jsonData, true);\necho &quot;Name: &quot; . $decodedData[&#x27;name&#x27;] . &quot;, Age: &quot; . $decodedData[&#x27;age&#x27;] . &quot;\\n&quot;;\n\n// Generating a string representation of an object for debugging or logging\nclass Person {\n    public $name = &quot;John&quot;;\n    public $age = 40;\n}\n\n$person = new Person();\n$objectString = print_r($person, true);\necho $objectString . &quot;\\n&quot;;\n\n// Validating and sanitizing user input received as strings\n$userInput = &quot;&lt;script&gt;alert(&#x27;XSS&#x27;);&lt;/script&gt;&quot;;\n$sanitizedInput = htmlspecialchars($userInput, ENT_QUOTES, &#x27;UTF-8&#x27;);\necho $sanitizedInput . &quot;\\n&quot;;\n\n// Implementing algorithms like string matching, searching, or sorting\n$haystack = &quot;The quick brown fox jumps over the lazy dog&quot;;\n$needle = &quot;fox&quot;;\nif (strpos($haystack, $needle) !== false) {\n    echo &quot;Needle found!\\n&quot;;\n} else {\n    echo &quot;Needle not found.\\n&quot;;\n}\n\n?&gt;\n",
            "threading": "[\n    &quot;&lt;?php&quot;,\n    &quot;// Improving performance by running tasks concurrently&quot;,\n    &quot;$task1 = function() {&quot;,\n    &quot;    sleep(2); // Simulating a time-consuming task&quot;,\n    &quot;    echo &#x27;Task 1 completed!\\n&#x27;;&quot;,\n    &quot;};&quot;,\n    &quot;$task2 = function() {&quot;,\n    &quot;    sleep(1); // Simulating another task&quot;,\n    &quot;    echo &#x27;Task 2 completed!\\n&#x27;;&quot;,\n    &quot;};&quot;,\n    &quot;echo &#x27;Starting concurrent execution...\\n&#x27;;&quot;,\n    &quot;echo &#x27;Task 1 and Task 2 are running concurrently:\\n&#x27;;&quot;,\n    &quot;echo &#x27;----------------\\n&#x27;;&quot;,\n    &quot;[$task1, $task2]&quot;,\n    &quot;// Handling multiple tasks simultaneously without blocking the main program&quot;,\n    &quot;$threads = array(); // Initialize an array to store threads&quot;,\n    &quot;foreach ([$task1, $task2] as $task) {&quot;,\n    &quot;    $thread = new Thread($task);&quot;,\n    &quot;    $thread-&gt;start(); // Start the thread&quot;,\n    &quot;    $threads[] = $thread; // Store the thread&quot;,\n    &quot;}&quot;,\n    &quot;foreach ($threads as $thread) {&quot;,\n    &quot;    $thread-&gt;join(); // Wait for threads to finish execution&quot;,\n    &quot;}&quot;,\n    &quot;// Updating UI elements in response to asynchronous events&quot;,\n    &quot;echo &#x27;Updating UI asynchronously...\\n&#x27;;&quot;,\n    &quot;echo &#x27;UI elements updated!\\n&#x27;;&quot;,\n    &quot;// Processing large amounts of data in the background while the main thread remains responsive&quot;,\n    &quot;$processData = function() {&quot;,\n    &quot;    echo &#x27;Processing large data...&#x27;;&quot;,\n    &quot;    for ($i = 0; $i &lt; 1000000; $i++) {&quot;,\n    &quot;        // Process data&quot;,\n    &quot;    }&quot;,\n    &quot;    echo &#x27;Data processing completed!\\n&#x27;;&quot;,\n    &quot;};&quot;,\n    &quot;$thread = new Thread($processData);&quot;,\n    &quot;$thread-&gt;start();&quot;,\n    &quot;$thread-&gt;join();&quot;,\n    &quot;// Performing network requests without freezing the application&#x27;s user interface&quot;,\n    &quot;$networkRequest = function() {&quot;,\n    &quot;    $response = file_get_contents(&#x27;https://api.example.com/data&#x27;);&quot;,\n    &quot;    echo &#x27;Network data received: &#x27; . $response;&quot;,\n    &quot;};&quot;,\n    &quot;$thread = new Thread($networkRequest);&quot;,\n    &quot;$thread-&gt;start();&quot;,\n    &quot;$thread-&gt;join();&quot;,\n    &quot;?&gt;&quot;\n]"
          }
        }
      },
      "topics": {
        "filesystem": {
          "name": "filesystem",
          "displayname": "Filesystems and Directories",
          "aliases": "filesystems directorys",
          "operations": [
            "Reading a file in a specific format and processing its contents",
            "Writing data to a file or creating a new file",
            "Appending data to an existing file",
            "Checking if a file or directory exists",
            "Listing all files and directories within a given directory",
            "Deleting a file or directory",
            "Moving or renaming a file or directory",
            "Creating a temporary file or directory",
            "Changing file permissions or ownership",
            "Searching for a specific file or directory within a directory"
          ],
          "question": "Please respond to this question only with answers, formatted as a JSON array of strings. I want a basic list of common programming uses with enough detail to generate code about the topic \"interacting with files and directories\".",
          "want": "interacting with files and directories"
        },
        "dictionaries": {
          "name": "dictionaries",
          "displayname": "Dictionaries and Hashmaps",
          "aliases": "hashmaps dictionaries hashes",
          "operations": [
            "Storing key-value pairs for quick retrieval",
            "Implementing a cache or memoization system",
            "Counting occurrences of elements in a collection",
            "Mapping unique identifiers to objects or data",
            "Building efficient lookup tables for data processing",
            "Checking for the existence of an element in a collection",
            "Implementing a data structure like a symbol table or associative array",
            "Grouping and organizing data based on certain criteria",
            "Providing a fast method for searching and accessing data"
          ],
          "question": "Please respond to this question only with answers, formatted as a JSON array of strings. I want a basic list of common programming uses with enough detail to generate code about the topic \"dictionaries and hashmaps\".",
          "want": "dictionaries and hashmaps"
        },
        "regexps": {
          "name": "regexps",
          "displayname": "Regular Expressions",
          "aliases": "regexps regexes rx",
          "operations": [
            "Searching for specific patterns in text data",
            "Validating input forms (such as emails, phone numbers, etc.)",
            "Data scraping",
            "Parsing and extracting information from structured data",
            "Replacing strings that match a certain pattern with another string",
            "Tokenizing strings into smaller components",
            "Filtering and processing text",
            "Pattern matching in search algorithms",
            "Checking for the presence of specific characters or words",
            "Text manipulation and transformation",
            "Input sanitization",
            "Pattern-based data extraction",
            "Syntax highlighting in text editors or IDEs",
            "Data validation in form submission",
            "Extracting data from log files or other text-based records",
            "Pattern matching in natural language processing tasks",
            "Data cleaning and preprocessing",
            "Automating repetitive text processing tasks",
            "Generating reports or summaries based on text patterns",
            "Customizing search functionality in web applications",
            "Validating and formatting user input",
            "Parsing URLs and query parameters",
            "Implementing text-based search functionality"
          ],
          "question": "Please respond to this question only with answers, formatted as a JSON array of strings. I want a fairly comprehensive list of common programming uses with enough detail to generate code about the topic \"regular expressions\".",
          "want": "regular expressions"
        },
        "threading": {
          "name": "threading",
          "displayname": "Threads and Async",
          "aliases": "thread async simultaneous",
          "operations": [
            "Improving performance by running tasks concurrently",
            "Handling multiple tasks simultaneously without blocking the main program",
            "Updating UI elements in response to asynchronous events",
            "Processing large amounts of data in the background while the main thread remains responsive",
            "Performing network requests without freezing the application's user interface"
          ],
          "question": "Please respond to this question only with answers, formatted as a JSON array of strings. I want a basic list of common programming uses with enough detail to generate code about the topic \"threading and asynchronous execution\".",
          "want": "threading and asynchronous execution"
        },
        "strings": {
          "name": "strings",
          "displayname": "Strings and Texts",
          "aliases": "strings texts",
          "operations": [
            "Concatenating two strings together to create a longer string",
            "Splitting a string into an array of substrings based on a delimiter",
            "Replacing a specific substring with another substring within a larger string",
            "Removing leading and trailing whitespace from a string",
            "Converting a string to uppercase or lowercase",
            "Checking if a string contains a certain substring",
            "Finding the index of a specific substring within a larger string",
            "Getting the length of a string",
            "Reversing a string",
            "Formatting a string with placeholders for variables",
            "Parsing and manipulating data stored in a string format (such as JSON or XML)",
            "Generating a string representation of an object for debugging or logging",
            "Validating and sanitizing user input received as strings",
            "Implementing algorithms like string matching, searching, or sorting"
          ],
          "question": "Please respond only with answers, formatted as a yaml array of descriptions.I want a fairly comprehensive list of common programming uses with enough detail to generate code about the topic \"working with strings\".",
          "want": "working with strings"
        },
        "arrays": {
          "name": "arrays",
          "displayname": "Arrays",
          "aliases": "list ordered",
          "operations": [
            "Storing a collection of elements of the same data type",
            "Accessing individual elements via index",
            "Iterating over elements using loops",
            "Sorting elements in ascending or descending order",
            "Searching for a specific element within the array",
            "Modifying elements at specific positions",
            "Adding elements to the end of the array",
            "Removing elements from the array",
            "Merging two arrays into a single array",
            "Splitting an array into multiple smaller arrays",
            "Finding the maximum or minimum element in the array",
            "Filtering elements based on a condition",
            "Mapping elements to a new value",
            "Reversing the order of elements in the array",
            "Calculating the sum or average of array elements",
            "Copying elements from one array to another",
            "Checking if an array contains a certain element",
            "Converting an array to a string or vice versa",
            "Creating multi-dimensional arrays for complex data structures",
            "Implementing algorithms like binary search or quicksort using arrays"
          ],
          "question": "Please respond to this question only with answers, formatted as a JSON array of strings. I want a fairly comprehensive list of common programming uses with enough detail to generate code about the topic \"arrays\".",
          "want": "arrays"
        },
        "datetime": {
          "name": "datetime",
          "displayname": "Time, Date, and DateTime",
          "aliases": "time dates timestamp datetime timedelta",
          "operations": [
            "Displaying the current date and time",
            "Calculating the difference between two dates",
            "Formatting dates and times for user-friendly display",
            "Converting between different date and time formats",
            "Scheduling tasks or events based on specific dates and times",
            "Implementing countdown timers or timers for specific events",
            "Handling time zones and daylight saving time adjustments",
            "Finding the day of week or month for a given date",
            "Working with timestamps for tracking when events occur"
          ],
          "question": "Please respond to this question only with answers, formatted as a JSON array of strings. I want a basic list of common programming uses with enough detail to generate code about the topic \"interacting with time and dates\".",
          "want": "interacting with time and dates"
        }
      },
      "displayname": "Programming",
      "openai_question": "I want a basic list of common programming uses with enough detail to generate code about the topic \"{want}\"."
    }
  }
};