// Auto-Generated, do not edit
const GENERATED = {
  "buildtime": 1720586361,
  "generatetime": 3441146089,
  "categories": {
    "programming": {
      "name": "programming",
      "languages": {
        "csharp": {
          "name": "csharp",
          "displayname": "C# (C-Sharp)",
          "comment": "#|//",
          "ext": "cs",
          "css": "csharp",
          "categories": "programming",
          "snippets": {
            "arrays": "using System;\nusing System.Linq;\n\nclass Program\n{\n    static void Main()\n    {\n        // Storing a collection of elements of the same data type\n        int[] numbersArray = { 5, 2, 7, 9, 1 };\n\n        // Accessing individual elements via index\n        int thirdElement = numbersArray[2];\n        Console.WriteLine(&quot;Third element: &quot; + thirdElement);\n\n        // Iterating over elements using loops\n        foreach (int number in numbersArray)\n        {\n            Console.Write(number + &quot; &quot;);\n        }\n        Console.WriteLine();\n\n        // Sorting elements in ascending order\n        Array.Sort(numbersArray);\n\n        // Searching for a specific element within the array\n        int searchNumber = 7;\n        int index = Array.IndexOf(numbersArray, searchNumber);\n        Console.WriteLine(&quot;Index of &quot; + searchNumber + &quot; is &quot; + index);\n\n        // Modifying elements at specific positions\n        numbersArray[1] = 10;\n\n        // Adding elements to the end of the array\n        numbersArray = numbersArray.Concat(new int[] { 4 }).ToArray();\n\n        // Removing elements from the array\n        numbersArray = numbersArray.Where(num =&gt; num != 9).ToArray();\n\n        // Merging two arrays into a single array\n        int[] anotherArray = { 3, 8 };\n        int[] mergedArray = numbersArray.Concat(anotherArray).ToArray();\n\n        // Splitting an array into multiple smaller arrays\n        int[][] jaggedArray = numbersArray.Select(val =&gt; new int[] { val }).ToArray();\n\n        // Finding the maximum element in the array\n        int maxNumber = numbersArray.Max();\n        Console.WriteLine(&quot;Maximum number: &quot; + maxNumber);\n\n        // Filtering elements based on a condition\n        int[] filteredArray = numbersArray.Where(num =&gt; num % 2 == 0).ToArray();\n        \n        // Mapping elements to a new value\n        int[] incrementedArray = numbersArray.Select(num =&gt; num + 1).ToArray();\n\n        // Reversing the order of elements in the array\n        Array.Reverse(numbersArray);\n\n        // Calculating the sum of array elements\n        int sum = numbersArray.Sum();\n        Console.WriteLine(&quot;Sum: &quot; + sum);\n\n        // Copying elements from one array to another\n        int[] copiedArray = new int[numbersArray.Length];\n        Array.Copy(numbersArray, copiedArray, numbersArray.Length);\n\n        // Checking if an array contains a certain element\n        bool containsElement = numbersArray.Contains(5);\n        Console.WriteLine(&quot;Contains 5: &quot; + containsElement);\n\n        // Converting an array to a string\n        string arrayAsString = string.Join(&quot;, &quot;, numbersArray);\n        Console.WriteLine(&quot;Array as string: &quot; + arrayAsString);\n\n        // Creating multi-dimensional arrays\n        int[,] multiDimArray = { { 1, 2 }, { 3, 4 } };\n\n        // Binary search using arrays\n        int[] sortedArray = { 1, 2, 3, 4, 5 };\n        int elementToSearch = 3;\n        int binarySearchIndex = Array.BinarySearch(sortedArray, elementToSearch);\n        Console.WriteLine(&quot;Binary search index: &quot; + binarySearchIndex);\n\n        // Quicksort using arrays\n        Array.Sort(sortedArray);\n    }\n}\n",
            "regexps": "// C# - RegexExamples.cs\nusing System;\nusing System.Text.RegularExpressions;\n\nclass RegexExamples\n{\n    static void Main()\n    {\n        // Pattern Matching\n        string text = &quot;There are 123 apples&quot;;\n        string pattern = @&quot;\\d+&quot;;  // Match one or more digits\n        bool isMatch = Regex.IsMatch(text, pattern);\n        Console.WriteLine(&quot;Pattern Matching: &quot; + (isMatch ? &quot;Match found!&quot; : &quot;No match found.&quot;));\n\n        // Search and Replace\n        text = &quot;Hello 123, meet 456&quot;;\n        string result = Regex.Replace(text, pattern, &quot;number&quot;);\n        Console.WriteLine(&quot;Search and Replace: &quot; + result);  // &quot;Hello number, meet number&quot;\n\n        // String Splitting\n        text = &quot;apple, orange; banana, grape&quot;;\n        string[] resultArray = Regex.Split(text, &quot;[,;]&quot;);\n        Console.WriteLine(&quot;String Splitting: &quot; + string.Join(&quot;, &quot;, resultArray));  // [&quot;apple&quot;, &quot; orange&quot;, &quot; banana&quot;, &quot; grape&quot;]\n\n        // Extracting Substrings\n        text = &quot;The date is 2024-06-27&quot;;\n        pattern = @&quot;(\\d{4})-(\\d{2})-(\\d{2})&quot;;\n        Match match = Regex.Match(text, pattern);\n        if (match.Success)\n        {\n            Console.WriteLine(&quot;Extracting Substrings: &quot; + match.Groups[1] + &quot;, &quot; + match.Groups[2] + &quot;, &quot; + match.Groups[3]);  // [&quot;2024&quot;, &quot;06&quot;, &quot;27&quot;]\n        }\n\n        // Validation\n        string email = &quot;example@test.com&quot;;\n        pattern = @&quot;^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$&quot;;\n        isMatch = Regex.IsMatch(email, pattern);\n        Console.WriteLine(&quot;Validation: &quot; + (isMatch ? &quot;Valid email address!&quot; : &quot;Invalid email address.&quot;));\n\n        // Removing Unwanted Characters\n        text = &quot;Hello, World!&quot;;\n        result = Regex.Replace(text, &quot;[^\\\\w\\\\s]&quot;, &quot;&quot;);  // Remove all non-alphanumeric characters\n        Console.WriteLine(&quot;Removing Unwanted Characters: &quot; + result);  // &quot;Hello World&quot;\n\n        // Anchoring Searches\n        text = &quot;The quick brown fox&quot;;\n        pattern = @&quot;\\bfox\\b&quot;;  // Match &#x27;fox&#x27; as a whole word\n        isMatch = Regex.IsMatch(text, pattern);\n        Console.WriteLine(&quot;Anchoring Searches: &quot; + (isMatch ? &quot;Found&quot; : &quot;Not Found&quot;));\n\n\u001b[O        // Escaping Characters\n        string user_input = &quot;some[unsafe]input&quot;;\n        string escaped_input = Regex.Escape(user_input);\n        Console.WriteLine(&quot;Escaping Characters: &quot; + escaped_input);  // &quot;some\\[unsafe\\]input&quot;\n\n        // Conditional Matching\n        pattern = @&quot;foo(?=bar)&quot;;  // Match &#x27;foo&#x27; only if followed by &#x27;bar&#x27;\n        text = &quot;foobar and foo&quot;;\n        MatchCollection matches = Regex.Matches(text, pattern);\n        Console.Write(&quot;Conditional Matching: &quot;);\n        foreach (Match m in matches)\n        {\n            Console.Write(m.Value + &quot; &quot;);  // &quot;foo&quot;\n        }\n        Console.WriteLine();\n    }\n}\n\n",
            "strings": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        // Concatenating two strings together\n        string concatenated = &quot;Hello, &quot; + &quot;World!&quot;;\n        Console.WriteLine(concatenated);\n\n        // Splitting a string into an array of substrings based on a delimiter\n        string sentence = &quot;The quick brown fox jumps over the lazy dog&quot;;\n        string[] words = sentence.Split(&#x27; &#x27;);\n        foreach (string word in words)\n        {\n            Console.WriteLine(word);\n        }\n\n        // Replacing a specific substring\n        string original = &quot;Hello, World!&quot;;\n        string replaced = original.Replace(&quot;World&quot;, &quot;Universe&quot;);\n        Console.WriteLine(replaced);\n\n        // Removing leading and trailing whitespace\n        string withWhitespaces = &quot;  Trim me!    &quot;;\n        string trimmed = withWhitespaces.Trim();\n        Console.WriteLine(trimmed);\n\n        // Converting to uppercase and lowercase\n        string uppercase = &quot;hello&quot;.ToUpper();\n        string lowercase = &quot;WORLD&quot;.ToLower();\n        Console.WriteLine(uppercase);\n        Console.WriteLine(lowercase);\n\n        // Checking if a string contains a certain substring\n        string checkString = &quot;Hello, Universe!&quot;;\n        bool containsSubstr = checkString.Contains(&quot;Universe&quot;);\n        Console.WriteLine(containsSubstr);\n\n        // Finding the index of a specific substring\n        string parentString = &quot;The quick brown fox&quot;;\n        int index = parentString.IndexOf(&quot;brown&quot;);\n        Console.WriteLine(index);\n\n        // Getting the length of a string\n        string lengthString = &quot;C# Programming&quot;;\n        int length = lengthString.Length;\n        Console.WriteLine(length);\n\n        // Reversing a string\n        char[] charArray = &quot;Reverse&quot;.ToCharArray();\n        Array.Reverse(charArray);\n        string reversed = new string(charArray);\n        Console.WriteLine(reversed);\n\n        // Formatting a string with placeholders for variables\n        string formatted = string.Format(&quot;{0} is {1} years old.&quot;, &quot;Alice&quot;, 25);\n        Console.WriteLine(formatted);\n\n        // Parsing and manipulating data stored in JSON format\n        string jsonString = &quot;{\\&quot;name\\&quot;:\\&quot;John\\&quot;,\\&quot;age\\&quot;:30}&quot;;\n        // Example of deserializing JSON using a serializer (Newtonsoft.Json)\n        dynamic parsedJson = Newtonsoft.Json.JsonConvert.DeserializeObject(jsonString);\n        Console.WriteLine($&quot;Name: {parsedJson.name}, Age: {parsedJson.age}&quot;);\n\n        // Generating a string representation of an object\n        // Example using a custom object\n        Person person = new Person { Name = &quot;Bob&quot;, Age = 28 };\n        string debugString = person.ToString();\n        Console.WriteLine(debugString);\n\n        // Validating and sanitizing user input\n        string userInput = &quot;   Input    &quot;;\n        string validatedInput = userInput.Trim();\n        Console.WriteLine(validatedInput);\n\n        // Implementing string matching algorithm\n        string mainString = &quot;programming&quot;;\n        string pattern = &quot;gram&quot;;\n        // Example using IndexOf for simple pattern matching\n        int matchIndex = mainString.IndexOf(pattern);\n        Console.WriteLine(matchIndex);\n    }\n}\n\nclass Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n\n    public override string ToString()\n    {\n        return $&quot;Person: {Name}, Age: {Age}&quot;;\n    }\n}\n"
          }
        },
        "ruby": {
          "name": "ruby",
          "displayname": "Ruby",
          "comment": "#|//",
          "ext": "rb",
          "css": "ruby",
          "categories": "programming",
          "snippets": {
            "arrays": "# Storing a collection of elements of the same data type\narr = [1, 2, 3, 4, 5]\n\n# Accessing individual elements via index\nputs arr[2]\n\n# Iterating over elements using loops\narr.each do |element|\n  puts element\nend\n\n# Sorting elements in ascending order\nsorted_arr = arr.sort\nputs sorted_arr\n\n# Sorting elements in descending order\nreverse_sorted_arr = arr.sort.reverse\nputs reverse_sorted_arr\n\n# Searching for a specific element within the array\nputs arr.include?(3)\n\n# Modifying elements at specific positions\narr[1] = 20\nputs arr\n\n# Adding elements to the end of the array\narr.push(6)\nputs arr\n\n# Removing elements from the array\narr.delete(3)\nputs arr\n\n# Merging two arrays into a single array\narr2 = [7, 8, 9]\nmerged_arr = arr + arr2\nputs merged_arr\n\n# Splitting an array into multiple smaller arrays\nsplit_arr = arr.each_slice(2).to_a\nputs split_arr\n\n# Finding the maximum element in the array\nmax_element = arr.max\nputs max_element\n\n# Finding the minimum element in the array\nmin_element = arr.min\nputs min_element\n\n# Filtering elements based on a condition\nfiltered_arr = arr.select { |element| element &gt; 3 }\nputs filtered_arr\n\n# Mapping elements to a new value\nmapped_arr = arr.map { |element| element * 2 }\nputs mapped_arr\n\n# Reversing the order of elements in the array\nreversed_arr = arr.reverse\nputs reversed_arr\n\n# Calculating the sum of array elements\nsum = arr.sum\nputs sum\n\n# Copying elements from one array to another\ncopied_arr = arr.clone\nputs copied_arr\n\n# Checking if an array contains a certain element\nputs arr.include?(5)\n\n# Converting an array to a string\narr_string = arr.join(&#x27;,&#x27;)\nputs arr_string\n\n# Converting a string back to an array\nnew_arr = arr_string.split(&#x27;,&#x27;)\nputs new_arr\n\n# Creating multi-dimensional arrays\nmulti_dim_arr = [[1, 2], [3, 4], [5, 6]]\nputs multi_dim_arr\n\n# Implementing binary search with arrays\ndef binary_search(arr, target)\n  low = 0\n  high = arr.length - 1\n\n  while low &lt;= high\n    mid = (low + high) / 2\n    if arr[mid] == target\n      return mid\n    elsif arr[mid] &lt; target\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend\n\nputs binary_search(sorted_arr, 4)\n",
            "regexps": "# Ruby - regex_examples.rb\n\n# Pattern Matching\npattern = /\\d+/  # Match one or more digits\ntext = &quot;There are 123 apples&quot;\nputs &quot;Pattern Matching: #{pattern.match(text) ? &quot;Match found!&quot; : &quot;No match found.&quot;}&quot;\n\n# Search and Replace\ntext = &quot;Hello 123, meet 456&quot;\nresult = text.gsub(/\\d+/, &#x27;number&#x27;)\nputs &quot;Search and Replace: #{result}&quot;  # &quot;Hello number, meet number&quot;\n\n# String Splitting\ntext = &quot;apple, orange; banana, grape&quot;\nresult = text.split(/[,;]/)\nputs &quot;String Splitting: #{result.inspect}&quot;  # [&quot;apple&quot;, &quot; orange&quot;, &quot; banana&quot;, &quot; grape&quot;]\n\n# Extracting Substrings\ntext = &quot;The date is 2024-06-27&quot;\npattern = /(\\d{4})-(\\d{2})-(\\d{2})/\nmatch = pattern.match(text)\nputs &quot;Extracting Substrings: #{match ? match.captures : &quot;No match found&quot;}&quot;  # [&quot;2024&quot;, &quot;06&quot;, &quot;27&quot;]\n\n# Validation\nemail = &quot;example@test.com&quot;\npattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/\nputs &quot;Validation: #{pattern.match(email) ? &quot;Valid email address!&quot; : &quot;Invalid email address.&quot;}&quot;\n\n# Parsing Structured Text\nlog_entry = &quot;127.0.0.1 - - [27/Jun/2024:10:00:00 +0000] \\&quot;GET /index.html HTTP/1.1\\&quot; 200 1234&quot;\npattern = /(?&lt;ip&gt;\\d+\\.\\d+\\.\\d+\\.\\d+) - - \\[(?&lt;date&gt;[^\\]]+)\\] &quot;(?&lt;request&gt;[^&quot;]+)&quot; (?&lt;status&gt;\\d+) (?&lt;size&gt;\\d+)/\nmatch = pattern.match(log_entry)\nputs &quot;Parsing Structured Text: #{match ? match.named_captures : &quot;No match found&quot;}&quot;\n\n# Removing Unwanted Characters\ntext = &quot;Hello, World!&quot;\ncleaned_text = text.gsub(/[^\\w\\s]/, &#x27;&#x27;)  # Remove all non-alphanumeric characters\nputs &quot;Removing Unwanted Characters: #{cleaned_text}&quot;  # &quot;Hello World&quot;\n\n# Anchoring Searches\ntext = &quot;The quick brown fox&quot;\npattern = /\\bfox\\b/  # Match &#x27;fox&#x27; as a whole word\nputs &quot;Anchoring Searches: #{pattern.match(text) ? &quot;Found&quot; : &quot;Not Found&quot;}&quot;\n\n# Escaping Characters\nuser_input = &quot;some[unsafe]input&quot;\nescaped_input = Regexp.escape(user_input)\npattern = /#{escaped_input}/\nputs &quot;Escaping Characters: #{pattern}&quot;  # &quot;some\\[unsafe\\]input&quot;\n\n# Conditional Matching\npattern = /foo(?=bar)/  # Match &#x27;foo&#x27; only if followed by &#x27;bar&#x27;\ntext = &quot;foobar and foo&quot;\nmatches = text.scan(pattern)\nputs &quot;Conditional Matching: #{matches.inspect}&quot;  # [&quot;foo&quot;]\n\n",
            "strings": "# Concatenating two strings together to create a longer string\nconcatenated_string = &quot;Hello, &quot; + &quot;World&quot;\n\n# Splitting a string into an array of substrings based on a delimiter\nsplit_string = &quot;apple,orange,banana&quot;.split(&quot;,&quot;)\n\n# Replacing a specific substring with another substring within a larger string\noriginal_string = &quot;I love programming in Ruby&quot;\nreplaced_string = original_string.gsub(&quot;Ruby&quot;, &quot;Python&quot;)\n\n# Removing leading and trailing whitespace from a string\nwhitespace_string = &quot;   Some text with spaces   &quot;.strip\n\n# Converting a string to uppercase or lowercase\nuppercase_string = &quot;convert me to uppercase&quot;.upcase\nlowercase_string = &quot;CONVERT ME TO lowercase&quot;.downcase\n\n# Checking if a string contains a certain substring\nstring_to_check = &quot;This is a sample string&quot;\nsubstring = &quot;sample&quot;\ncontains_substring = string_to_check.include?(substring)\n\n# Finding the index of a specific substring within a larger string\nlarger_string = &quot;Finding a substring within a string&quot;\nsubstring_index = larger_string.index(&quot;substring&quot;)\n\n# Getting the length of a string\nlength_of_string = &quot;Count me&quot;.length\n\n# Reversing a string\noriginal_word = &quot;Ruby&quot;\nreversed_word = original_word.reverse\n\n# Formatting a string with placeholders for variables\nname = &quot;John&quot;\nage = 30\nformatted_string = &quot;My name is #{name} and I am #{age} years old&quot;\n\n# Parsing and manipulating data stored in a string format (such as JSON or XML)\nrequire &#x27;json&#x27;\njson_string = &#x27;{&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 25}&#x27;\nparsed_json = JSON.parse(json_string)\nname_from_json = parsed_json[&quot;name&quot;]\n\n# Generating a string representation of an object for debugging or logging\nclass Person\n  attr_accessor :name, :age\n\n  def initialize(name, age)\n    @name = name\n    @age = age\n  end\n\n  def to_s\n    &quot;Person: #{@name}, Age: #{@age}&quot;\n  end\nend\n\nperson = Person.new(&quot;Bob&quot;, 40)\nobject_string = person.to_s\n\n# Validating and sanitizing user input received as strings\ninput = &quot;User input&quot;\nsanitized_input = input.gsub(/[^a-zA-Z0-9\\s]/, &quot;&quot;)\n\n# Implementing algorithms like string matching, searching, or sorting\nsorted_strings = [&quot;banana&quot;, &quot;apple&quot;, &quot;cherry&quot;].sort\n\n# Print results for demonstration\nputs concatenated_string\nputs split_string\nputs replaced_string\nputs whitespace_string\nputs uppercase_string\nputs lowercase_string\nputs contains_substring\nputs substring_index\nputs length_of_string\nputs reversed_word\nputs formatted_string\nputs name_from_json\nputs object_string\nputs sanitized_input\nputs sorted_strings\n"
          }
        },
        "java": {
          "name": "java",
          "displayname": "Java",
          "comment": "#|//",
          "ext": "java",
          "css": "java",
          "categories": "programming",
          "snippets": {
            "arrays": "import java.util.Arrays;\n\npublic class ArrayExamples {\n\n    public static void main(String[] args) {\n        // Storing a collection of elements of the same data type\n        int[] intArray = {4, 6, 2, 8, 1};\n\n        // Accessing individual elements via index\n        int elementAtIndexTwo = intArray[2];\n\n        // Iterating over elements using loops\n        for (int i = 0; i &lt; intArray.length; i++) {\n            System.out.println(intArray[i]);\n        }\n\n        // Sorting elements in ascending order\n        Arrays.sort(intArray);\n\n        // Searching for a specific element within the array\n        int indexOfElement = Arrays.binarySearch(intArray, 6);\n\n        // Modifying elements at specific positions\n        intArray[3] = 10;\n\n        // Adding elements to the end of the array\n        int[] newArray = Arrays.copyOf(intArray, intArray.length + 1);\n        newArray[newArray.length - 1] = 5;\n\n        // Removing elements from the array\n        int[] smallerArray = Arrays.copyOfRange(intArray, 0, intArray.length - 1);\n        \n        // Merging two arrays into a single array\n        int[] secondArray = {3, 7, 9};\n        int[] mergedArray = new int[intArray.length + secondArray.length];\n        System.arraycopy(intArray, 0, mergedArray, 0, intArray.length);\n        System.arraycopy(secondArray, 0, mergedArray, intArray.length, secondArray.length);\n\n        // Splitting an array into multiple smaller arrays\n        int[][] splitArrays = {Arrays.copyOfRange(intArray, 0, 2), Arrays.copyOfRange(intArray, 2, intArray.length)};\n\n        // Finding the maximum element in the array\n        int maxElement = Arrays.stream(intArray).max().getAsInt();\n\n        // Filtering elements based on a condition\n        int[] filteredArray = Arrays.stream(intArray).filter(x -&gt; x &gt; 5).toArray();\n\n        // Mapping elements to a new value\n        int[] mappedArray = Arrays.stream(intArray).map(x -&gt; x * 2).toArray();\n\n        // Reversing the order of elements in the array\n        int[] reversedArray = new int[intArray.length];\n        for (int i = 0; i &lt; intArray.length; i++) {\n            reversedArray[i] = intArray[intArray.length - 1 - i];\n        }\n\n        // Calculating the sum of array elements\n        int sum = Arrays.stream(intArray).sum();\n\n        // Copying elements from one array to another\n        int[] copiedArray = Arrays.copyOf(intArray, intArray.length);\n\n        // Checking if an array contains a certain element\n        boolean containsElement = Arrays.stream(intArray).anyMatch(x -&gt; x == 2);\n\n        // Converting an array to a string\n        String arrayAsString = Arrays.toString(intArray);\n\n        // Creating multi-dimensional arrays for complex data structures\n        int[][] multiDimArray = new int[3][3];\n\n        // Implementing binary search using arrays\n        int searchValue = 6;\n        int binaryIndex = Arrays.binarySearch(intArray, searchValue);\n\n        // Print outputs for verification\n        System.out.println(&quot;Element at index 2: &quot; + elementAtIndexTwo);\n        System.out.println(&quot;Sorted Array: &quot; + Arrays.toString(intArray));\n        System.out.println(&quot;Index of element 6: &quot; + indexOfElement);\n        System.out.println(&quot;Modified Array: &quot; + Arrays.toString(intArray));\n        System.out.println(&quot;New Array with added element: &quot; + Arrays.toString(newArray));\n        System.out.println(&quot;Smaller Array: &quot; + Arrays.toString(smallerArray));\n        System.out.println(&quot;Merged Array: &quot; + Arrays.toString(mergedArray));\n        System.out.println(&quot;Split Arrays: &quot; + Arrays.deepToString(splitArrays));\n        System.out.println(&quot;Max Element: &quot; + maxElement);\n        System.out.println(&quot;Filtered Array: &quot; + Arrays.toString(filteredArray));\n        System.out.println(&quot;Mapped Array: &quot; + Arrays.toString(mappedArray));\n        System.out.println(&quot;Reversed Array: &quot; + Arrays.toString(reversedArray));\n        System.out.println(&quot;Sum of Array: &quot; + sum);\n        System.out.println(&quot;Copied Array: &quot; + Arrays.toString(copiedArray));\n        System.out.println(&quot;Array contains element 2: &quot; + containsElement);\n        System.out.println(&quot;Array as String: &quot; + arrayAsString);\n        System.out.println(&quot;Multi-dimensional Array: &quot; + Arrays.deepToString(multiDimArray));\n        System.out.println(&quot;Index of element 6 (Binary Search): &quot; + binaryIndex);\n    }\n}\n",
            "regexps": "// Java - RegexExamples.java\nimport java.util.regex.*;\n\npublic class RegexExamples {\n    public static void main(String[] args) {\n        // Pattern Matching\n        Pattern pattern = Pattern.compile(&quot;\\\\d+&quot;);  // Match one or more digits\n        String text = &quot;There are 123 apples&quot;;\n        Matcher matcher = pattern.matcher(text);\n        System.out.println(&quot;Pattern Matching: &quot; + (matcher.find() ? &quot;Match found!&quot; : &quot;No match found.&quot;));\n\n        // Search and Replace\n        text = &quot;Hello 123, meet 456&quot;;\n        String result = text.replaceAll(&quot;\\\\d+&quot;, &quot;number&quot;);\n        System.out.println(&quot;Search and Replace: &quot; + result);  // &quot;Hello number, meet number&quot;\n\n        // String Splitting\n        text = &quot;apple, orange; banana, grape&quot;;\n        String[] resultArray = text.split(&quot;[,;]&quot;);\n        System.out.println(&quot;String Splitting: &quot; + String.join(&quot;, &quot;, resultArray));  // [&quot;apple&quot;, &quot; orange&quot;, &quot; banana&quot;, &quot; grape&quot;]\n\n        // Extracting Substrings\n        text = &quot;The date is 2024-06-27&quot;;\n        pattern = Pattern.compile(&quot;(\\\\d{4})-(\\\\d{2})-(\\\\d{2})&quot;);\n        matcher = pattern.matcher(text);\n        if (matcher.find()) {\n            System.out.println(&quot;Extracting Substrings: &quot; + matcher.group(1) + &quot;, &quot; + matcher.group(2) + &quot;, &quot; + matcher.group(3));  // [&quot;2024&quot;, &quot;06&quot;, &quot;27&quot;]\n        }\n\n        // Validation\n        String email = &quot;example@test.com&quot;;\n        pattern = Pattern.compile(&quot;^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$&quot;);\n        matcher = pattern.matcher(email);\n        System.out.println(&quot;Validation: &quot; + (matcher.find() ? &quot;Valid email address!&quot; : &quot;Invalid email address.&quot;));\n\n        // Removing Unwanted Characters\n        text = &quot;Hello, World!&quot;;\n        result = text.replaceAll(&quot;[^\\\\w\\\\s]&quot;, &quot;&quot;);  // Remove all non-alphanumeric characters\n        System.out.println(&quot;Removing Unwanted Characters: &quot; + result);  // &quot;Hello World&quot;\n\n        // Anchoring Searches\n        text = &quot;The quick brown fox&quot;;\n        pattern = Pattern.compile(&quot;\\\\bfox\\\\b&quot;);  // Match &#x27;fox&#x27; as a whole word\n        matcher = pattern.matcher(text);\n        System.out.println(&quot;Anchoring Searches: &quot; + (matcher.find() ? &quot;Found&quot; : &quot;Not Found&quot;));\n\n        // Escaping Characters\n        String user_input = &quot;some[unsafe]input&quot;;\n        String escaped_input = Pattern.quote(user_input);\n        System.out.println(&quot;Escaping Characters: &quot; + escaped_input);  // &quot;some\\[unsafe\\]input&quot;\n\n        // Conditional Matching\n        pattern = Pattern.compile(&quot;foo(?=bar)&quot;);  // Match &#x27;foo&#x27; only if followed by &#x27;bar&#x27;\n        text = &quot;foobar and foo&quot;;\n        matcher = pattern.matcher(text);\n        while (matcher.find()) {\n            System.out.println(&quot;Conditional Matching: &quot; + matcher.group());  // &quot;foo&quot;\n        }\n    }\n}\n\n",
            "strings": "public class WorkingWithStrings {\n    public static void main(String[] args) {\n        // Concatenating two strings\n        String str1 = &quot;Hello&quot;;\n        String str2 = &quot;World&quot;;\n        String concatenatedString = str1 + &quot; &quot; + str2;\n        System.out.println(concatenatedString);\n\n        // Splitting a string\n        String sentence = &quot;This is a sample sentence&quot;;\n        String[] words = sentence.split(&quot; &quot;);\n        for (String word : words) {\n            System.out.println(word);\n        }\n\n        // Replacing a substring\n        String originalString = &quot;I love programming&quot;;\n        String replacedString = originalString.replace(&quot;programming&quot;, &quot;coding&quot;);\n        System.out.println(replacedString);\n\n        // Removing leading and trailing whitespace\n        String stringWithSpaces = &quot;  Trim this string  &quot;;\n        String trimmedString = stringWithSpaces.trim();\n        System.out.println(trimmedString);\n\n        // Converting to uppercase and lowercase\n        String lowercaseString = &quot;lowercase&quot;;\n        System.out.println(lowercaseString.toUpperCase());\n        String uppercaseString = &quot;UPPERCASE&quot;;\n        System.out.println(uppercaseString.toLowerCase());\n\n        // Checking if a string contains a substring\n        String mainString = &quot;Check if this contains a substring&quot;;\n        String substring = &quot;contains&quot;;\n        System.out.println(mainString.contains(substring));\n\n        // Finding the index of a specific substring\n        String longString = &quot;This is a long text with a word&quot;;\n        String wordToFind = &quot;word&quot;;\n        int index = longString.indexOf(wordToFind);\n        System.out.println(&quot;Index of &#x27;word&#x27;: &quot; + index);\n\n        // Getting the length of a string\n        String countMe = &quot;Count me!&quot;;\n        System.out.println(countMe.length());\n\n        // Reversing a string\n        String original = &quot;reverse&quot;;\n        StringBuilder reversed = new StringBuilder(original).reverse();\n        System.out.println(reversed);\n\n        // Formatting a string with placeholders\n        String formattedString = String.format(&quot;Hello, %s! Today is %dth day of the year.&quot;, &quot;John&quot;, 200);\n        System.out.println(formattedString);\n\n        // JSON manipulation\n        String json = &quot;{\\&quot;key\\&quot;:\\&quot;value\\&quot;}&quot;;\n        // Add library for JSON handling and perform manipulation here\n\n        // Logging object as string\n        Object obj = new Object();\n        System.out.println(&quot;Object as string: &quot; + obj.toString());\n\n        // Input validation and sanitization\n        String userInput = &quot;user input&quot;;\n        String sanitizedInput = userInput.replaceAll(&quot;[^a-zA-Z0-9]&quot;, &quot;&quot;);\n        System.out.println(&quot;Sanitized input: &quot; + sanitizedInput);\n\n        // String algorithms\n        String[] names = {&quot;Alice&quot;, &quot;Bob&quot;, &quot;Charlie&quot;};\n        Arrays.sort(names);\n        System.out.println(&quot;Sorted names: &quot; + Arrays.toString(names));\n    }\n}\n"
          }
        },
        "rust": {
          "name": "rust",
          "displayname": "Rust",
          "comment": "#|//",
          "ext": "rs",
          "css": "rust",
          "categories": "programming",
          "snippets": {
            "arrays": "// Create an empty vector to store elements of the same data type\nlet mut int_array: Vec&lt;i32&gt; = Vec::new();\n\n// Add elements to the end of the array\nint_array.push(5);\nint_array.push(10);\nint_array.push(3);\n\n// Access individual elements via index\nlet third_element = int_array[2];\n\n// Modify elements at specific positions\nint_array[1] = 20;\n\n// Iterate over elements using loops\nfor num in &amp;int_array {\n    println!(&quot;{}&quot;, num);\n}\n\n// Sorting elements in ascending order\nint_array.sort();\n\n// Searching for a specific element within the array\nlet index_of_10 = int_array.iter().position(|&amp;x| x == 10);\n\n// Removing elements from the array\nint_array.pop();\n\n// Merging two arrays into a single array\nlet mut second_array: Vec&lt;i32&gt; = vec![7, 8];\nint_array.extend(&amp;second_array);\n\n// Splitting an array into multiple smaller arrays\nlet split_arrays = int_array.chunks(2).collect::&lt;Vec&lt;_&gt;&gt;();\n\n// Finding the maximum element in the array\nlet max_element = int_array.iter().max();\n\n// Filtering elements based on a condition\nlet filtered_array: Vec&lt;i32&gt; = int_array.iter().filter(|&amp;x| x &gt; &amp;5).cloned().collect();\n\n// Mapping elements to a new value\nlet mapped_array: Vec&lt;i32&gt; = int_array.iter().map(|&amp;x| x * 2).collect();\n\n// Reversing the order of elements in the array\nint_array.reverse();\n\n// Calculating the sum of array elements\nlet sum: i32 = int_array.iter().sum();\n\n// Copying elements from one array to another\nlet copied_array: Vec&lt;i32&gt; = int_array.clone();\n\n// Checking if an array contains a certain element\nlet contains_20 = int_array.contains(&amp;20);\n\n// Converting an array to a string\nlet string_representation = int_array.iter().map(|&amp;x| x.to_string()).collect::&lt;Vec&lt;String&gt;&gt;();\n\n// Implementing binary search using sorted array\nint_array.sort();\nlet binary_search_result = int_array.binary_search(&amp;10);\n\n// Implementing quicksort\nfn quicksort(mut arr: Vec&lt;i32&gt;) -&gt; Vec&lt;i32&gt; {\n    if arr.len() &lt;= 1 {\n        return arr;\n    }\n    let pivot = arr.pop().unwrap();\n    let (less, greater): (Vec&lt;i32&gt;, Vec&lt;i32&gt;) = arr.into_iter().partition(|&amp;x| x &lt; pivot);\n    let mut sorted = quicksort(less);\n    sorted.push(pivot);\n    sorted.extend(quicksort(greater));\n    sorted\n}\n\nlet unsorted_array = vec![6, 3, 9, 12, 1];\nlet sorted_array = quicksort(unsorted_array);\n\nfn main() {\n    // Rust code for common array operations\n}\n",
            "regexps": "// Rust - regex_examples.rs\nextern crate regex;\nuse regex::Regex;\n\nfn main() {\n    // Pattern Matching\n    let pattern = Regex::new(r&quot;\\d+&quot;).unwrap();  // Match one or more digits\n    let text = &quot;There are 123 apples&quot;;\n    println!(&quot;Pattern Matching: {}&quot;, if pattern.is_match(text) { &quot;Match found!&quot; } else { &quot;No match found.&quot; });\n\n    // Search and Replace\n    let text = &quot;Hello 123, meet 456&quot;;\n    let result = pattern.replace_all(text, &quot;number&quot;);\n    println!(&quot;Search and Replace: {}&quot;, result);  // &quot;Hello number, meet number&quot;\n\n    // String Splitting\n    let text = &quot;apple, orange; banana, grape&quot;;\n    let pattern = Regex::new(r&quot;[ ,;]+&quot;).unwrap();\n    let result: Vec&lt;&amp;str&gt; = pattern.split(text).collect();\n    println!(&quot;String Splitting: {:?}&quot;, result);  // [&quot;apple&quot;, &quot;orange&quot;, &quot;banana&quot;, &quot;grape&quot;]\n\n    // Extracting Substrings\n    let log_entry = &quot;The date is 2024-06-27&quot;;\n    let pattern = Regex::new(r&quot;(\\d{4})-(\\d{2})-(\\d{2})&quot;).unwrap();\n    if let Some(caps) = pattern.captures(log_entry) {\n        println!(&quot;Extracting Substrings: {:?}&quot;, &amp;caps[1..4]);  // [&quot;2024&quot;, &quot;06&quot;, &quot;27&quot;]\n    }\n\n    // Validation\n    let email = &quot;example@test.com&quot;;\n    let pattern = Regex::new(r&quot;^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$&quot;).unwrap();\n    println!(&quot;Validation: {}&quot;, if pattern.is_match(email) { &quot;Valid email address!&quot; } else { &quot;Invalid email address.&quot; });\n\n    // Parsing Structured Text\n    let log_entry = &quot;127.0.0.1 - - [27/Jun/2024:10:00:00 +0000] \\&quot;GET /index.html HTTP/1.1\\&quot; 200 1234&quot;;\n    let pattern = Regex::new(r&quot;(?P&lt;ip&gt;\\d+\\.\\d+\\.\\d+\\.\\d+) - - \\[(?P&lt;date&gt;[^\\]]+)\\] \\&quot;(?P&lt;request&gt;[^\\&quot;]+)\\&quot; (?P&lt;status&gt;\\d+) (?P&lt;size&gt;\\d+)&quot;).unwrap();\n    if let Some(caps) = pattern.captures(log_entry) {\n        println!(&quot;Parsing Structured Text: {:?}&quot;, caps);\n    }\n\n    // Removing Unwanted Characters\n    let text = &quot;Hello, World!&quot;;\n    let pattern = Regex::new(r&quot;[^\\w\\s]&quot;).unwrap();  // Remove all non-alphanumeric characters\n    let cleaned_text = pattern.replace_all(text, &quot;&quot;);\n    println!(&quot;Removing Unwanted Characters: {}&quot;, cleaned_text);  // &quot;Hello World&quot;\n\n    // Anchoring Searches\n    let text = &quot;The quick brown fox&quot;;\n    let pattern = Regex::new(r&quot;\\bfox\\b&quot;).unwrap();  // Match &#x27;fox&#x27; as a whole word\n    println!(&quot;Anchoring Searches: {}&quot;, if pattern.is_match(text) { &quot;Found&quot; } else { &quot;Not Found&quot; });\n\n    // Escaping Characters\n    let user_input = &quot;some[unsafe]input&quot;;\n    let escaped_input = regex::escape(user_input);\n    let pattern = Regex::new(&amp;escaped_input).unwrap();\n    println!(&quot;Escaping Characters: {:?}&quot;, pattern);  // &quot;some\\[unsafe\\]input&quot;\n\n    // Conditional Matching\n    let pattern = Regex::new(r&quot;foo(?=bar)&quot;).unwrap();  // Match &#x27;foo&#x27; only if followed by &#x27;bar&#x27;\n    let text = &quot;foobar and foo&quot;;\n    let matches: Vec&lt;&amp;str&gt; = pattern.find_iter(text).map(|mat| mat.as_str()).collect();\n    println!(&quot;Conditional Matching: {:?}&quot;, matches);  // [&quot;foo&quot;]\n}\n\n",
            "strings": "fn main() {\n    // Concatenating two strings\n    let hello = &quot;Hello&quot;.to_string();\n    let world = &quot;World&quot;.to_string();\n    let combined = format!(&quot;{} {}&quot;, hello, world);\n    println!(&quot;{}&quot;, combined);\n\n    // Splitting a string\n    let sentence = &quot;The quick brown fox&quot;.to_string();\n    let words: Vec&lt;&amp;str&gt; = sentence.split(&quot; &quot;).collect();\n    println!(&quot;{:?}&quot;, words);\n\n    // Replacing a substring\n    let mut sentence = &quot;Hello, World!&quot;.to_string();\n    sentence = sentence.replace(&quot;World&quot;, &quot;Rust&quot;);\n    println!(&quot;{}&quot;, sentence);\n\n    // Removing leading and trailing whitespace\n    let sentence = &quot;   Trim me    &quot;.trim();\n    println!(&quot;{}&quot;, sentence);\n\n    // Converting a string to uppercase or lowercase\n    let sentence = &quot;Rust is Cool&quot;.to_string();\n    println!(&quot;{}&quot;, sentence.to_uppercase());\n    println!(&quot;{}&quot;, sentence.to_lowercase());\n\n    // Checking if a string contains a certain substring\n    let sentence = &quot;The rust programming language&quot;.to_string();\n    let is_contained = sentence.contains(&quot;rust&quot;);\n    println!(&quot;{}&quot;, is_contained);\n\n    // Finding the index of a substring\n    let sentence = &quot;Rust syntax is easy&quot;.to_string();\n    if let Some(index) = sentence.find(&quot;syntax&quot;) {\n        println!(&quot;{}&quot;, index);\n    }\n\n    // Getting the length of a string\n    let sentence = &quot;Length of this sentence&quot;.to_string();\n    println!(&quot;{}&quot;, sentence.len());\n\n    // Reversing a string\n    let sentence = &quot;reverse&quot;.chars().rev().collect::&lt;String&gt;();\n    println!(&quot;{}&quot;, sentence);\n\n    // Formatting a string with placeholders\n    let name = &quot;Alice&quot;;\n    let age = 25;\n    let sentence = format!(&quot;My name is {} and I am {} years old.&quot;, name, age);\n    println!(&quot;{}&quot;, sentence);\n\n    // Parsing and manipulating data stored in JSON format\n    use serde_json::Value;\n    let json_data = r#&quot;{&quot;name&quot;: &quot;Bob&quot;, &quot;age&quot;: 30}&quot;#;\n    let parsed_json: Value = serde_json::from_str(json_data).unwrap();\n    println!(&quot;{}&quot;, parsed_json);\n\n    // Generating a string representation of an object\n    #[derive(Debug)]\n    struct Person {\n        name: String,\n        age: u32,\n    }\n    let alice = Person { name: &quot;Alice&quot;.to_string(), age: 30 };\n    println!(&quot;{:?}&quot;, alice);\n\n    // Validating and sanitizing user input\n    let user_input = &quot;User input &lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;.to_string();\n    let sanitized_input = user_input.replace(&quot;&lt;&quot;, &quot;&amp;lt;&quot;).replace(&quot;&gt;&quot;, &quot;&amp;gt;&quot;);\n    println!(&quot;{}&quot;, sanitized_input);\n\n    // String matching, searching, or sorting\n    let sentence = &quot;The quick brown fox jumps over the lazy dog&quot;.to_string();\n    let searched_word = &quot;fox&quot;;\n    let found_index = sentence.find(searched_word);\n    println!(&quot;{}&quot;, found_index.is_some());\n\n    let mut words = sentence.split(&quot; &quot;).collect::&lt;Vec&lt;&amp;str&gt;&gt;();\n    words.sort();\n    println!(&quot;{:?}&quot;, words);\n}\n"
          }
        },
        "python": {
          "name": "python",
          "displayname": "Python",
          "comment": "#|//",
          "ext": "py",
          "css": "python",
          "categories": "programming",
          "openai": "Please exclude 3rd party libraries such as numpy and others.",
          "snippets": {
            "arrays": "# Storing a collection of elements of the same data type\nmyArray = [1, 2, 3, 4, 5]\n\n# Accessing individual elements via index\nprint(myArray[2])\n\n# Iterating over elements using loops\nfor element in myArray:\n    print(element)\n\n# Sorting elements in ascending or descending order\nsortedArray = sorted(myArray)\nreversedArray = sorted(myArray, reverse=True)\n\n# Searching for a specific element within the array\nif 3 in myArray:\n    print(&quot;Element found&quot;)\n\n# Modifying elements at specific positions\nmyArray[1] = 10\n\n# Adding elements to the end of the array\nmyArray.append(6)\n\n# Removing elements from the array\nmyArray.remove(4)\n\n# Merging two arrays into a single array\nnewArray = myArray + [7, 8, 9]\n\n# Splitting an array into multiple smaller arrays\nsplitArray = [myArray[i:i+2] for i in range(0, len(myArray), 2)]\n\n# Finding the maximum or minimum element in the array\nmaxElement = max(myArray)\nminElement = min(myArray)\n\n# Filtering elements based on a condition\nfilteredArray = [x for x in myArray if x &gt; 2]\n\n# Mapping elements to a new value\nmappedArray = [x*2 for x in myArray]\n\n# Reversing the order of elements in the array\nreversedOrderArray = myArray[::-1]\n\n# Calculating the sum or average of array elements\nsumArray = sum(myArray)\naverageArray = sum(myArray) / len(myArray)\n\n# Copying elements from one array to another\ncopiedArray = myArray.copy()\n\n# Checking if an array contains a certain element\nif 6 in myArray:\n    print(&quot;Element exists in the array&quot;)\n\n# Converting an array to a string or vice versa\nstringArray = &quot;,&quot;.join(map(str, myArray))\nconvertedArray = list(map(int, stringArray.split(&quot;,&quot;)))\n\n# Creating multi-dimensional arrays for complex data structures\nmultiArray = [[1, 2], [3, 4], [5, 6]]\n\n# Implementing algorithms like binary search or quicksort using arrays\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left &lt;= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] &lt; target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\nprint(binary_search(sorted(myArray), 3))\n",
            "regexps": "# Python - regex_examples.py\nimport re\n\n# Pattern Matching\npattern = r&#x27;\\d+&#x27;  # Match one or more digits\ntext = &quot;There are 123 apples&quot;\nmatch = re.search(pattern, text)\nprint(&quot;Pattern Matching:&quot;, &quot;Match found!&quot; if match else &quot;No match found.&quot;)\n\n# Search and Replace\ntext = &quot;Hello 123, meet 456&quot;\nresult = re.sub(r&#x27;\\d+&#x27;, &#x27;number&#x27;, text)\nprint(&quot;Search and Replace:&quot;, result)  # &quot;Hello number, meet number&quot;\n\n# String Splitting\ntext = &quot;apple, orange; banana, grape&quot;\nresult = re.split(r&#x27;[,;]&#x27;, text)\nprint(&quot;String Splitting:&quot;, result)  # [&quot;apple&quot;, &quot; orange&quot;, &quot; banana&quot;, &quot; grape&quot;]\n\n# Extracting Substrings\nlog_entry = &quot;The date is 2024-06-27&quot;\npattern = r&#x27;(\\d{4})-(\\d{2})-(\\d{2})&#x27;\nmatch = re.search(pattern, log_entry)\nif match:\n    print(&quot;Extracting Substrings:&quot;, match.groups())  # (&quot;2024&quot;, &quot;06&quot;, &quot;27&quot;)\n\n# Validation\nemail = &quot;example@test.com&quot;\npattern = r&#x27;^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$&#x27;\nif re.match(pattern, email):\n    print(&quot;Validation: Valid email address!&quot;)\nelse:\n    print(&quot;Validation: Invalid email address.&quot;)\n\n# Parsing Structured Text\nlog_entry = &quot;127.0.0.1 - - [27/Jun/2024:10:00:00 +0000] \\&quot;GET /index.html HTTP/1.1\\&quot; 200 1234&quot;\npattern = r&#x27;(?P&lt;ip&gt;\\d+\\.\\d+\\.\\d+\\.\\d+) - - \\[(?P&lt;date&gt;[^\\]]+)\\] &quot;(?P&lt;request&gt;[^&quot;]+)&quot; (?P&lt;status&gt;\\d+) (?P&lt;size&gt;\\d+)&#x27;\nmatch = re.match(pattern, log_entry)\nif match:\n    print(&quot;Parsing Structured Text:&quot;, match.groupdict())\n\n# Removing Unwanted Characters\ntext = &quot;Hello, World!&quot;\ncleaned_text = re.sub(r&#x27;[^\\w\\s]&#x27;, &#x27;&#x27;, text)  # Remove all non-alphanumeric characters\nprint(&quot;Removing Unwanted Characters:&quot;, cleaned_text)  # &quot;Hello World&quot;\n\n# Anchoring Searches\ntext = &quot;The quick brown fox&quot;\npattern = r&#x27;\\bfox\\b&#x27;  # Match &#x27;fox&#x27; as a whole word\nmatch = re.search(pattern, text)\nprint(&quot;Anchoring Searches:&quot;, &quot;Found&quot; if match else &quot;Not Found&quot;)\n\n# Escaping Characters\nuser_input = &quot;some[unsafe]input&quot;\nescaped_input = re.escape(user_input)\npattern = rf&#x27;{escaped_input}&#x27;\nprint(&quot;Escaping Characters:&quot;, pattern)  # &quot;some\\[unsafe\\]input&quot;\n\n# Conditional Matching\npattern = r&#x27;foo(?=bar)&#x27;  # Match &#x27;foo&#x27; only if followed by &#x27;bar&#x27;\ntext = &quot;foobar and foo&quot;\nmatches = re.findall(pattern, text)\nprint(&quot;Conditional Matching:&quot;, matches)  # [&quot;foo&quot;]\n\n",
            "strings": "# Concatenating two strings together to create a longer string\nstr1 = &quot;Hello&quot;\nstr2 = &quot;World&quot;\nconcatenated_str = str1 + &quot; &quot; + str2\nprint(concatenated_str)\n\n# Splitting a string into an array of substrings based on a delimiter\nsentence = &quot;Python,is,awesome&quot;\nsplit_array = sentence.split(&quot;,&quot;)\nprint(split_array)\n\n# Replacing a specific substring with another substring within a larger string\noriginal_str = &quot;I love programming&quot;\nnew_str = original_str.replace(&quot;programming&quot;, &quot;coding&quot;)\nprint(new_str)\n\n# Removing leading and trailing whitespace from a string\nwhitespace_str = &quot;   Python   &quot;\ntrimmed_str = whitespace_str.strip()\nprint(trimmed_str)\n\n# Converting a string to uppercase or lowercase\noriginal_case_str = &quot;Hello, World!&quot;\nupper_str = original_case_str.upper()\nlower_str = original_case_str.lower()\nprint(upper_str)\nprint(lower_str)\n\n# Checking if a string contains a certain substring\ncheck_str = &quot;Python is awesome&quot;\nsubstring = &quot;Python&quot;\nif substring in check_str:\n    print(&quot;Substring found!&quot;)\n\n# Finding the index of a specific substring within a larger string\nindex_str = &quot;Python is easy to learn&quot;\nsubstring_index = index_str.index(&quot;easy&quot;)\nprint(substring_index)\n\n# Getting the length of a string\nlength_str = &quot;Python&quot;\nstr_length = len(length_str)\nprint(str_length)\n\n# Reversing a string\nreverse_str = &quot;hello&quot;\nreversed_str = reverse_str[::-1]\nprint(reversed_str)\n\n# Formatting a string with placeholders for variables\nname = &quot;Alice&quot;\nage = 30\nformatted_str = &quot;My name is {} and I am {} years old&quot;.format(name, age)\nprint(formatted_str)\n\n# Parsing and manipulating data stored in a string format (such as JSON or XML)\nimport json\njson_data = &#x27;{&quot;name&quot;: &quot;Bob&quot;, &quot;age&quot;: 25}&#x27;\nparsed_data = json.loads(json_data)\nprint(parsed_data)\n\n# Generating a string representation of an object for debugging or logging\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __str__(self):\n        return f&quot;Person(name={self.name}, age={self.age})&quot;\n\nperson_obj = Person(&quot;Alice&quot;, 30)\nprint(person_obj)\n\n# Validating and sanitizing user input received as strings\nuser_input = &quot; user@domain.com &quot;\nsanitized_input = user_input.strip().lower()\nif &quot;@&quot; in sanitized_input and &quot;.&quot; in sanitized_input:\n    print(&quot;Valid email address&quot;)\n\n# Implementing algorithms like string matching, searching, or sorting\nfrom difflib import SequenceMatcher\n\nstr1 = &quot;programming&quot;\nstr2 = &quot;programming is fun&quot;\nratio = SequenceMatcher(None, str1, str2).ratio()\nprint(f&quot;Similarity ratio: {ratio}&quot;)\n"
          }
        },
        "bash": {
          "name": "bash",
          "displayname": "Bash (Shell) Script",
          "comment": "#|//",
          "ext": "sh",
          "css": "bash",
          "categories": "programming",
          "ignore": "bin/bash",
          "snippets": {
            "arrays": "#!/bin/bash\n\n# Storing a collection of elements of the same data type\nfruit_array=(&quot;apple&quot; &quot;banana&quot; &quot;orange&quot;)\n\n# Accessing individual elements via index\necho &quot;First fruit: ${fruit_array[0]}&quot;\n\n# Iterating over elements using loops\nfor fruit in &quot;${fruit_array[@]}&quot;\ndo\n    echo &quot;Fruit: $fruit&quot;\ndone\n\n# Sorting elements in ascending order\nsorted_array=($(echo &quot;${fruit_array[@]}&quot; | tr &#x27; &#x27; &#x27;\\n&#x27; | sort))\n\n# Searching for a specific element within the array\nif [[ &quot; ${fruit_array[@]} &quot; =~ &quot; banana &quot; ]]; then\n    echo &quot;Banana found in array&quot;\nfi\n\n# Modifying elements at specific positions\nfruit_array[1]=&quot;grape&quot;\necho &quot;New second fruit: ${fruit_array[1]}&quot;\n\n# Adding elements to the end of the array\nfruit_array+=(&quot;watermelon&quot;)\n\n# Removing elements from the array\nunset fruit_array[2]\n\n# Merging two arrays into a single array\nmore_fruits=(&quot;peach&quot; &quot;kiwi&quot;)\ncombined_array=(&quot;${fruit_array[@]}&quot; &quot;${more_fruits[@]}&quot;)\n\n# Splitting an array into multiple smaller arrays\nsmaller_arrays=()\nfor i in $(seq 0 2 $((${#combined_array[@]} - 1)))\ndo\n    smaller_arrays+=(&quot;${combined_array[@]:$i:2}&quot;)\ndone\n\n# Finding the maximum element in the array\nmax_element=$(printf &quot;%s\\n&quot; &quot;${combined_array[@]}&quot; | sort -nr | head -1)\necho &quot;Max element: $max_element&quot;\n\n# Filtering elements based on a condition\nfiltered_array=()\nfor fruit in &quot;${combined_array[@]}&quot;\ndo\n    if [[ $fruit != &quot;grape&quot; ]]; then\n        filtered_array+=(&quot;$fruit&quot;)\n    fi\ndone\n\n# Reversing the order of elements in the array\nreversed_array=()\nfor ((i=${#combined_array[@]}-1; i&gt;=0; i--))\ndo\n    reversed_array+=(&quot;${combined_array[$i]}&quot;)\ndone\n\n# Calculating the sum of array elements\nsum=0\nfor num in {1..10}\ndo\n    sum=$((sum + num))\ndone\necho &quot;Sum of numbers 1 to 10 is: $sum&quot;\n\n# Copying elements from one array to another\ncopied_array=(&quot;${combined_array[@]}&quot;)\n\n# Checking if an array contains a certain element\nif [[ &quot; ${combined_array[@]} &quot; =~ &quot; kiwi &quot; ]]; then\n    echo &quot;Kiwi found in array&quot;\nfi\n\n# Converting an array to a string\narray_string=$(IFS=,; echo &quot;${combined_array[*]}&quot;)\necho &quot;Array as string: $array_string&quot;\n\n# Creating multi-dimensional arrays for complex data structures\nmulti_array=([&quot;key1&quot;]=&quot;value1&quot; [&quot;key2&quot;]=&quot;value2&quot;)\n\n# Displaying array elements\necho &quot;Combined array: ${combined_array[@]}&quot;\necho &quot;Filtered array: ${filtered_array[@]}&quot;\necho &quot;Reversed array: ${reversed_array[@]}&quot;\necho &quot;Copied array: ${copied_array[@]}&quot;\necho &quot;Multi-dimensional array: ${multi_array[&quot;key1&quot;]} ${multi_array[&quot;key2&quot;]}&quot;\n```\n",
            "regexps": "#!/bin/bash\n# Bash - regex_examples.sh\n\n# Pattern Matching\ntext=&quot;There are 123 apples&quot;\nif [[ $text =~ [0-9]+ ]]; then\n    echo &quot;Pattern Matching: Match found!&quot;\nelse\n    echo &quot;Pattern Matching: No match found.&quot;\nfi\n\n# Search and Replace\ntext=&quot;Hello 123, meet 456&quot;\nresult=$(echo &quot;$text&quot; | sed -E &#x27;s/[0-9]+/number/g&#x27;)\necho &quot;Search and Replace: $result&quot;  # &quot;Hello number, meet number&quot;\n\n# String Splitting\ntext=&quot;apple, orange; banana, grape&quot;\nIFS=&#x27;,;&#x27; read -ra result &lt;&lt;&lt; &quot;$text&quot;\necho &quot;String Splitting: ${result[@]}&quot;  # [&quot;apple&quot;, &quot; orange&quot;, &quot; banana&quot;, &quot; grape&quot;]\n\n# Extracting Substrings\ntext=&quot;The date is 2024-06-27&quot;\nif [[ $text =~ ([0-9]{4})-([0-9]{2})-([0-9]{2}) ]]; then\n    echo &quot;Extracting Substrings: ${BASH_REMATCH[1]}, ${BASH_REMATCH[2]}, ${BASH_REMATCH[3]}&quot;  # [&quot;2024&quot;, &quot;06&quot;, &quot;27&quot;]\nfi\n\n# Validation\nemail=&quot;example@test.com&quot;\nif [[ $email =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$ ]]; then\n    echo &quot;Validation: Valid email address!&quot;\nelse\n    echo &quot;Validation: Invalid email address.&quot;\nfi\n\n# Removing Unwanted Characters\ntext=&quot;Hello, World!&quot;\ncleaned_text=$(echo &quot;$text&quot; | sed &#x27;s/[^a-zA-Z0-9 ]//g&#x27;)\necho &quot;Removing Unwanted Characters: $cleaned_text&quot;  # &quot;Hello World&quot;\n\n# Anchoring Searches\ntext=&quot;The quick brown fox&quot;\nif [[ $text =~ \\bfox\\b ]]; then\n    echo &quot;Anchoring Searches: Found&quot;\nelse\n    echo &quot;Anchoring Searches: Not Found&quot;\nfi\n\n# Escaping Characters\nuser_input=&quot;some[unsafe]input&quot;\nescaped_input=$(printf &#x27;%s\\n&#x27; &quot;$user_input&quot; | sed -e &#x27;s/[]\\/$*.^|[]/\\\\&amp;/g&#x27;)\necho &quot;Escaping Characters: $escaped_input&quot;  # &quot;some\\[unsafe\\]input&quot;\n\n# Conditional Matching\ntext=&quot;foobar and foo&quot;\npattern=&quot;foo(?=bar)&quot;\nif [[ $text =~ foo(bar) ]]; then\n    echo &quot;Conditional Matching: ${BASH_REMATCH[0]}&quot;  # &quot;foo&quot;\nfi\n\n",
            "strings": "#!/bin/bash\n\n# Concatenating two strings together\nfirst_string=&quot;Hello&quot;\nsecond_string=&quot;World&quot;\nconcatenated_string=&quot;$first_string $second_string&quot;\necho &quot;Concatenated String: $concatenated_string&quot;\n\n# Splitting a string into an array of substrings based on a delimiter\nsplit_string=&quot;apple,banana,orange&quot;\nIFS=&#x27;,&#x27; read -ra split_array &lt;&lt;&lt; &quot;$split_string&quot;\necho &quot;Split Array:&quot;\nprintf &#x27;%s\\n&#x27; &quot;${split_array[@]}&quot;\n\n# Replacing a specific substring within a larger string\noriginal_string=&quot;Hello World&quot;\nreplaced_string=&quot;${original_string/Hello/Hi}&quot;\necho &quot;Replaced String: $replaced_string&quot;\n\n# Removing leading and trailing whitespace from a string\nwhitespace_string=&quot;   Trimmed String   &quot;\ntrimmed_string=&quot;${whitespace_string#&quot;${whitespace_string%%[![:space:]]*}&quot;}&quot;\ntrimmed_string=&quot;${trimmed_string%&quot;${trimmed_string##*[![:space:]]}&quot;}&quot;\necho &quot;Trimmed String: $trimmed_string&quot;\n\n# Converting a string to uppercase or lowercase\nuppercase_string=&quot;uppercase&quot;\nlowercase_string=&quot;LOWERCASE&quot;\nuppercase_result=&quot;${uppercase_string^^}&quot;\nlowercase_result=&quot;${lowercase_string,,}&quot;\necho &quot;Uppercase Result: $uppercase_result&quot;\necho &quot;Lowercase Result: $lowercase_result&quot;\n\n# Checking if a string contains a certain substring\ncheck_string=&quot;This is a test&quot;\nsubstring=&quot;test&quot;\nif [[ $check_string == *&quot;$substring&quot;* ]]; then\n  echo &quot;Substring &#x27;$substring&#x27; found in &#x27;$check_string&#x27;&quot;\nelse\n  echo &quot;Substring &#x27;$substring&#x27; not found in &#x27;$check_string&#x27;&quot;\nfi\n\n# Finding the index of a specific substring within a larger string\nindex_string=&quot;Find me in this string&quot;\nsubstring=&quot;in&quot;\nindex=${index_string%%&quot;$substring&quot;*}\necho &quot;Index of &#x27;$substring&#x27; in &#x27;$index_string&#x27;: ${#index}&quot;\n\n# Getting the length of a string\nlength_string=&quot;Calculate Length&quot;\nlength=${#length_string}\necho &quot;Length of &#x27;$length_string&#x27;: $length&quot;\n\n# Reversing a string\nstring_to_reverse=&quot;Reverse Me&quot;\nreversed_string=$(echo &quot;$string_to_reverse&quot; | rev)\necho &quot;Reversed String: $reversed_string&quot;\n\n# Formatting a string with placeholders for variables\nname=&quot;Alice&quot;\nage=30\nformatted_string=&quot;Name: %s, Age: %d&quot;\nprintf &quot;$formatted_string\\n&quot; &quot;$name&quot; &quot;$age&quot;\n\n# Parsing and manipulating data stored in a string format (such as JSON or XML)\njson_data=&#x27;{&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 25}&#x27;\nparsed_name=$(echo &quot;$json_data&quot; | jq -r &#x27;.name&#x27;)\necho &quot;Parsed Name: $parsed_name&quot;\n\n# Generating a string representation of an object for debugging or logging\nobject_variable=&quot;Some object data&quot;\necho &quot;Object: $object_variable&quot;\n\n# Validating and sanitizing user input received as strings\nuser_input=&quot;   User Input   &quot;\nsanitized_input=&quot;$(echo -e &quot;${user_input}&quot; | tr -d &#x27;[:space:]&#x27;)&quot;\necho &quot;Sanitized User Input: $sanitized_input&quot;\n\n# Implementing algorithms like string matching, searching, or sorting (Example of string matching)\ninput_string=&quot;Hello World&quot;\nif [[ $input_string == &quot;Hello&quot;* ]]; then\n  echo &quot;String starts with &#x27;Hello&#x27;&quot;\nfi\n```\n"
          }
        },
        "httpjs": {
          "name": "httpjs",
          "displayname": "HTTP JavaScript",
          "comment": "#|//",
          "ext": "js",
          "inherits": "js",
          "css": "javascript",
          "categories": "programming",
          "snippets": {
            "arrays": "[\n  &quot;// Storing a collection of elements of the same data type&quot;,\n  &quot;let numbersArray = [1, 2, 3, 4, 5];&quot;,\n  \n  &quot;// Accessing individual elements via index&quot;,\n  &quot;let elementAtIndex = numbersArray[2]; // Accessing element at index 2&quot;,\n  \n  &quot;// Iterating over elements using loops&quot;,\n  &quot;for(let i = 0; i &lt; numbersArray.length; i++){&quot;,\n  &quot;  console.log(numbersArray[i]); // Log each element in the array&quot;,\n  &quot;}&quot;,\n  \n  &quot;// Sorting elements in ascending order&quot;,\n  &quot;numbersArray.sort((a, b) =&gt; a - b);&quot;,\n  \n  &quot;// Searching for a specific element within the array&quot;,\n  &quot;let indexOfElement = numbersArray.indexOf(3); // Searching for element 3&quot;,\n  \n  &quot;// Modifying elements at specific positions&quot;,\n  &quot;numbersArray[1] = 10; // Modify element at index 1 to 10&quot;,\n  \n  &quot;// Adding elements to the end of the array&quot;,\n  &quot;numbersArray.push(6); // Add element 6 to the end of the array&quot;,\n  \n  &quot;// Removing elements from the array&quot;,\n  &quot;numbersArray.splice(2, 1); // Remove one element starting from index 2&quot;,\n  \n  &quot;// Merging two arrays into a single array&quot;,\n  &quot;let secondArray = [7, 8, 9];&quot;,\n  &quot;let mergedArray = numbersArray.concat(secondArray); // Merge the two arrays&quot;,\n  \n  &quot;// Splitting an array into multiple smaller arrays&quot;,\n  &quot;let splitArray = [];&quot;,\n  &quot;while(numbersArray.length){&quot;,\n  &quot;  splitArray.push(numbersArray.splice(0, 2)); // Split into arrays of maximum 2 elements&quot;,\n  &quot;}&quot;,\n  \n  &quot;// Finding the maximum element in the array&quot;,\n  &quot;let maxElement = Math.max(...numbersArray);&quot;,\n  \n  &quot;// Filtering elements based on a condition&quot;,\n  &quot;let filteredArray = numbersArray.filter(num =&gt; num &gt; 3); // Filter elements greater than 3&quot;,\n  \n  &quot;// Mapping elements to a new value&quot;,\n  &quot;let mappedArray = numbersArray.map(num =&gt; num * 2); // Double each element&quot;,\n  \n  &quot;// Reversing the order of elements in the array&quot;,\n  &quot;numbersArray.reverse();&quot;,\n  \n  &quot;// Calculating the sum of array elements&quot;,\n  &quot;let sum = numbersArray.reduce((acc, curr) =&gt; acc + curr, 0);&quot;,\n  \n  &quot;// Copying elements from one array to another&quot;,\n  &quot;let copiedArray = [...numbersArray];&quot;,\n  \n  &quot;// Checking if an array contains a certain element&quot;,\n  &quot;let hasElement = numbersArray.includes(4); // Check if array contains 4&quot;,\n  \n  &quot;// Converting an array to a string&quot;,\n  &quot;let stringArray = numbersArray.join(&#x27;, &#x27;);&quot;,\n  \n  &quot;// Creating multi-dimensional arrays&quot;,\n  &quot;let multiArray = [[1, 2], [3, 4], [5, 6]]; // 2D array&quot;,\n  \n  &quot;// Implementing algorithms like binary search using arrays&quot;,\n  &quot;// Function to perform binary search on a sorted array&quot;,\n  &quot;function binarySearch(arr, target){&quot;,\n  &quot;  let left = 0;&quot;,\n  &quot;  let right = arr.length - 1;&quot;,\n  &quot;  while(left &lt;= right){&quot;,\n  &quot;    let mid = Math.floor((left + right) / 2);&quot;,\n  &quot;    if(arr[mid] === target) return mid;&quot;,\n  &quot;    else if(arr[mid] &lt; target) left = mid + 1;&quot;,\n  &quot;    else right = mid - 1;&quot;,\n  &quot;  }&quot;,\n  &quot;  return -1; // Target not found&quot;,\n  &quot;}&quot;\n]",
            "strings": "// Concatenating two strings together to create a longer string\nconst str1 = &quot;Hello&quot;;\nconst str2 = &quot;World&quot;;\nconst concatenatedStr = str1 + &quot; &quot; + str2;\n\n// Splitting a string into an array of substrings based on a delimiter\nconst originalString = &quot;apple,banana,orange&quot;;\nconst splitArr = originalString.split(&quot;,&quot;);\n\n// Replacing a specific substring with another substring within a larger string\nconst originalStr = &quot;I like cats&quot;;\nconst replacedStr = originalStr.replace(&quot;cats&quot;, &quot;dogs&quot;);\n\n// Removing leading and trailing whitespace from a string\nconst stringWithWhitespace = &quot;  Trim Me!    &quot;;\nconst trimmedStr = stringWithWhitespace.trim();\n\n// Converting a string to uppercase or lowercase\nconst originalLowercaseStr = &quot;hello world&quot;;\nconst uppercaseStr = originalLowercaseStr.toUpperCase();\n\n// Checking if a string contains a certain substring\nconst checkStr = &quot;The quick brown fox&quot;;\nconst containsFox = checkStr.includes(&quot;fox&quot;);\n\n// Finding the index of a specific substring within a larger string\nconst largeStr = &quot;Jumps over the lazy dog&quot;;\nconst indexOfDog = largeStr.indexOf(&quot;dog&quot;);\n\n// Getting the length of a string\nconst poem = &quot;Roses are red, violets are blue&quot;;\nconst poemLength = poem.length;\n\n// Reversing a string\nconst original = &quot;hello&quot;;\nconst reversedStr = original.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;);\n\n// Formatting a string with placeholders for variables\nconst name = &quot;Alice&quot;;\nconst age = 30;\nconst formattedStr = `Hello, my name is ${name} and I am ${age} years old`;\n\n// Parsing and manipulating data stored in a string format (such as JSON or XML)\nconst jsonString = &#x27;{&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 30}&#x27;;\nconst parsedData = JSON.parse(jsonString);\n\n// Generating a string representation of an object for debugging or logging\nclass Person {\n    constructor(name, age) {\n        this.name = name;\n        this.age = age;\n    }\n}\n\nconst person = new Person(&quot;Bob&quot;, 25);\nconst personStr = JSON.stringify(person);\n\n// Validating and sanitizing user input received as strings\nfunction sanitizeInput(input) {\n    return input.trim(); // Example of trimming input\n}\n\n// Implementing algorithms like string matching, searching, or sorting\nconst searchStr = &quot;The quick brown fox jumps over the lazy dog&quot;;\nconst searchTerm = &quot;fox&quot;;\nconst foundIndex = searchStr.indexOf(searchTerm);\n\n"
          }
        },
        "dart": {
          "name": "dart",
          "displayname": "Dart",
          "comment": "#|//",
          "ext": "dart",
          "css": "dart",
          "categories": "programming",
          "snippets": {
            "arrays": "void main() {\n  // Storing a collection of elements of the same data type\n  List&lt;int&gt; numbers = [1, 2, 3, 4, 5];\n\n  // Accessing individual elements via index\n  int elementAtIndex2 = numbers[2];\n  \n  // Iterating over elements using loops\n  for (int i = 0; i &lt; numbers.length; i++) {\n    print(numbers[i]);\n  }\n\n  // Sorting elements in ascending order\n  numbers.sort();\n\n  // Searching for a specific element within the array\n  int searchElement = 4;\n  bool isPresent = numbers.contains(searchElement);\n\n  // Modifying elements at specific positions\n  numbers[3] = 10;\n\n  // Adding elements to the end of the array\n  numbers.add(6);\n\n  // Removing elements from the array\n  numbers.remove(2);\n\n  // Merging two arrays into a single array\n  List&lt;int&gt; otherNumbers = [7, 8, 9];\n  List&lt;int&gt; mergedNumbers = [...numbers, ...otherNumbers];\n\n  // Splitting an array into multiple smaller arrays\n  List&lt;List&lt;int&gt;&gt; chunks = [];\n  for (var i = 0; i &lt; numbers.length; i += 2) {\n    chunks.add(numbers.sublist(i, i + 2));\n  }\n\n  // Finding the maximum or minimum element in the array\n  int maxElement = numbers.reduce((current, next) =&gt; current &gt; next ? current : next);\n  int minElement = numbers.reduce((current, next) =&gt; current &lt; next ? current : next);\n\n  // Filtering elements based on a condition\n  List&lt;int&gt; evenNumbers = numbers.where((element) =&gt; element % 2 == 0).toList();\n\n  // Mapping elements to a new value\n  List&lt;int&gt; squaredNumbers = numbers.map((element) =&gt; element * element).toList();\n\n  // Reversing the order of elements in the array\n  numbers = numbers.reversed.toList();\n\n  // Calculating the sum or average of array elements\n  int sum = numbers.reduce((value, element) =&gt; value + element);\n  double average = sum / numbers.length;\n\n  // Copying elements from one array to another\n  List&lt;int&gt; copiedNumbers = List.from(numbers);\n\n  // Checking if an array contains a certain element\n  bool containsElement = numbers.contains(4);\n\n  // Converting an array to a string\n  String numbersString = numbers.join(&quot;, &quot;);\n\n  // Creating multi-dimensional arrays for complex data structures\n  List&lt;List&lt;int&gt;&gt; matrix = [\n    [1, 2],\n    [3, 4]\n  ];\n\n  // Implementing binary search algorithm using arrays\n  int binarySearch(List&lt;int&gt; array, int target) {\n    int low = 0;\n    int high = array.length - 1;\n\n    while (low &lt;= high) {\n      int mid = (low + high) ~/ 2;\n\n      if (array[mid] == target) {\n        return mid;\n      } else if (array[mid] &lt; target) {\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n    }\n\n    return -1; // Element not found\n  }\n\n  // Implementing quicksort algorithm using arrays\n  void quickSort(List&lt;int&gt; array, int left, int right) {\n    if (left &lt; right) {\n      int partitionIndex = partition(array, left, right);\n\n      quickSort(array, left, partitionIndex - 1);\n      quickSort(array, partitionIndex + 1, right);\n    }\n  }\n\n  int partition(List&lt;int&gt; array, int left, int right) {\n    int pivot = array[right];\n    int i = left - 1;\n\n    for (int j = left; j &lt; right; j++) {\n      if (array[j] &lt; pivot) {\n        i++;\n        int temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n      }\n    }\n\n    int temp = array[i + 1];\n    array[i + 1] = array[right];\n    array[right] = temp;\n\n    return i + 1;\n  }\n\n  // Testing binary search\n  print(binarySearch(numbers, elementAtIndex2));\n\n  // Testing quicksort\n  quickSort(numbers, 0, numbers.length - 1);\n}\n",
            "regexps": "// Dart - regex_examples.dart\nvoid main() {\n  // Pattern Matching\n  String pattern = r&#x27;\\d+&#x27;;  // Match one or more digits\n  String text = &#x27;There are 123 apples&#x27;;\n  RegExp regExp = RegExp(pattern);\n  print(&#x27;Pattern Matching: ${regExp.hasMatch(text) ? &quot;Match found!&quot; : &quot;No match found.&quot;}&#x27;);\n\n  // Search and Replace\n  text = &#x27;Hello 123, meet 456&#x27;;\n  String result = text.replaceAll(regExp, &#x27;number&#x27;);\n  print(&#x27;Search and Replace: $result&#x27;);  // &quot;Hello number, meet number&quot;\n\n  // String Splitting\n  text = &#x27;apple, orange; banana, grape&#x27;;\n  List&lt;String&gt; resultArray = text.split(RegExp(r&#x27;[ ,;]+&#x27;));\n  print(&#x27;String Splitting: ${resultArray.join(&quot;, &quot;)}&#x27;);  // [&quot;apple&quot;, &quot;orange&quot;, &quot;banana&quot;, &quot;grape&quot;]\n\n  // Extracting Substrings\n  text = &#x27;The date is 2024-06-27&#x27;;\n  pattern = r&#x27;(\\d{4})-(\\d{2})-(\\d{2})&#x27;;\n  regExp = RegExp(pattern);\n  RegExpMatch match = regExp.firstMatch(text)!;\n  print(&#x27;Extracting Substrings: ${match.group(1)}, ${match.group(2)}, ${match.group(3)}&#x27;);  // [&quot;2024&quot;, &quot;06&quot;, &quot;27&quot;]\n\n  // Validation\n  String email = &#x27;example@test.com&#x27;;\n  pattern = r&#x27;^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$&#x27;;\n  regExp = RegExp(pattern);\n  print(&#x27;Validation: ${regExp.hasMatch(email) ? &quot;Valid email address!&quot; : &quot;Invalid email address.&quot;}&#x27;);\n\n  // Removing Unwanted Characters\n  text = &#x27;Hello, World!&#x27;;\n  result = text.replaceAll(RegExp(r&#x27;[^\\w\\s]&#x27;), &#x27;&#x27;);  // Remove all non-alphanumeric characters\n  print(&#x27;Removing Unwanted Characters: $result&#x27;);  // &quot;Hello World&quot;\n\n  // Anchoring Searches\n  text = &#x27;The quick brown fox&#x27;;\n  pattern = r&#x27;\\bfox\\b&#x27;;  // Match &#x27;fox&#x27; as a whole word\n  regExp = RegExp(pattern);\n  print(&#x27;Anchoring Searches: ${regExp.hasMatch(text) ? &quot;Found&quot; : &quot;Not Found&quot;}&#x27;);\n\n  // Escaping Characters\n  String user_input = &#x27;some[unsafe]input&#x27;;\n  String escaped_input = RegExp.escape(user_input);\n  print(&#x27;Escaping Characters: $escaped_input&#x27;);  // &quot;some\\[unsafe\\]input&quot;\n\n  // Conditional Matching\n  text = &#x27;foobar and foo&#x27;;\n  pattern = r&#x27;foo(?=bar)&#x27;;  // Match &#x27;foo&#x27; only if followed by &#x27;bar&#x27;\n  regExp = RegExp(pattern);\n  Iterable&lt;RegExpMatch&gt; matches = regExp.allMatches(text);\n  print(&#x27;Conditional Matching: ${matches.map((m) =&gt; m.group(0)).join(&quot;, &quot;)}&#x27;);  // &quot;foo&quot;\n}\n\n",
            "strings": "void main() {\n  // Concatenating two strings together\n  String concatenation1 = &quot;Hello&quot;;\n  String concatenation2 = &quot;World&quot;;\n  String concatenatedString = concatenation1 + &quot; &quot; + concatenation2;\n  print(concatenatedString);\n\n  // Splitting a string into an array of substrings based on a delimiter\n  String splitString = &quot;apple,banana,orange&quot;;\n  List&lt;String&gt; splitArray = splitString.split(&quot;,&quot;);\n  print(splitArray);\n\n  // Replacing a specific substring within a larger string\n  String replacedString = &quot;The quick brown fox jumps&quot;;\n  String newString = replacedString.replaceAll(&quot;quick&quot;, &quot;lazy&quot;);\n  print(newString);\n\n  // Removing leading and trailing whitespace from a string\n  String stringWithSpaces = &quot;   Trim this string  &quot;;\n  String trimmedString = stringWithSpaces.trim();\n  print(trimmedString);\n\n  // Converting a string to uppercase or lowercase\n  String originalString = &quot;Hello World&quot;;\n  String upperCaseString = originalString.toUpperCase();\n  String lowerCaseString = originalString.toLowerCase();\n  print(upperCaseString);\n  print(lowerCaseString);\n\n  // Checking if a string contains a certain substring\n  String mainString = &quot;I love programming in Dart&quot;;\n  bool containsSubstring = mainString.contains(&quot;programming&quot;);\n  print(containsSubstring);\n\n  // Finding the index of a specific substring within a larger string\n  String searchString = &quot;The quick brown fox jumps over the lazy dog&quot;;\n  int index = searchString.indexOf(&quot;lazy&quot;);\n  print(index);\n\n  // Getting the length of a string\n  String lengthString = &quot;Dart Programming&quot;;\n  int length = lengthString.length;\n  print(length);\n\n  // Reversing a string\n  String original = &quot;hello&quot;;\n  String reversed = original.split(&#x27;&#x27;).reversed.join();\n  print(reversed);\n\n  // Formatting a string with placeholders for variables\n  String name = &quot;Alice&quot;;\n  int age = 30;\n  String formatted = &quot;My name is $name and I am $age years old&quot;;\n  print(formatted);\n\n  // Parsing and manipulating data stored in a string format\n  String jsonData = &#x27;{&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 25}&#x27;;\n  Map&lt;String, dynamic&gt; parsedData = json.decode(jsonData);\n  print(parsedData);\n\n  // Generating a string representation of an object for debugging or logging\n  String obj = Object().toString();\n  print(obj);\n\n  // Validating and sanitizing user input received as strings\n  String userInput = &quot; user123 &quot;;\n  String sanitizedInput = userInput.trim();\n  print(sanitizedInput);\n\n  // Implementing algorithms like string matching, searching, or sorting\n  String searchString = &quot;programming&quot;;\n  String text = &quot;I love programming in Dart&quot;;\n  if (text.contains(searchString)) {\n    print(&quot;String found&quot;);\n  } else {\n    print(&quot;String not found&quot;);\n  }\n}\n"
          }
        },
        "cpp": {
          "name": "cpp",
          "displayname": "C++ (C Plus Plus, C++)",
          "comment": "#|//",
          "ext": "cpp",
          "css": "cpp",
          "categories": "programming",
          "snippets": {
            "arrays": "#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\nint main() {\n    // Storing a collection of elements of the same data type\n    std::vector&lt;int&gt; myArray = {1, 2, 3, 4, 5};\n\n    // Accessing individual elements via index\n    std::cout &lt;&lt; &quot;Element at index 2: &quot; &lt;&lt; myArray[2] &lt;&lt; std::endl;\n\n    // Iterating over elements using loops\n    for (int i = 0; i &lt; myArray.size(); ++i) {\n        std::cout &lt;&lt; myArray[i] &lt;&lt; &quot; &quot;;\n    }\n    std::cout &lt;&lt; std::endl;\n\n    // Sorting elements in ascending order\n    std::sort(myArray.begin(), myArray.end());\n\n    // Searching for a specific element within the array\n    auto it = std::find(myArray.begin(), myArray.end(), 3);\n    if (it != myArray.end()) {\n        std::cout &lt;&lt; &quot;Element found at index: &quot; &lt;&lt; std::distance(myArray.begin(), it) &lt;&lt; std::endl;\n    }\n\n    // Modifying elements at specific positions\n    myArray[3] = 10;\n\n    // Adding elements to the end of the array\n    myArray.push_back(6);\n\n    // Removing elements from the array\n    myArray.pop_back();\n\n    // Merging two arrays into a single array\n    std::vector&lt;int&gt; anotherArray = {7, 8, 9};\n    myArray.insert(myArray.end(), anotherArray.begin(), anotherArray.end());\n\n    // Splitting an array into multiple smaller arrays\n    std::vector&lt;std::vector&lt;int&gt;&gt; splitArrays;\n    for (int i = 0; i &lt; myArray.size(); i += 2) {\n        splitArrays.push_back({myArray[i], myArray[i + 1]});\n    }\n\n    // Finding the maximum element in the array\n    int maxElement = *std::max_element(myArray.begin(), myArray.end());\n\n    // Filtering elements based on a condition\n    std::vector&lt;int&gt; filteredArray;\n    std::copy_if(myArray.begin(), myArray.end(), std::back_inserter(filteredArray), [](int num) {\n        return num % 2 == 0;\n    });\n\n    // Mapping elements to a new value\n    std::vector&lt;int&gt; mappedArray;\n    std::transform(myArray.begin(), myArray.end(), std::back_inserter(mappedArray), [](int num) {\n        return num * 2;\n    });\n\n    // Reversing the order of elements in the array\n    std::reverse(myArray.begin(), myArray.end());\n\n    // Calculating the sum of array elements\n    int sum = std::accumulate(myArray.begin(), myArray.end(), 0);\n\n    // Copying elements from one array to another\n    std::vector&lt;int&gt; copiedArray(myArray.begin(), myArray.end());\n\n    // Checking if an array contains a certain element\n    bool containsElement = std::find(myArray.begin(), myArray.end(), 4) != myArray.end();\n\n    // Converting an array to a string\n    std::string arrayAsString;\n    for (auto num : myArray) {\n        arrayAsString += std::to_string(num) + &quot; &quot;;\n    }\n\n    std::cout &lt;&lt; &quot;Array as string: &quot; &lt;&lt; arrayAsString &lt;&lt; std::endl;\n\n    // Displaying the results\n    std::cout &lt;&lt; &quot;Max Element: &quot; &lt;&lt; maxElement &lt;&lt; std::endl;\n    std::cout &lt;&lt; &quot;Filtered Array: &quot;;\n    for (auto num : filteredArray) {\n        std::cout &lt;&lt; num &lt;&lt; &quot; &quot;;\n    }\n    std::cout &lt;&lt; std::endl;\n\n    std::cout &lt;&lt; &quot;Mapped Array: &quot;;\n    for (auto num : mappedArray) {\n        std::cout &lt;&lt; num &lt;&lt; &quot; &quot;;\n    }\n    std::cout &lt;&lt; std::endl;\n\n    std::cout &lt;&lt; &quot;Reversed Array: &quot;;\n    for (auto num : myArray) {\n        std::cout &lt;&lt; num &lt;&lt; &quot; &quot;;\n    }\n    std::cout &lt;&lt; std::endl;\n\n    std::cout &lt;&lt; &quot;Sum of Array: &quot; &lt;&lt; sum &lt;&lt; std::endl;\n\n    std::cout &lt;&lt; &quot;Copied Array: &quot;;\n    for (auto num : copiedArray) {\n        std::cout &lt;&lt; num &lt;&lt; &quot; &quot;;\n    }\n    std::cout &lt;&lt; std::endl;\n\n    std::cout &lt;&lt; &quot;Array contains 4: &quot; &lt;&lt; (containsElement ? &quot;Yes&quot; : &quot;No&quot;) &lt;&lt; std::endl;\n\n    return 0;\n}\n",
            "regexps": "// C++ - regex_examples.cpp\n#include &lt;iostream&gt;\n#include &lt;regex&gt;\n#include &lt;string&gt;\n\nint main() {\n    // Pattern Matching\n    std::regex pattern(&quot;\\\\d+&quot;);  // Match one or more digits\n    std::string text = &quot;There are 123 apples&quot;;\n    std::smatch match;\n    std::cout &lt;&lt; &quot;Pattern Matching: &quot; &lt;&lt; (std::regex_search(text, match, pattern) ? &quot;Match found!&quot; : &quot;No match found.&quot;) &lt;&lt; std::endl;\n\n    // Search and Replace\n    text = &quot;Hello 123, meet 456&quot;;\n    std::string result = std::regex_replace(text, pattern, &quot;number&quot;);\n    std::cout &lt;&lt; &quot;Search and Replace: &quot; &lt;&lt; result &lt;&lt; std::endl;  // &quot;Hello number, meet number&quot;\n\n    // String Splitting\n    text = &quot;apple, orange; banana, grape&quot;;\n    std::regex re(&quot;[,;]&quot;);\n    std::sregex_token_iterator it(text.begin(), text.end(), re, -1);\n    std::sregex_token_iterator end;\n    std::cout &lt;&lt; &quot;String Splitting: &quot;;\n    while (it != end) {\n        std::cout &lt;&lt; *it++ &lt;&lt; &quot;, &quot;;\n    }\n    std::cout &lt;&lt; std::endl;  // [&quot;apple&quot;, &quot; orange&quot;, &quot; banana&quot;, &quot; grape&quot;]\n\n    // Extracting Substrings\n    text = &quot;The date is 2024-06-27&quot;;\n    pattern = std::regex(&quot;(\\\\d{4})-(\\\\d{2})-(\\\\d{2})&quot;);\n    if (std::regex_search(text, match, pattern)) {\n        std::cout &lt;&lt; &quot;Extracting Substrings: &quot; &lt;&lt; match[1] &lt;&lt; &quot;, &quot; &lt;&lt; match[2] &lt;&lt; &quot;, &quot; &lt;&lt; match[3] &lt;&lt; std::endl;  // [&quot;2024&quot;, &quot;06&quot;, &quot;27&quot;]\n    }\n\n    // Validation\n    std::string email = &quot;example@test.com&quot;;\n    pattern = std::regex(&quot;^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$&quot;);\n    std::cout &lt;&lt; &quot;Validation: &quot; &lt;&lt; (std::regex_match(email, pattern) ? &quot;Valid email address!&quot; : &quot;Invalid email address.&quot;) &lt;&lt; std::endl;\n\n    // Removing Unwanted Characters\n    text = &quot;Hello, World!&quot;;\n    result = std::regex_replace(text, std::regex(&quot;[^\\\\w\\\\s]&quot;), &quot;&quot;);  // Remove all non-alphanumeric characters\n    std::cout &lt;&lt; &quot;Removing Unwanted Characters: &quot; &lt;&lt; result &lt;&lt; std::endl;  // &quot;Hello World&quot;\n\n    // Anchoring Searches\n    text = &quot;The quick brown fox&quot;;\n    pattern = std::regex(&quot;\\\\bfox\\\\b&quot;);  // Match &#x27;fox&#x27; as a whole word\n    std::cout &lt;&lt; &quot;Anchoring Searches: &quot; &lt;&lt; (std::regex_search(text, match, pattern) ? &quot;Found&quot; : &quot;Not Found&quot;) &lt;&lt; std::endl;\n\n    // Escaping Characters\n    std::string user_input = &quot;some[unsafe]input&quot;;\n    std::string escaped_input = std::regex_replace(user_input, std::regex(&quot;[.*+?^${}()|\\\\[\\\\]\\\\\\\\]&quot;), &quot;\\\\$&amp;&quot;);\n    std::cout &lt;&lt; &quot;Escaping Characters: &quot; &lt;&lt; escaped_input &lt;&lt; std::endl;  // &quot;some\\[unsafe\\]input&quot;\n\n\u001b[O    // Conditional Matching\n    pattern = std::regex(&quot;foo(?=bar)&quot;);  // Match &#x27;foo&#x27; only if followed by &#x27;bar&#x27;\n    text = &quot;foobar and foo&quot;;\n    auto words_begin = std::sregex_iterator(text.begin(), text.end(), pattern);\n    auto words_end = std::sregex_iterator();\n    std::cout &lt;&lt; &quot;Conditional Matching: &quot;;\n    for (std::sregex_iterator i = words_begin; i != words_end; ++i) {\n        std::smatch match = *i;\n        std::cout &lt;&lt; match.str() &lt;&lt; &quot;, &quot;;  // &quot;foo&quot;\n    }\n    std::cout &lt;&lt; std::endl;\n\n    return 0;\n}\n\n",
            "strings": "#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;algorithm&gt;\n\nint main() {\n    // Concatenating two strings together to create a longer string\n    std::string str1 = &quot;Hello&quot;;\n    std::string str2 = &quot;World&quot;;\n    std::string concatenated = str1 + &quot; &quot; + str2;\n    std::cout &lt;&lt; &quot;Concatenated string: &quot; &lt;&lt; concatenated &lt;&lt; std::endl;\n\n    // Splitting a string into an array of substrings based on a delimiter\n    std::string sentence = &quot;This is a sample sentence&quot;;\n    size_t pos = 0;\n    std::string token;\n    while ((pos = sentence.find(&quot; &quot;)) != std::string::npos) {\n        token = sentence.substr(0, pos);\n        std::cout &lt;&lt; token &lt;&lt; std::endl;\n        sentence.erase(0, pos + 1);\n    }\n    \n    // Replacing a specific substring with another substring within a larger string\n    std::string text = &quot;Replace this text with new text&quot;;\n    std::string toReplace = &quot;text&quot;;\n    std::string replacement = &quot;string&quot;;\n    size_t found = text.find(toReplace);\n    if (found != std::string::npos) {\n        text.replace(found, toReplace.size(), replacement);\n    }\n    std::cout &lt;&lt; &quot;Replaced string: &quot; &lt;&lt; text &lt;&lt; std::endl;\n\n    // Removing leading and trailing whitespace from a string\n    std::string spacedString = &quot;   Trim the spaces    &quot;;\n    spacedString.erase(0, spacedString.find_first_not_of(&#x27; &#x27;));\n    spacedString.erase(spacedString.find_last_not_of(&#x27; &#x27;) + 1, std::string::npos);\n    std::cout &lt;&lt; &quot;Trimmed string: &quot; &lt;&lt; spacedString &lt;&lt; std::endl;\n\n    // Converting a string to uppercase or lowercase\n    std::string mixedCase = &quot;MiXeD CaSe&quot;;\n    std::transform(mixedCase.begin(), mixedCase.end(), mixedCase.begin(), ::tolower);\n    std::cout &lt;&lt; &quot;Lowercase string: &quot; &lt;&lt; mixedCase &lt;&lt; std::endl;\n\n    // Checking if a string contains a certain substring\n    std::string checkSubstring = &quot;This is a sample string&quot;;\n    std::string substringToCheck = &quot;sample&quot;;\n    if (checkSubstring.find(substringToCheck) != std::string::npos) {\n        std::cout &lt;&lt; &quot;String contains substring&quot; &lt;&lt; std::endl;\n    }\n\n    // Finding the index of a specific substring within a larger string\n    std::string searchStr = &quot;Find the index of &#x27;index&#x27; in this string&quot;;\n    size_t indexPos = searchStr.find(&quot;index&quot;);\n    std::cout &lt;&lt; &quot;Index position: &quot; &lt;&lt; indexPos &lt;&lt; std::endl;\n\n    // Getting the length of a string\n    std::string longString = &quot;This is a very long string&quot;;\n    std::cout &lt;&lt; &quot;Length of the string: &quot; &lt;&lt; longString.size() &lt;&lt; std::endl;\n\n    // Reversing a string\n    std::string originalString = &quot;Reverse me&quot;;\n    std::reverse(originalString.begin(), originalString.end());\n    std::cout &lt;&lt; &quot;Reversed string: &quot; &lt;&lt; originalString &lt;&lt; std::endl;\n\n    return 0;\n}\n"
          }
        },
        "node": {
          "name": "node",
          "displayname": "Node.js JavaScript",
          "comment": "#|//",
          "ext": "js",
          "css": "javascript",
          "inherits": "js",
          "categories": "programming",
          "snippets": {
            "arrays": "// Storing a collection of elements of the same data type\nconst numbers = [1, 2, 3, 4, 5];\n\n// Accessing individual elements via index\nconst firstElement = numbers[0]; // Output: 1\nconst lastElement = numbers[numbers.length - 1]; // Output: 5\n\n// Iterating over elements using loops\nfor (let i = 0; i &lt; numbers.length; i++) {\n  console.log(numbers[i]);\n}\n\n// Sorting elements in ascending or descending order\nconst sortedNumbersAsc = numbers.slice().sort((a, b) =&gt; a - b);\nconst sortedNumbersDesc = numbers.slice().sort((a, b) =&gt; b - a);\n\n// Searching for a specific element within the array\nconst searchElement = numbers.indexOf(3); // Output: 2\n\n// Modifying elements at specific positions\nnumbers[2] = 10; // Update element at index 2\n\n// Adding elements to the end of the array\nnumbers.push(6);\n\n// Removing elements from the array\nnumbers.pop();\n\n// Merging two arrays into a single array\nconst numbers2 = [6, 7, 8];\nconst mergedArray = numbers.concat(numbers2);\n\n// Splitting an array into multiple smaller arrays\nconst chunks = Array.from(Array(Math.ceil(numbers.length / 2)), (_, i) =&gt;\n  numbers.slice(i * 2, i * 2 + 2)\n);\n\n// Finding the maximum or minimum element in the array\nconst maxElement = Math.max(...numbers);\nconst minElement = Math.min(...numbers);\n\n// Filtering elements based on a condition\nconst filteredNumbers = numbers.filter((num) =&gt; num % 2 === 0);\n\n// Mapping elements to a new value\nconst mappedNumbers = numbers.map((num) =&gt; num * 2);\n\n// Reversing the order of elements in the array\nconst reversedNumbers = numbers.slice().reverse();\n\n// Calculating the sum or average of array elements\nconst sum = numbers.reduce((acc, cur) =&gt; acc + cur, 0);\nconst average = sum / numbers.length;\n\n// Copying elements from one array to another\nconst copiedArray = [...numbers];\n\n// Checking if an array contains a certain element\nconst hasElement = numbers.includes(4); // Output: true\n\n// Converting an array to a string or vice versa\nconst stringArray = numbers.join(&#x27;,&#x27;);\nconst parsedArray = stringArray.split(&#x27;,&#x27;);\n\n// Creating multi-dimensional arrays for complex data structures\nconst matrix = [[1, 2], [3, 4], [5, 6]];\n\n// Implementing algorithms like binary search or quicksort using arrays\nfunction binarySearch(arr, target) {\n  let low = 0;\n  let high = arr.length - 1;\n\n  while (low &lt;= high) {\n    const mid = Math.floor((low + high) / 2);\n    if (arr[mid] === target) {\n      return mid;\n    } else if (arr[mid] &lt; target) {\n      low = mid + 1;\n    } else {\n      high = mid - 1;\n    }\n  }\n  return -1;\n}\n",
            "strings": "// Concatenating two strings together to create a longer string\nconst concatStrings = (str1, str2) =&gt; {\n  return str1 + str2;\n};\n\n// Splitting a string into an array of substrings based on a delimiter\nconst splitString = (str, delimiter) =&gt; {\n  return str.split(delimiter);\n};\n\n// Replacing a specific substring with another substring within a larger string\nconst replaceSubstring = (str, oldSubstr, newSubstr) =&gt; {\n  return str.replace(oldSubstr, newSubstr);\n};\n\n// Removing leading and trailing whitespace from a string\nconst trimString = (str) =&gt; {\n  return str.trim();\n};\n\n// Converting a string to uppercase or lowercase\nconst toUpperCase = (str) =&gt; {\n  return str.toUpperCase();\n};\n\nconst toLowerCase = (str) =&gt; {\n  return str.toLowerCase();\n};\n\n// Checking if a string contains a certain substring\nconst containsSubstring = (str, substring) =&gt; {\n  return str.includes(substring);\n};\n\n// Finding the index of a specific substring within a larger string\nconst findSubstringIndex = (str, substring) =&gt; {\n  return str.indexOf(substring);\n};\n\n// Getting the length of a string\nconst getStringLength = (str) =&gt; {\n  return str.length;\n};\n\n// Reversing a string\nconst reverseString = (str) =&gt; {\n  return str.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;);\n};\n\n// Formatting a string with placeholders for variables\nconst formatString = (str, ...args) =&gt; {\n  return str.replace(/{(\\d+)}/g, (match, index) =&gt; args[index]);\n};\n\n// Parsing and manipulating data stored in a string format (such as JSON or XML)\nconst parseJSON = (jsonString) =&gt; {\n  return JSON.parse(jsonString);\n};\n\n// Generating a string representation of an object for debugging or logging\nconst stringifyObject = (obj) =&gt; {\n  return JSON.stringify(obj);\n};\n\n// Validating and sanitizing user input received as strings\nconst sanitizeInput = (input) =&gt; {\n  // Add sanitization logic here\n  return sanitizedInput;\n};\n\n// Implementing algorithms like string matching, searching, or sorting\n// Example: String Matching using regular expression\nconst matchString = (str, regex) =&gt; {\n  return str.match(regex);\n};\n\n// example usage\nconst str1 = &#x27;Hello&#x27;;\nconst str2 = &#x27;World&#x27;;\nconsole.log(concatStrings(str1, str2));\nconsole.log(splitString(&#x27;apple,orange,banana&#x27;, &#x27;,&#x27;));\nconsole.log(replaceSubstring(&#x27;Hello World&#x27;, &#x27;World&#x27;, &#x27;Universe&#x27;));\nconsole.log(trimString(&#x27;   Hello   &#x27;));\nconsole.log(toUpperCase(&#x27;hello&#x27;));\nconsole.log(toLowerCase(&#x27;WORLD&#x27;));\nconsole.log(containsSubstring(&#x27;Hello World&#x27;, &#x27;World&#x27;));\nconsole.log(findSubstringIndex(&#x27;Hello World&#x27;, &#x27;World&#x27;));\nconsole.log(getStringLength(&#x27;Hello&#x27;));\nconsole.log(reverseString(&#x27;hello&#x27;));\nconsole.log(formatString(&#x27;The {0} is {1}&#x27;, &#x27;sky&#x27;, &#x27;blue&#x27;));\nconsole.log(parseJSON(&#x27;{&quot;key&quot;: &quot;value&quot;}&#x27;));\nconsole.log(stringifyObject({ key: &#x27;value&#x27; }));\nconsole.log(matchString(&#x27;The quick brown fox jumps over the lazy dog.&#x27;, /quick/));\n\nmodule.exports = {\n  concatStrings,\n  splitString,\n  replaceSubstring,\n  trimString,\n  toUpperCase,\n  toLowerCase,\n  containsSubstring,\n  findSubstringIndex,\n  getStringLength,\n  reverseString,\n  formatString,\n  parseJSON,\n  stringifyObject,\n  sanitizeInput,\n  matchString\n};\n"
          }
        },
        "kotlin": {
          "name": "kotlin",
          "displayname": "Kotlin",
          "comment": "#|//",
          "ext": "kt",
          "css": "kotlin",
          "categories": "programming",
          "snippets": {
            "arrays": "fun main() {\n    val numbers = arrayOf(4, 13, 7, 21, 16)\n\n    // Accessing individual elements via index\n    val elementAtIndex2 = numbers[2]\n    println(&quot;Element at index 2: $elementAtIndex2&quot;)\n\n    // Iterating over elements using loops\n    for (number in numbers) {\n        println(number)\n    }\n\n    // Sorting elements in ascending order\n    val sortedNumbers = numbers.sorted()\n    println(&quot;Sorted numbers: $sortedNumbers&quot;)\n\n    // Searching for a specific element within the array\n    val numberToFind = 7\n    val index = numbers.indexOf(numberToFind)\n    if (index != -1) {\n        println(&quot;$numberToFind found at index $index&quot;)\n    } else {\n        println(&quot;$numberToFind not found&quot;)\n    }\n\n    // Modifying elements at specific positions\n    numbers[3] = 100\n    println(&quot;Modified array: ${numbers.joinToString()}&quot;)\n\n    // Adding elements to the end of the array\n    numbers += 5\n    println(&quot;Array after adding 5: ${numbers.joinToString()}&quot;)\n\n    // Removing elements from the array\n    numbers.drop(2)\n    println(&quot;Array after removing first 2 elements: ${numbers.joinToString()}&quot;)\n\n    // Merging two arrays into a single array\n    val moreNumbers = arrayOf(3, 8)\n    val mergedArray = numbers + moreNumbers\n    println(&quot;Merged array: ${mergedArray.joinToString()}&quot;)\n\n    // Splitting an array into multiple smaller arrays\n    val chunkedArrays = numbers.chunked(2)\n    println(&quot;Chunked arrays: $chunkedArrays&quot;)\n\n    // Finding the maximum element in the array\n    val maxNumber = numbers.maxOrNull()\n    println(&quot;Max number: $maxNumber&quot;)\n\n    // Filtering elements based on a condition\n    val filteredNumbers = numbers.filter { it % 2 == 0 }\n    println(&quot;Filtered numbers (even): $filteredNumbers&quot;)\n\n    // Mapping elements to a new value\n    val doubledNumbers = numbers.map { it * 2 }\n    println(&quot;Doubled numbers: ${doubledNumbers.joinToString()}&quot;)\n\n    // Reversing the order of elements in the array\n    val reversedArray = numbers.reversed()\n    println(&quot;Reversed array: ${reversedArray.joinToString()}&quot;)\n\n    // Calculating the sum of array elements\n    val sum = numbers.sum()\n    println(&quot;Sum of array elements: $sum&quot;)\n\n    // Checking if an array contains a certain element\n    val containsSeven = numbers.contains(7)\n    println(&quot;Array contains 7: $containsSeven&quot;)\n\n    // Converting an array to a string\n    val numbersString = numbers.joinToString(separator = &quot;, &quot;, prefix = &quot;[&quot;, postfix = &quot;]&quot;)\n    println(&quot;Array as string: $numbersString&quot;)\n}\n",
            "regexps": "// Kotlin - RegexExamples.kt\nfun main() {\n    // Pattern Matching\n    val pattern = &quot;\\\\d+&quot;.toRegex()  // Match one or more digits\n    val text = &quot;There are 123 apples&quot;\n    println(&quot;Pattern Matching: ${if (pattern.containsMatchIn(text)) &quot;Match found!&quot; else &quot;No match found.&quot;}&quot;)\n\n    // Search and Replace\n\u001bOB\u001bOB\u001bOB    var text = &quot;Hello 123, meet 456&quot;\n    var result = text.replace(&quot;\\\\d+&quot;.toRegex(), &quot;number&quot;)\n    println(&quot;Search and Replace: $result&quot;)  // &quot;Hello number, meet number&quot;\n\n    // String Splitting\n    text = &quot;apple, orange; banana, grape&quot;\n    val resultArray = text.split(&quot;[,;]&quot;.toRegex())\n    println(&quot;String Splitting: ${resultArray.joinToString(&quot;, &quot;)}&quot;)  // [&quot;apple&quot;, &quot; orange&quot;, &quot; banana&quot;, &quot; grape&quot;]\n\n    // Extracting Substrings\n    text = &quot;The date is 2024-06-27&quot;\n    pattern = &quot;(\\\\d{4})-(\\\\d{2})-(\\\\d{2})&quot;.toRegex()\n    val matchResult = pattern.find(text)\n    matchResult?.groupValues?.let { groups -&gt;\n        println(&quot;Extracting Substrings: ${groups[1]}, ${groups[2]}, ${groups[3]}&quot;)  // [&quot;2024&quot;, &quot;06&quot;, &quot;27&quot;]\n    }\n\n    // Validation\n    val email = &quot;example@test.com&quot;\n    val emailPattern = &quot;^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$&quot;.toRegex()\n    println(&quot;Validation: ${if (emailPattern.matches(email)) &quot;Valid email address!&quot; else &quot;Invalid email address.&quot;}&quot;)\n\n    // Removing Unwanted Characters\n    text = &quot;Hello, World!&quot;\n    result = text.replace(&quot;[^\\\\w\\\\s]&quot;.toRegex(), &quot;&quot;)  // Remove all non-alphanumeric characters\n    println(&quot;Removing Unwanted Characters: $result&quot;)  // &quot;Hello World&quot;\n\n    // Anchoring Searches\n    text = &quot;The quick brown fox&quot;\n    val wordPattern = &quot;\\\\bfox\\\\b&quot;.toRegex()  // Match &#x27;fox&#x27; as a whole word\n    println(&quot;Anchoring Searches: ${if (wordPattern.containsMatchIn(text)) &quot;Found&quot; else &quot;Not Found&quot;}&quot;)\n\n    // Escaping Characters\n    val user_input = &quot;some[unsafe]input&quot;\n    val escaped_input = Regex.escape(user_input)\n    println(&quot;Escaping Characters: $escaped_input&quot;)  // &quot;some\\[unsafe\\]input&quot;\n\n    // Conditional Matching\n    text = &quot;foobar and foo&quot;\n    val lookaheadPattern = &quot;foo(?=bar)&quot;.toRegex()  // Match &#x27;foo&#x27; only if followed by &#x27;bar&#x27;\n    val matches = lookaheadPattern.findAll(text).map { it.value }.toList()\n    println(&quot;Conditional Matching: ${matches.joinToString(&quot;, &quot;)}&quot;)  // &quot;foo&quot;\n}\n\n",
            "strings": "class WorkingWithStrings {\n    fun concatenateStrings(str1: String, str2: String): String {\n        return str1 + str2\n    }\n\n    fun splitString(str: String, delimiter: String): List&lt;String&gt; {\n        return str.split(delimiter)\n    }\n\n    fun replaceSubstring(str: String, oldSub: String, newSub: String): String {\n        return str.replace(oldSub, newSub)\n    }\n\n    fun removeWhitespace(str: String): String {\n        return str.trim()\n    }\n\n    fun convertToUpperCase(str: String): String {\n        return str.toUpperCase()\n    }\n\n    fun convertToLowerCase(str: String): String {\n        return str.toLowerCase()\n    }\n\n    fun checkSubstring(str: String, sub: String): Boolean {\n        return str.contains(sub)\n    }\n\n    fun findSubstringIndex(str: String, sub: String): Int {\n        return str.indexOf(sub)\n    }\n\n    fun getStringLength(str: String): Int {\n        return str.length\n    }\n\n    fun reverseString(str: String): String {\n        return str.reversed()\n    }\n\n    fun formatString(name: String, age: Int): String {\n        return &quot;My name is $name and I am $age years old.&quot;\n    }\n\n    fun manipulateData(str: String): String {\n        // Parsing and manipulating data can vary based on specific format e.g., JSON or XML\n        // Logic to parse and manipulate the input string\n        return &quot;Manipulated data: $str&quot;\n    }\n\n    fun generateObjectString(obj: Any): String {\n        return obj.toString()\n    }\n\n    fun validateUserInput(input: String): Boolean {\n        // Validation and sanitization logic\n        return input.isNotBlank()\n    }\n\n    fun stringMatching(str1: String, str2: String): Boolean {\n        return str1 == str2\n    }\n\n    fun searchSubstring(str: String, sub: String): Boolean {\n        return str.contains(sub)\n    }\n\n    fun sortStrings(strList: List&lt;String&gt;): List&lt;String&gt; {\n        return strList.sorted()\n    }\n}\n\nfun main() {\n    val helper = WorkingWithStrings()\n\n    // Examples\n    println(helper.concatenateStrings(&quot;Hello&quot;, &quot;World&quot;))\n    println(helper.splitString(&quot;Apple,Orange,Peach&quot;, &quot;,&quot;))\n    println(helper.replaceSubstring(&quot;Hello Kotlin&quot;, &quot;Kotlin&quot;, &quot;World&quot;))\n    println(helper.removeWhitespace(&quot;  Trim me  &quot;))\n    println(helper.convertToUpperCase(&quot;hello&quot;))\n    println(helper.convertToLowerCase(&quot;WORLD&quot;))\n    println(helper.checkSubstring(&quot;Hello World&quot;, &quot;World&quot;))\n    println(helper.findSubstringIndex(&quot;Hello World&quot;, &quot;World&quot;))\n    println(helper.getStringLength(&quot;Kotlin&quot;))\n    println(helper.reverseString(&quot;TechGig&quot;))\n    println(helper.formatString(&quot;Alice&quot;, 30))\n    println(helper.manipulateData(&quot;{\\&quot;name\\&quot;: \\&quot;Alice\\&quot;}&quot;))\n    println(helper.generateObjectString(42))\n    println(helper.validateUserInput(&quot;Input&quot;))\n    println(helper.stringMatching(&quot;Hello&quot;, &quot;Hello&quot;))\n    println(helper.searchSubstring(&quot;Hello World&quot;, &quot;World&quot;))\n    println(helper.sortStrings(listOf(&quot;Banana&quot;, &quot;Apple&quot;, &quot;Orange&quot;)))\n}\n"
          }
        },
        "typescript": {
          "name": "typescript",
          "displayname": "Typescript",
          "comment": "#|//",
          "ext": "ts",
          "css": "typescript",
          "categories": "programming",
          "snippets": {
            "arrays": "// Storing a collection of elements of the same data type\nconst numbers: number[] = [1, 2, 3, 4, 5];\n\n// Accessing individual elements via index\nconst firstElement: number = numbers[0];\nconst thirdElement: number = numbers[2];\n\n// Iterating over elements using loops\nfor (let i = 0; i &lt; numbers.length; i++) {\n    console.log(numbers[i]);\n}\n\n// Sorting elements in ascending order\nconst sortedNumbersAscending: number[] = numbers.sort((a, b) =&gt; a - b);\n\n// Sorting elements in descending order\nconst sortedNumbersDescending: number[] = numbers.sort((a, b) =&gt; b - a);\n\n// Searching for a specific element within the array\nconst searchElement: number = 3;\nconst indexOfElement: number = numbers.indexOf(searchElement);\n\n// Modifying elements at specific positions\nnumbers[1] = 10;\n\n// Adding elements to the end of the array\nnumbers.push(6);\n\n// Removing elements from the array\nnumbers.pop();\n\n// Merging two arrays into a single array\nconst newNumbers: number[] = [7, 8, 9];\nconst mergedArray: number[] = numbers.concat(newNumbers);\n\n// Splitting an array into multiple smaller arrays\nconst chunkedArray: number[][] = [];\nconst chunkSize = 2;\nfor (let i = 0; i &lt; numbers.length; i += chunkSize) {\n    chunkedArray.push(numbers.slice(i, i + chunkSize));\n}\n\n// Finding the maximum or minimum element in the array\nconst maxElement: number = Math.max(...numbers);\nconst minElement: number = Math.min(...numbers);\n\n// Filtering elements based on a condition\nconst filteredArray: number[] = numbers.filter(num =&gt; num &gt; 3);\n\n// Mapping elements to a new value\nconst mappedArray: number[] = numbers.map(num =&gt; num * 2);\n\n// Reversing the order of elements in the array\nconst reversedArray: number[] = numbers.reverse();\n\n// Calculating the sum or average of array elements\nconst sum: number = numbers.reduce((acc, curr) =&gt; acc + curr, 0);\nconst average: number = sum / numbers.length;\n\n// Copying elements from one array to another\nconst copiedArray: number[] = [...numbers];\n\n// Checking if an array contains a certain element\nconst includesElement: boolean = numbers.includes(4);\n\n// Converting an array to a string or vice versa\nconst arrayAsString: string = numbers.join(&#x27;,&#x27;);\nconst stringAsArray: string[] = &#x27;1,2,3,4&#x27;.split(&#x27;,&#x27;);\n\n// Creating multi-dimensional arrays for complex data structures\nconst multiDimArray: number[][] = [[1, 2], [3, 4], [5, 6]];\n\n// Implementing algorithms like binary search or quicksort using arrays\n// Binary search example\nfunction binarySearch(arr: number[], target: number): number {\n    let left = 0;\n    let right = arr.length - 1;\n    \n    while (left &lt;= right) {\n        const mid = Math.floor((left + right) / 2);\n        \n        if (arr[mid] === target) {\n            return mid;\n        } else if (arr[mid] &lt; target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    \n    return -1; // Element not found\n}\n\nconst indexFound: number = binarySearch(numbers, 3);\n",
            "strings": "// Concatenating two strings together to create a longer string\nconst concatStrings = (str1: string, str2: string): string =&gt; {\n  return str1 + str2;\n}\n\n// Splitting a string into an array of substrings based on a delimiter\nconst splitString = (str: string, delimiter: string): string[] =&gt; {\n  return str.split(delimiter);\n}\n\n// Replacing a specific substring with another substring within a larger string\nconst replaceSubstring = (str: string, oldSubstr: string, newSubstr: string): string =&gt; {\n  return str.replace(oldSubstr, newSubstr);\n}\n\n// Removing leading and trailing whitespace from a string\nconst trimString = (str: string): string =&gt; {\n  return str.trim();\n}\n\n// Converting a string to uppercase or lowercase\nconst convertToUpperCase = (str: string): string =&gt; {\n  return str.toUpperCase();\n}\n\nconst convertToLowerCase = (str: string): string =&gt; {\n  return str.toLowerCase();\n}\n\n// Checking if a string contains a certain substring\nconst checkSubstring = (str: string, substr: string): boolean =&gt; {\n  return str.includes(substr);\n}\n\n// Finding the index of a specific substring within a larger string\nconst findSubstringIndex = (str: string, substr: string): number =&gt; {\n  return str.indexOf(substr);\n}\n\n// Getting the length of a string\nconst getStringLength = (str: string): number =&gt; {\n  return str.length;\n}\n\n// Reversing a string\nconst reverseString = (str: string): string =&gt; {\n  return str.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;);\n}\n\n// Formatting a string with placeholders for variables\nconst formatString = (str: string, ...args: string[]): string =&gt; {\n  return str.replace(/{(\\d+)}/g, (match, index) =&gt; args[index]);\n}\n\n// Parsing and manipulating data stored in a string format (such as JSON or XML)\ninterface User {\n  name: string;\n  age: number;\n}\n\nconst parseJSONString = (jsonStr: string): User =&gt; {\n  return JSON.parse(jsonStr);\n}\n\n// Generating a string representation of an object for debugging or logging\nconst objectToString = (obj: object): string =&gt; {\n  return JSON.stringify(obj);\n}\n\n// Validating and sanitizing user input received as strings\nconst sanitizeInput = (input: string): string =&gt; {\n  // add sanitization logic as needed\n  return input.trim();\n}\n\n// Implementing algorithms like string matching, searching, or sorting\nconst sortString = (str: string): string =&gt; {\n  return str.split(&#x27;&#x27;).sort().join(&#x27;&#x27;);\n}\n\nexport {\n  concatStrings,\n  splitString,\n  replaceSubstring,\n  trimString,\n  convertToUpperCase,\n  convertToLowerCase,\n  checkSubstring,\n  findSubstringIndex,\n  getStringLength,\n  reverseString,\n  formatString,\n  parseJSONString,\n  objectToString,\n  sanitizeInput,\n  sortString\n};\n"
          }
        },
        "powershell": {
          "name": "powershell",
          "displayname": "Powershell (Windows)",
          "comment": "#|//",
          "ext": "ps1",
          "css": "powershell",
          "categories": "programming",
          "snippets": {
            "arrays": "# Storing a collection of elements of the same data type\n$numbers = @(1, 2, 3, 4, 5)\n\n# Accessing individual elements via index\n$secondNumber = $numbers[1]\n\n# Iterating over elements using loops\nforeach ($number in $numbers) {\n    Write-Output $number\n}\n\n# Sorting elements in ascending or descending order\n$numbersSorted = $numbers | Sort-Object\n$numbersSortedDescending = $numbers | Sort-Object -Descending\n\n# Searching for a specific element within the array\n$foundNumber = $numbers -contains 3\n\n# Modifying elements at specific positions\n$numbers[2] = 10\n\n# Adding elements to the end of the array\n$numbers += 6\n\n# Removing elements from the array\n$numbersRemoved = $numbers | Where-Object { $_ -ne 4 }\n\n# Merging two arrays into a single array\n$moreNumbers = @(7, 8, 9)\n$combinedNumbers = $numbers + $moreNumbers\n\n# Splitting an array into multiple smaller arrays\n$chunks = $numbers | Group-Object -Property { [math]::Floor($_ / 2) }\n\n# Finding the maximum or minimum element in the array\n$maximumNumber = $numbers | Measure-Object -Maximum\n$minimumNumber = $numbers | Measure-Object -Minimum\n\n# Filtering elements based on a condition\n$filteredNumbers = $numbers | Where-Object { $_ -gt 2 }\n\n# Mapping elements to a new value\n$mappedNumbers = $numbers | ForEach-Object { $_ * 2 }\n\n# Reversing the order of elements in the array\n$reversedNumbers = $numbers | Select-Object -Last ($numbers.Length) -First $numbers.Length\n\n# Calculating the sum or average of array elements\n$sum = ($numbers | Measure-Object -Sum).Sum\n$average = ($numbers | Measure-Object -Average).Average\n\n# Copying elements from one array to another\n$copiedNumbers = $numbers.Clone()\n\n# Checking if an array contains a certain element\n$containsNumber = $numbers -contains 5\n\n# Converting an array to a string or vice versa\n$numbersAsString = $numbers -join &quot;,&quot;\n$numbersFromString = $numbersAsString -split &quot;,&quot;\n\n# Creating multi-dimensional arrays for complex data structures\n$multiArray = @( @(&quot;A&quot;, &quot;B&quot;), @(&quot;C&quot;, &quot;D&quot;) )\n\n# Implementing algorithms like binary search or quicksort using arrays\nfunction BinarySearch([int[]]$arr, [int]$target) {\n    $left = 0\n    $right = $arr.Length - 1\n\n    while ($left -le $right) {\n        $mid = [math]::Floor(($left + $right) / 2)\n\n        if ($arr[$mid] -eq $target) {\n            return $mid\n        } elseif ($arr[$mid] -lt $target) {\n            $left = $mid + 1\n        } else {\n            $right = $mid - 1\n        }\n    }\n\n    return -1\n}\n\n# Example usage of BinarySearch algorithm\n$binarySearchResult = BinarySearch $numbers 3\n\n# End of examples\n",
            "regexps": "# PowerShell - regex_examples.ps1\n\n# Pattern Matching\n$text = &quot;There are 123 apples&quot;\n$pattern = &quot;\\d+&quot;  # Match one or more digits\nif ($text -match $pattern) {\n    Write-Output &quot;Pattern Matching: Match found!&quot;\n} else {\n    Write-Output &quot;Pattern Matching: No match found.&quot;\n}\n\n# Search and Replace\n$text = &quot;Hello 123, meet 456&quot;\n$result = $text -replace $pattern, &quot;number&quot;\nWrite-Output &quot;Search and Replace: $result&quot;  # &quot;Hello number, meet number&quot;\n\n# String Splitting\n$text = &quot;apple, orange; banana, grape&quot;\n$result = $text -split &quot;[,;]&quot;\nWrite-Output &quot;String Splitting: $($result -join &quot;, &quot;)&quot;  # [&quot;apple&quot;, &quot; orange&quot;, &quot; banana&quot;, &quot; grape&quot;]\n\n# Extracting Substrings\n$text = &quot;The date is 2024-06-27&quot;\nif ($text -match &quot;(\\d{4})-(\\d{2})-(\\d{2})&quot;) {\n    Write-Output &quot;Extracting Substrings: $($matches[1]), $($matches[2]), $($matches[3])&quot;  # [&quot;2024&quot;, &quot;06&quot;, &quot;27&quot;]\n}\n\n# Validation\n$email = &quot;example@test.com&quot;\n$pattern = &quot;^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$&quot;\nif ($email -match $pattern) {\n    Write-Output &quot;Validation: Valid email address!&quot;\n} else {\n    Write-Output &quot;Validation: Invalid email address.&quot;\n}\n\n# Removing Unwanted Characters\n$text = &quot;Hello, World!&quot;\n$cleaned_text = $text -replace &quot;[^\\w\\s]&quot;, &quot;&quot;  # Remove all non-alphanumeric characters\nWrite-Output &quot;Removing Unwanted Characters: $cleaned_text&quot;  # &quot;Hello World&quot;\n\n# Anchoring Searches\n$text = &quot;The quick brown fox&quot;\n$pattern = &quot;\\bfox\\b&quot;  # Match &#x27;fox&#x27; as a whole word\nif ($text -match $pattern) {\n    Write-Output &quot;Anchoring Searches: Found&quot;\n} else {\n    Write-Output &quot;Anchoring Searches: Not Found&quot;\n}\n\n# Escaping Characters\nfunction Escape-RegexPattern {\n    param ($input)\n    [Regex]::Escape($input)\n}\n$user_input = &quot;some[unsafe]input&quot;\n$escaped_input = Escape-RegexPattern $user_input\nWrite-Output &quot;Escaping Characters: $escaped_input&quot;  # &quot;some\\[unsafe\\]input&quot;\n\n# Conditional Matching\n$text = &quot;foobar and foo&quot;\n$pattern = &quot;foo(?=bar)&quot;  # Match &#x27;foo&#x27; only if followed by &#x27;bar&#x27;\n$matches = [regex]::Matches($text, $pattern)\nWrite-Output &quot;Conditional Matching: $($matches | ForEach-Object { $_.Value })&quot;  # &quot;foo&quot;\n\n",
            "strings": "# Concatenating two strings together to create a longer string\n$concatenatedString = &quot;Hello, &quot; + &quot;World&quot;\n\n# Splitting a string into an array of substrings based on a delimiter\n$stringToSplit = &quot;apple,banana,orange&quot;\n$splitArray = $stringToSplit -split &quot;,&quot;\n\n# Replacing a specific substring with another substring within a larger string\n$originalString = &quot;Hello, World!&quot;\n$modifiedString = $originalString -replace &quot;World&quot;, &quot;Everyone&quot;\n\n# Removing leading and trailing whitespace from a string\n$whitespaceString = &quot;   Trimmed String    &quot;\n$trimmedString = $whitespaceString.Trim()\n\n# Converting a string to uppercase or lowercase\n$lowerCaseString = &quot;lowercase&quot;\n$upperCaseString = $lowerCaseString.ToUpper()\n\n# Checking if a string contains a certain substring\n$searchString = &quot;This is a sample string&quot;\n$containsSubstring = $searchString.Contains(&quot;sample&quot;)\n\n# Finding the index of a specific substring within a larger string\n$findIndexString = &quot;Finding index in a string&quot;\n$index = $findIndexString.IndexOf(&quot;index&quot;)\n\n# Getting the length of a string\n$lengthOfString = &quot;Count me&quot;\n$stringLength = $lengthOfString.Length\n\n# Reversing a string\n$stringToReverse = &quot;ReverseMe&quot;\n$reversedString = [char[]]::new($stringToReverse.ToCharArray(), $stringToReverse.Length) -join &quot;&quot;\n\n# Formatting a string with placeholders for variables\n$placeholderString = &quot;This is {0} example&quot;\n$formattedString = $placeholderString -f &quot;an&quot;\n\n# Parsing and manipulating data stored in a string format (such as JSON or XML)\n$jsonString = &#x27;{ &quot;key&quot;: &quot;value&quot; }&#x27;\n$parsedJson = ConvertFrom-Json $jsonString\n\n# Generating a string representation of an object for debugging or logging\n$sampleObject = [PSCustomObject]@{\n    Name = &quot;Alice&quot;\n    Age = 30\n}\n$stringRepresentation = $sampleObject | Out-String\n\n# Validating and sanitizing user input received as strings\n$userInput = Read-Host &quot;Enter your name&quot;\n$sanitizedInput = $userInput -replace &#x27;[^\\w\\s]&#x27;\n\n# Implementing algorithms like string matching, searching, or sorting\n$haystack = &quot;Look for needle in haystack&quot;\n$needle = &quot;needle&quot;\n$needleFound = $haystack -match $needle\n\n# Output results for demonstration\nWrite-Host $concatenatedString\nWrite-Host $splitArray\nWrite-Host $modifiedString\nWrite-Host $trimmedString\nWrite-Host $upperCaseString\nWrite-Host $containsSubstring\nWrite-Host $index\nWrite-Host $stringLength\nWrite-Host $reversedString\nWrite-Host $formattedString\nWrite-Host $parsedJson\nWrite-Host $stringRepresentation\nWrite-Host $sanitizedInput\nWrite-Host $needleFound\n"
          }
        },
        "lua": {
          "name": "lua",
          "displayname": "Lua",
          "comment": "--",
          "ext": "lua",
          "css": "lua",
          "categories": "programming",
          "snippets": {
            "arrays": "-- Storing a collection of elements of the same data type\nmyArray = {1, 2, 3, 4, 5}\n\n-- Accessing individual elements via index\nprint(myArray[3])\n\n-- Iterating over elements using loops\nfor i = 1, #myArray do\n    print(myArray[i])\nend\n\n-- Sorting elements in ascending order\ntable.sort(myArray)\n\n-- Searching for a specific element within the array\nlocal searchValue = 3\nfor i = 1, #myArray do\n    if myArray[i] == searchValue then\n        print(&quot;Element found at index: &quot; .. i)\n        break\n    end\nend\n\n-- Modifying elements at specific positions\nmyArray[2] = 10\n\n-- Adding elements to the end of the array\ntable.insert(myArray, 6)\n\n-- Removing elements from the array\ntable.remove(myArray, 3)\n\n-- Merging two arrays into a single array\nsecondArray = {7, 8, 9}\nfor i = 1, #secondArray do\n    table.insert(myArray, secondArray[i])\nend\n\n-- Splitting an array into multiple smaller arrays\nsize = 3\nfor i = 1, #myArray, size do\n    local subArray = {}\n    for j = i, math.min(i + size - 1, #myArray) do\n        table.insert(subArray, myArray[j])\n    end\n    print(&quot;Split Array:&quot;)\n    for j = 1, #subArray do\n        print(subArray[j])\n    end\nend\n\n-- Finding the maximum element in the array\nlocal maxElement = math.max(table.unpack(myArray))\n\n-- Filtering elements based on a condition\nlocal filteredArray = {}\nfor i = 1, #myArray do\n    if myArray[i] &gt; 4 then\n        table.insert(filteredArray, myArray[i])\n    end\nend\n\n-- Mapping elements to a new value\nfor i = 1, #myArray do\n    myArray[i] = myArray[i] * 2\nend\n\n-- Reversing the order of elements in the array\nfor i = 1, math.floor(#myArray / 2) do\n    myArray[i], myArray[#myArray - i + 1] = myArray[#myArray - i + 1], myArray[i]\nend\n\n-- Calculating the sum of array elements\nlocal sum = 0\nfor i = 1, #myArray do\n    sum = sum + myArray[i]\nend\n\n-- Copying elements from one array to another\ncopiedArray = {}\nfor i = 1, #myArray do\n    table.insert(copiedArray, myArray[i])\nend\n\n-- Checking if an array contains a certain element\nlocal elementToCheck = 8\nlocal found = false\nfor i = 1, #myArray do\n    if myArray[i] == elementToCheck then\n        found = true\n        break\n    end\nend\n\n-- Converting an array to a string\nlocal arrayString = table.concat(myArray, &quot;, &quot;)\n\n-- Creating multi-dimensional arrays for complex data structures\nmultiArray = {\n    {1, 2, 3},\n    {4, 5, 6},\n    {7, 8, 9}\n}\n\n-- Implementing algorithms like binary search or quicksort using arrays (Binary Search example)\nlocal function binarySearch(array, element)\n    local low = 1\n    local high = #array\n    while low &lt;= high do\n        local mid = math.floor((low + high) / 2)\n        if array[mid] == element then\n            return mid\n        elseif array[mid] &lt; element then\n            low = mid + 1\n        else\n            high = mid - 1\n        end\n    end\n    return -1\nend\n\n-- Testing binary search\ntable.sort(myArray)\nlocal index = binarySearch(myArray, 6)\nif index ~= -1 then\n    print(&quot;Element found at index: &quot; .. index)\nelse\n    print(&quot;Element not found&quot;)\nend\n",
            "regexps": "-- Lua - regex_examples.lua\n-- Lua does not have built-in regex support, but uses pattern matching instead\n\n-- Pattern Matching\nlocal text = &quot;There are 123 apples&quot;\nlocal match = string.match(text, &quot;%d+&quot;)\nprint(&quot;Pattern Matching: &quot; .. (match and &quot;Match found!&quot; or &quot;No match found.&quot;))\n\n-- Search and Replace\ntext = &quot;Hello 123, meet 456&quot;\nlocal result = string.gsub(text, &quot;%d+&quot;, &quot;number&quot;)\nprint(&quot;Search and Replace: &quot; .. result)  -- &quot;Hello number, meet number&quot;\n\n-- String Splitting\ntext = &quot;apple, orange; banana, grape&quot;\nlocal result = {}\nfor token in string.gmatch(text, &quot;([^,;]+)&quot;) do\n  table.insert(result, token)\nend\nprint(&quot;String Splitting: &quot; .. table.concat(result, &quot;, &quot;))  -- [&quot;apple&quot;, &quot; orange&quot;, &quot; banana&quot;, &quot; grape&quot;]\n\n-- Extracting Substrings\ntext = &quot;The date is 2024-06-27&quot;\nlocal year, month, day = string.match(text, &quot;(%d%d%d%d)%-(%d%d)%-(%d%d)&quot;)\nprint(&quot;Extracting Substrings: &quot; .. year .. &quot;, &quot; .. month .. &quot;, &quot; .. day)  -- [&quot;2024&quot;, &quot;06&quot;, &quot;27&quot;]\n\n-- Validation\nlocal email = &quot;example@test.com&quot;\nlocal pattern = &quot;^[a-zA-Z0-9._%%+-]+@[a-zA-Z0-9.-]+%.[a-zA-Z]{2,}$&quot;\nprint(&quot;Validation: &quot; .. (string.match(email, pattern) and &quot;Valid email address!&quot; or &quot;Invalid email address.&quot;))\n\n-- Removing Unwanted Characters\ntext = &quot;Hello, World!&quot;\nlocal cleaned_text = string.gsub(text, &quot;[^%w%s]&quot;, &quot;&quot;)  -- Remove all non-alphanumeric characters\nprint(&quot;Removing Unwanted Characters: &quot; .. cleaned_text)  -- &quot;Hello World&quot;\n\n-- Anchoring Searches\ntext = &quot;The quick brown fox&quot;\npattern = &quot;%f[%w]fox%f[%W]&quot;  -- Match &#x27;fox&#x27; as a whole word\nprint(&quot;Anchoring Searches: &quot; .. (string.match(text, pattern) and &quot;Found&quot; or &quot;Not Found&quot;))\n\n-- Escaping Characters\nlocal function escape_pattern(text)\n  return string.gsub(text, &quot;([^%w])&quot;, &quot;%%%1&quot;)\nend\nlocal user_input = &quot;some[unsafe]input&quot;\nlocal escaped_input = escape_pattern(user_input)\nprint(&quot;Escaping Characters: &quot; .. escaped_input)  -- &quot;some%[unsafe%]input&quot;\n\n-- Conditional Matching\ntext = &quot;foobar and foo&quot;\npattern = &quot;foo(?=bar)&quot;  -- Match &#x27;foo&#x27; only if followed by &#x27;bar&#x27;\nlocal found = string.match(text, &quot;foo()bar&quot;) and string.sub(text, string.match(text, &quot;foo()bar&quot;) - 3, string.match(text, &quot;foo()bar&quot;) - 1) or &quot;&quot;\nprint(&quot;Conditional Matching: &quot; .. found)  -- &quot;foo&quot;\n\n",
            "strings": "-- Concatenating two strings together to create a longer string\nlocal str1 = &quot;Hello&quot;\nlocal str2 = &quot;World&quot;\nlocal concatStr = str1 .. &quot; &quot; .. str2\nprint(concatStr)\n\n-- Splitting a string into an array of substrings based on a delimiter\nlocal str = &quot;apple,banana,orange&quot;\nlocal substrings = {}\nfor substring in str:gmatch(&quot;[^,]+&quot;) do\n    table.insert(substrings, substring)\nend\nprint(substrings[1])\nprint(substrings[2])\nprint(substrings[3])\n\n-- Replacing a specific substring with another substring within a larger string\nlocal originalStr = &quot;I love apples&quot;\nlocal replacedStr = string.gsub(originalStr, &quot;apples&quot;, &quot;bananas&quot;)\nprint(replacedStr)\n\n-- Removing leading and trailing whitespace from a string\nlocal strWithWhitespace = &quot;    Trim whitespace    &quot;\nlocal trimmedStr = strWithWhitespace:match(&quot;^%s*(.-)%s*$&quot;)\nprint(trimmedStr)\n\n-- Converting a string to uppercase or lowercase\nlocal lowercaseStr = &quot;hello lua&quot;\nlocal uppercaseStr = string.upper(lowercaseStr)\nprint(uppercaseStr)\n\n-- Checking if a string contains a certain substring\nlocal sampleStr = &quot;The quick brown fox&quot;\nif string.find(sampleStr, &quot;brown&quot;) then\n    print(&quot;Contains &#x27;brown&#x27;&quot;)\nelse\n    print(&quot;Does not contain &#x27;brown&#x27;&quot;)\nend\n\n-- Finding the index of a specific substring within a larger string\nlocal index = string.find(&quot;Hello Lua&quot;, &quot;Lua&quot;)\nprint(index)\n\n-- Getting the length of a string\nlocal length = string.len(&quot;Hello&quot;)\nprint(length)\n\n-- Reversing a string\nlocal strToReverse = &quot;Lua Programming&quot;\nlocal reversedStr = string.reverse(strToReverse)\nprint(reversedStr)\n\n-- Formatting a string with placeholders for variables\nlocal name = &quot;Alice&quot;\nlocal age = 30\nlocal formattedStr = string.format(&quot;Name: %s, Age: %d&quot;, name, age)\nprint(formattedStr)\n\n-- Parsing and manipulating data stored in a string format (such as JSON or XML)\nlocal jsonString = &#x27;{&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 30}&#x27;\nlocal jsonData = json.decode(jsonString)\nprint(jsonData.name)\n\n-- Generating a string representation of an object for debugging or logging\nlocal tableData = {name = &quot;Bob&quot;, age = 25}\nlocal strRepresentation = table.concat(tableData, &quot;, &quot;)\nprint(strRepresentation)\n\n-- Validating and sanitizing user input received as strings\nlocal userInput = &quot;   risky input  &quot;\nlocal sanitizedInput = userInput:gsub(&quot;%s+&quot;, &quot;&quot;) -- remove whitespace\nprint(sanitizedInput)\n\n-- Implementing algorithms like string matching, searching, or sorting\nlocal pattern = &quot;banana&quot;\nlocal matchStr = &quot;I love bananas&quot;\nif string.match(matchStr, pattern) then\n    print(&quot;Found match&quot;)\nelse\n    print(&quot;No match found&quot;)\nend\n"
          }
        },
        "js": {
          "name": "js",
          "displayname": "JavaScript",
          "comment": "#|//",
          "ext": "js",
          "css": "javascript",
          "categories": "programming",
          "snippets": {
            "arrays": "// Creating an array to store elements of the same data type\nconst numbers = [1, 2, 3, 4, 5];\n\n// Accessing elements via index\nconst secondElement = numbers[1];\n\n// Iterating over elements using loops\nfor (let i = 0; i &lt; numbers.length; i++) {\n  console.log(numbers[i]);\n}\n\n// Sorting elements in ascending order\nnumbers.sort((a, b) =&gt; a - b);\n\n// Searching for a specific element (e.g., 3) within the array\nconst index = numbers.indexOf(3);\n\n// Modifying element at a specific position (e.g., changing 2 to 8)\nnumbers[1] = 8;\n\n// Adding elements to the end of the array\nnumbers.push(6);\n\n// Removing elements from the array (e.g., removing the first element)\nnumbers.shift();\n\n// Merging two arrays into a single array\nconst newNumbers = numbers.concat([7, 9]);\n\n// Splitting an array into smaller arrays\nconst smallerArrays = [];\nwhile (numbers.length) {\n  smallerArrays.push(numbers.splice(0, 2));\n}\n\n// Finding the maximum element in the array\nconst max = Math.max(...numbers);\n\n// Filtering elements based on a condition (e.g., even numbers)\nconst filteredNumbers = numbers.filter(num =&gt; num % 2 === 0);\n\n// Mapping elements to a new value (e.g., doubling each element)\nconst doubledNumbers = numbers.map(num =&gt; num * 2);\n\n// Reversing the order of elements in the array\nconst reversedNumbers = numbers.reverse();\n\n// Calculating the sum of array elements\nconst sum = numbers.reduce((acc, curr) =&gt; acc + curr, 0);\n\n// Copying elements from one array to another\nconst copiedNumbers = [...numbers];\n\n// Checking if an array contains a certain element (e.g., if 5 is present)\nconst containsFive = numbers.includes(5);\n\n// Converting an array to a string\nconst numbersString = numbers.join(&#x27;,&#x27;);\n\n// Converting a string back to an array\nconst newNumbersArr = numbersString.split(&#x27;,&#x27;);\n\n// Creating multi-dimensional arrays\nconst multiArray = [[1, 2], [3, 4]];\n\n// Implementing algorithms like binary search or quicksort\nfunction binarySearch(arr, target) {\n  let low = 0;\n  let high = arr.length - 1;\n\n  while (low &lt;= high) {\n    let mid = Math.floor((low + high) / 2);\n\n    if (arr[mid] === target) return mid;\n    if (arr[mid] &lt; target) low = mid + 1;\n    else high = mid - 1;\n  }\n\n  return -1; // element not found\n}\n",
            "regexps": "// JavaScript - regex_examples.js\n\n// Pattern Matching\nlet pattern = /\\d+/;  // Match one or more digits\nlet text = &quot;There are 123 apples&quot;;\nconsole.log(&quot;Pattern Matching:&quot;, pattern.test(text) ? &quot;Match found!&quot; : &quot;No match found.&quot;);\n\n// Search and Replace\ntext = &quot;Hello 123, meet 456&quot;;\nlet result = text.replace(/\\d+/g, &#x27;number&#x27;);\nconsole.log(&quot;Search and Replace:&quot;, result);  // &quot;Hello number, meet number&quot;\n\n// String Splitting\ntext = &quot;apple, orange; banana, grape&quot;;\nresult = text.split(/[,;]/);\nconsole.log(&quot;String Splitting:&quot;, result);  // [&quot;apple&quot;, &quot; orange&quot;, &quot; banana&quot;, &quot; grape&quot;]\n\n// Extracting Substrings\ntext = &quot;The date is 2024-06-27&quot;;\npattern = /(\\d{4})-(\\d{2})-(\\d{2})/;\nlet match = text.match(pattern);\nconsole.log(&quot;Extracting Substrings:&quot;, match ? match.slice(1) : &quot;No match found&quot;);  // [&quot;2024&quot;, &quot;06&quot;, &quot;27&quot;]\n\n// Validation\nlet email = &quot;example@test.com&quot;;\npattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\nconsole.log(&quot;Validation:&quot;, pattern.test(email) ? &quot;Valid email address!&quot; : &quot;Invalid email address.&quot;);\n\n// Removing Unwanted Characters\ntext = &quot;Hello, World!&quot;;\nlet cleanedText = text.replace(/[^\\w\\s]/g, &#x27;&#x27;);  // Remove all non-alphanumeric characters\nconsole.log(&quot;Removing Unwanted Characters:&quot;, cleanedText);  // &quot;Hello World&quot;\n\n// Anchoring Searches\ntext = &quot;The quick brown fox&quot;;\npattern = /\\bfox\\b/;  // Match &#x27;fox&#x27; as a whole word\nconsole.log(&quot;Anchoring Searches:&quot;, pattern.test(text) ? &quot;Found&quot; : &quot;Not Found&quot;);\n\n// Escaping Characters\nuser_input = &quot;some[unsafe]input&quot;;\nlet escaped_input = user_input.replace(/[.*+?^${}()|[\\]\\\\]/g, &#x27;\\\\$&amp;&#x27;);\npattern = new RegExp(escaped_input);\nconsole.log(&quot;Escaping Characters:&quot;, pattern);  // /some\\[unsafe\\]input/\n\n// Conditional Matching\npattern = /foo(?=bar)/;  // Match &#x27;foo&#x27; only if followed by &#x27;bar&#x27;\ntext = &quot;foobar and foo&quot;;\nmatches = text.match(pattern);\nconsole.log(&quot;Conditional Matching:&quot;, matches);  // [&quot;foo&quot;]\n\n",
            "strings": "// Concatenating two strings together\nconst string1 = &quot;Hello&quot;;\nconst string2 = &quot;World&quot;;\nconst concatenatedString = string1 + &quot; &quot; + string2;\nconsole.log(concatenatedString);\n\n// Splitting a string into an array of substrings\nconst sentence = &quot;The quick brown fox&quot;;\nconst words = sentence.split(&quot; &quot;);\nconsole.log(words);\n\n// Replacing a specific substring within a larger string\nconst originalString = &quot;I like apples&quot;;\nconst replacedString = originalString.replace(&quot;apples&quot;, &quot;oranges&quot;);\nconsole.log(replacedString);\n\n// Removing leading and trailing whitespace from a string\nconst stringWithSpaces = &quot;   Trim this sentence   &quot;;\nconst trimmedString = stringWithSpaces.trim();\nconsole.log(trimmedString);\n\n// Converting a string to uppercase or lowercase\nconst lowercaseString = &quot;lowercase&quot;;\nconst uppercaseString = lowercaseString.toUpperCase();\nconsole.log(uppercaseString);\n\n// Checking if a string contains a certain substring\nconst paragraph = &quot;The quick brown fox jumps over the lazy dog&quot;;\nconst containsSubstring = paragraph.includes(&quot;fox&quot;);\nconsole.log(containsSubstring);\n\n// Finding the index of a specific substring within a larger string\nconst index = paragraph.indexOf(&quot;brown&quot;);\nconsole.log(index);\n\n// Getting the length of a string\nconst str = &quot;Hello, World!&quot;;\nconst length = str.length;\nconsole.log(length);\n\n// Reversing a string\nconst originalWord = &quot;hello&quot;;\nconst reversedWord = originalWord.split(&quot;&quot;).reverse().join(&quot;&quot;);\nconsole.log(reversedWord);\n\n// Formatting a string with placeholders for variables\nconst name = &quot;Alice&quot;;\nconst age = 30;\nconst formattedMessage = `Hello, my name is ${name} and I am ${age} years old`;\nconsole.log(formattedMessage);\n\n// Parsing and manipulating data stored in a string format\nconst jsonString = &#x27;{&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 25}&#x27;;\nconst parsedObject = JSON.parse(jsonString);\nconsole.log(parsedObject.name);\n\n// Generating a string representation of an object for debugging or logging\nconst obj = { name: &quot;Tom&quot;, age: 40, city: &quot;New York&quot; };\nconst stringifiedObj = JSON.stringify(obj);\nconsole.log(stringifiedObj);\n\n// Validating and sanitizing user input received as strings\nconst userInput = &quot; &lt;script&gt;alert(&#x27;XSS&#x27;);&lt;/script&gt; &quot;;\nconst sanitizedInput = userInput.replace(/(&lt;([^&gt;]+)&gt;)/gi, &quot;&quot;);\nconsole.log(sanitizedInput);\n\n// Implementing algorithms like string matching, searching, or sorting\nconst inputStrings = [&quot;banana&quot;, &quot;apple&quot;, &quot;orange&quot;];\nconst sortedStrings = inputStrings.sort();\nconsole.log(sortedStrings);\n"
          }
        },
        "go": {
          "name": "go",
          "displayname": "Go (GoLang)",
          "comment": "#|//",
          "ext": "go",
          "css": "golang",
          "categories": "programming",
          "snippets": {
            "arrays": "package main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;sort&quot;\n)\n\nfunc main() {\n\t// Storing a collection of elements of the same data type\n\tnumbers := []int{1, 2, 3, 4, 5}\n\n\t// Accessing individual elements via index\n\tfmt.Println(numbers[0])\n\n\t// Iterating over elements using loops\n\tfor i := 0; i &lt; len(numbers); i++ {\n\t\tfmt.Println(numbers[i])\n\t}\n\n\t// Sorting elements in ascending order\n\tsort.Ints(numbers)\n\tfmt.Println(numbers)\n\n\t// Searching for a specific element within the array\n\tsearchElement := 3\n\tfor i := 0; i &lt; len(numbers); i++ {\n\t\tif numbers[i] == searchElement {\n\t\t\tfmt.Printf(&quot;%d found at index %d\\n&quot;, searchElement, i)\n\t\t\tbreak\n\t\t}\n\t}\n\n\t// Modifying elements at specific positions\n\tnumbers[2] = 10\n\tfmt.Println(numbers)\n\n\t// Adding elements to the end of the array\n\tnumbers = append(numbers, 6)\n\tfmt.Println(numbers)\n\n\t// Removing elements from the array\n\tindexToRemove := 1\n\tnumbers = append(numbers[:indexToRemove], numbers[indexToRemove+1:]...)\n\tfmt.Println(numbers)\n\n\t// Merging two arrays into a single array\n\totherNumbers := []int{7, 8, 9}\n\tnumbers = append(numbers, otherNumbers...)\n\tfmt.Println(numbers)\n\n\t// Splitting an array into multiple smaller arrays\n\tchunkSize := 2\n\tfor i := 0; i &lt; len(numbers); i += chunkSize {\n\t\tfmt.Println(numbers[i : i+chunkSize])\n\t}\n\n\t// Finding the maximum element in the array\n\tmax := numbers[0]\n\tfor _, num := range numbers {\n\t\tif num &gt; max {\n\t\t\tmax = num\n\t\t}\n\t}\n\tfmt.Println(&quot;Max element:&quot;, max)\n\n\t// Filtering elements based on a condition\n\tfilteredNumbers := []int{}\n\tfor _, num := range numbers {\n\t\tif num%2 == 0 {\n\t\t\tfilteredNumbers = append(filteredNumbers, num)\n\t\t}\n\t}\n\tfmt.Println(&quot;Filtered numbers:&quot;, filteredNumbers)\n\n\t// Mapping elements to a new value\n\tfor i, num := range numbers {\n\t\tnumbers[i] = num * 2\n\t}\n\tfmt.Println(numbers)\n\n\t// Reversing the order of elements in the array\n\treversedNumbers := []int{}\n\tfor i := len(numbers) - 1; i &gt;= 0; i-- {\n\t\treversedNumbers = append(reversedNumbers, numbers[i])\n\t}\n\tfmt.Println(&quot;Reversed numbers:&quot;, reversedNumbers)\n\n\t// Calculating the sum of array elements\n\tsum := 0\n\tfor _, num := range numbers {\n\t\tsum += num\n\t}\n\tfmt.Println(&quot;Sum:&quot;, sum)\n\n\t// Copying elements from one array to another\n\tcopiedNumbers := make([]int, len(numbers))\n\tcopy(copiedNumbers, numbers)\n\tfmt.Println(&quot;Copied numbers:&quot;, copiedNumbers)\n\n\t// Checking if an array contains a certain element\n\telementToCheck := 4\n\tfound := false\n\tfor _, num := range numbers {\n\t\tif num == elementToCheck {\n\t\t\tfound = true\n\t\t\tbreak\n\t\t}\n\t}\n\tfmt.Println(&quot;Element found:&quot;, found)\n\n\t// Converting an array to a string\n\tstr := fmt.Sprint(numbers)\n\tfmt.Println(&quot;Array as string:&quot;, str)\n}\n",
            "regexps": "// Go - regex_examples.go\npackage main\n\nimport (\n    &quot;fmt&quot;\n    &quot;regexp&quot;\n)\n\nfunc main() {\n    // Pattern Matching\n    pattern := `\\d+`  // Match one or more digits\n    text := &quot;There are 123 apples&quot;\n    matched, _ := regexp.MatchString(pattern, text)\n    fmt.Println(&quot;Pattern Matching:&quot;, matched)\n\n    // Search and Replace\n    re := regexp.MustCompile(pattern)\n    text = &quot;Hello 123, meet 456&quot;\n    result := re.ReplaceAllString(text, &quot;number&quot;)\n    fmt.Println(&quot;Search and Replace:&quot;, result)  // &quot;Hello number, meet number&quot;\n\n    // String Splitting\n    text = &quot;apple, orange; banana, grape&quot;\n    re = regexp.MustCompile(`[ ,;]+`)\n    resultSlice := re.Split(text, -1)\n    fmt.Println(&quot;String Splitting:&quot;, resultSlice)  // [&quot;apple&quot;, &quot;orange&quot;, &quot;banana&quot;, &quot;grape&quot;]\n\n    // Extracting Substrings\n    log_entry := &quot;The date is 2024-06-27&quot;\n    re = regexp.MustCompile(`(\\d{4})-(\\d{2})-(\\d{2})`)\n    match := re.FindStringSubmatch(log_entry)\n    fmt.Println(&quot;Extracting Substrings:&quot;, match)  // [&quot;2024-06-27&quot;, &quot;2024&quot;, &quot;06&quot;, &quot;27&quot;]\n\n    // Validation\n    email := &quot;example@test.com&quot;\n    pattern = `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$`\n    matched, _ = regexp.MatchString(pattern, email)\n    fmt.Println(&quot;Validation:&quot;, matched)\n\n    // Removing Unwanted Characters\n    text = &quot;Hello, World!&quot;\n    re = regexp.MustCompile(`[^\\w\\s]`)  // Remove all non-alphanumeric characters\n    cleaned_text := re.ReplaceAllString(text, &quot;&quot;)\n    fmt.Println(&quot;Removing Unwanted Characters:&quot;, cleaned_text)  // &quot;Hello World&quot;\n\n    // Anchoring Searches\n    text = &quot;The quick brown fox&quot;\n    re = regexp.MustCompile(`\\bfox\\b`)  // Match &#x27;fox&#x27; as a whole word\n    fmt.Println(&quot;Anchoring Searches:&quot;, re.MatchString(text))\n\n    // Escaping Characters\n    user_input := &quot;some[unsafe]input&quot;\n    escaped_input := regexp.QuoteMeta(user_input)\n    fmt.Println(&quot;Escaping Characters:&quot;, escaped_input)  // &quot;some\\[unsafe\\]input&quot;\n\n    // Conditional Matching\n    re = regexp.MustCompile(`foo(?=bar)`)  // Match &#x27;foo&#x27; only if followed by &#x27;bar&#x27;\n    text = &quot;foobar and foo&quot;\n    matches := re.FindAllString(text, -1)\n    fmt.Println(&quot;Conditional Matching:&quot;, matches)  // [&quot;foo&quot;]\n}\n\n",
            "strings": "package main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;strings&quot;\n)\n\n// Concatenating two strings together to create a longer string\nfunc concatenateStrings(str1, str2 string) string {\n\treturn str1 + str2\n}\n\n// Splitting a string into an array of substrings based on a delimiter\nfunc splitString(str, delimiter string) []string {\n\treturn strings.Split(str, delimiter)\n}\n\n// Replacing a specific substring with another substring within a larger string\nfunc replaceSubstring(mainStr, oldSub, newSub string) string {\n\treturn strings.Replace(mainStr, oldSub, newSub, -1)\n}\n\n// Removing leading and trailing whitespace from a string\nfunc trimString(str string) string {\n\treturn strings.TrimSpace(str)\n}\n\n// Converting a string to uppercase or lowercase\nfunc convertCase(str, caseType string) string {\n\tif caseType == &quot;uppercase&quot; {\n\t\treturn strings.ToUpper(str)\n\t} else if caseType == &quot;lowercase&quot; {\n\t\treturn strings.ToLower(str)\n\t}\n\treturn &quot;&quot;\n}\n\n// Checking if a string contains a certain substring\nfunc containsSubstring(str, sub string) bool {\n\treturn strings.Contains(str, sub)\n}\n\n// Finding the index of a specific substring within a larger string\nfunc findIndexString(mainStr, sub string) int {\n\treturn strings.Index(mainStr, sub)\n}\n\n// Getting the length of a string\nfunc getStringLength(str string) int {\n\treturn len(str)\n}\n\n// Reversing a string\nfunc reverseString(str string) string {\n\trunes := []rune(str)\n\tfor i, j := 0, len(runes)-1; i &lt; j; i, j = i+1, j-1 {\n\t\trunes[i], runes[j] = runes[j], runes[i]\n\t}\n\treturn string(runes)\n}\n\nfunc main() {\n\tstr1 := &quot;Hello&quot;\n\tstr2 := &quot;World&quot;\n\tconcatenatedStr := concatenateStrings(str1, str2)\n\tfmt.Println(&quot;Concatenated String:&quot;, concatenatedStr)\n\n\tsplitStr := &quot;apple,banana,cherry&quot;\n\tdelimiter := &quot;,&quot;\n\tsplitArr := splitString(splitStr, delimiter)\n\tfmt.Println(&quot;Split Array:&quot;, splitArr)\n\n\treplacedStr := replaceSubstring(&quot;Hello, World!&quot;, &quot;Hello&quot;, &quot;Hola&quot;)\n\tfmt.Println(&quot;Replaced String:&quot;, replacedStr)\n\n\ttrimmedStr := trimString(&quot;  Example String   &quot;)\n\tfmt.Println(&quot;Trimmed String:&quot;, trimmedStr)\n\n\tcaseStr := &quot;lowercase&quot;\n\tfmt.Println(&quot;Converted Case:&quot;, convertCase(caseStr, &quot;uppercase&quot;))\n\n\tsearchStr := &quot;This is a key sentence.&quot;\n\tsubStr := &quot;key&quot;\n\tfmt.Println(&quot;Contains Substring:&quot;, containsSubstring(searchStr, subStr))\n\n\tindexStr := &quot;Finding the index&quot;\n\tsubIndex := &quot;the&quot;\n\tfmt.Println(&quot;Index of Substring:&quot;, findIndexString(indexStr, subIndex))\n\n\tlengthStr := &quot;Length of this string&quot;\n\tfmt.Println(&quot;String Length:&quot;, getStringLength(lengthStr))\n\n\treversedStr := &quot;reverse&quot;\n\tfmt.Println(&quot;Reversed String:&quot;, reverseString(reversedStr))\n}\n"
          }
        },
        "php": {
          "name": "php",
          "displayname": "PHP",
          "comment": "#|//",
          "ext": "php",
          "css": "php",
          "categories": "programming",
          "snippets": {
            "arrays": "&lt;?php\n\n// 1. Storing a collection of elements of the same data type\n$nums = [1, 2, 3, 4, 5];\n\n// 2. Accessing individual elements via index\necho $nums[0]; // Output: 1\n\n// 3. Iterating over elements using loops\nforeach ($nums as $num) {\n    echo $num . &quot; &quot;;\n}\n\n// 4. Sorting elements in ascending order\nsort($nums);\n\n// 5. Searching for a specific element within the array\n$index = array_search(3, $nums); // Output: 2\n\n// 6. Modifying elements at specific positions\n$nums[2] = 10;\n\n// 7. Adding elements to the end of the array\n$nums[] = 6;\n\n// 8. Removing elements from the array\nunset($nums[1]);\n\n// 9. Merging two arrays into a single array\n$moreNums = [7, 8, 9];\n$combinedNums = array_merge($nums, $moreNums);\n\n// 10. Splitting an array into multiple smaller arrays\n$chunks = array_chunk($combinedNums, 2);\n\n// 11. Finding the maximum element in the array\n$maxNum = max($combinedNums);\n\n// 12. Filtering elements based on a condition\n$filteredNums = array_filter($combinedNums, function ($num) {\n    return $num % 2 == 0;\n});\n\n// 13. Mapping elements to a new value\n$mappedNums = array_map(function ($num) {\n    return $num * 2;\n}, $nums);\n\n// 14. Reversing the order of elements in the array\n$reversedNums = array_reverse($nums);\n\n// 15. Calculating the sum or average of array elements\n$sum = array_sum($nums);\n$avg = $sum / count($nums);\n\n// 16. Copying elements from one array to another\n$copyOfNums = $nums;\n\n// 17. Checking if an array contains a certain element\n$containsThree = in_array(3, $nums); // Output: true\n\n// 18. Converting an array to a string\n$numsString = implode(&quot;, &quot;, $nums);\n\n// 19. Creating multi-dimensional arrays for complex data structures\n$multiDimArray = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\n// 20. Implementing algorithms like binary search or quicksort using arrays\n\n?&gt;\n",
            "strings": "&lt;?php\n\n// Concatenating two strings together to create a longer string\n$string1 = &quot;Hello&quot;;\n$string2 = &quot;World&quot;;\n$concatenatedString = $string1 . &quot; &quot; . $string2;\necho $concatenatedString . &quot;\\n&quot;;\n\n// Splitting a string into an array of substrings based on a delimiter\n$originalString = &quot;Apple,Orange,Banana,Grape&quot;;\n$splitArray = explode(&quot;,&quot;, $originalString);\nprint_r($splitArray);\n\n// Replacing a specific substring with another substring within a larger string\n$bigString = &quot;I like apples and apples are delicious.&quot;;\n$newString = str_replace(&quot;apples&quot;, &quot;bananas&quot;, $bigString);\necho $newString . &quot;\\n&quot;;\n\n// Removing leading and trailing whitespace from a string\n$whitespaceString = &quot;   Trim whitespaces   &quot;;\n$trimmedString = trim($whitespaceString);\necho $trimmedString . &quot;\\n&quot;;\n\n// Converting a string to uppercase or lowercase\n$originalCaseString = &quot;Hello, World!&quot;;\n$uppercaseString = strtoupper($originalCaseString);\n$lowercaseString = strtolower($originalCaseString);\necho $uppercaseString . &quot;\\n&quot;;\necho $lowercaseString . &quot;\\n&quot;;\n\n// Checking if a string contains a certain substring\n$searchString = &quot;The quick brown fox jumps over the lazy dog&quot;;\n$substrToCheck = &quot;brown&quot;;\nif (strpos($searchString, $substrToCheck) !== false) {\n    echo &quot;Substring found!\\n&quot;;\n} else {\n    echo &quot;Substring not found.\\n&quot;;\n}\n\n// Finding the index of a specific substring within a larger string\n$subStrToFind = &quot;lazy&quot;;\n$index = strpos($searchString, $subStrToFind);\necho &quot;Index of &#x27;{$subStrToFind}&#x27;: {$index}\\n&quot;;\n\n// Getting the length of a string\n$lengthString = &quot;This is a string&quot;;\n$length = strlen($lengthString);\necho &quot;Length of string: {$length}\\n&quot;;\n\n// Reversing a string\n$reverseString = strrev($lengthString);\necho &quot;Reversed string: {$reverseString}\\n&quot;;\n\n// Formatting a string with placeholders for variables\n$name = &quot;Alice&quot;;\n$age = 30;\n$formattedString = sprintf(&quot;Name: %s, Age: %d&quot;, $name, $age);\necho $formattedString . &quot;\\n&quot;;\n\n// Parsing and manipulating data stored in a string format (such as JSON or XML)\n$jsonData = &#x27;{&quot;name&quot;: &quot;Bob&quot;, &quot;age&quot;: 25}&#x27;;\n$decodedData = json_decode($jsonData, true);\necho &quot;Name: &quot; . $decodedData[&#x27;name&#x27;] . &quot;, Age: &quot; . $decodedData[&#x27;age&#x27;] . &quot;\\n&quot;;\n\n// Generating a string representation of an object for debugging or logging\nclass Person {\n    public $name = &quot;John&quot;;\n    public $age = 40;\n}\n\n$person = new Person();\n$objectString = print_r($person, true);\necho $objectString . &quot;\\n&quot;;\n\n// Validating and sanitizing user input received as strings\n$userInput = &quot;&lt;script&gt;alert(&#x27;XSS&#x27;);&lt;/script&gt;&quot;;\n$sanitizedInput = htmlspecialchars($userInput, ENT_QUOTES, &#x27;UTF-8&#x27;);\necho $sanitizedInput . &quot;\\n&quot;;\n\n// Implementing algorithms like string matching, searching, or sorting\n$haystack = &quot;The quick brown fox jumps over the lazy dog&quot;;\n$needle = &quot;fox&quot;;\nif (strpos($haystack, $needle) !== false) {\n    echo &quot;Needle found!\\n&quot;;\n} else {\n    echo &quot;Needle not found.\\n&quot;;\n}\n\n?&gt;\n"
          }
        }
      },
      "topics": {
        "regexps": {
          "name": "regexps",
          "displayname": "Regular Expressions",
          "aliases": "validation regexps pcre matcher"
        },
        "strings": {
          "name": "strings",
          "displayname": "Strings and Texts",
          "aliases": "strings texts",
          "operations": [
            "Concatenating two strings together to create a longer string",
            "Splitting a string into an array of substrings based on a delimiter",
            "Replacing a specific substring with another substring within a larger string",
            "Removing leading and trailing whitespace from a string",
            "Converting a string to uppercase or lowercase",
            "Checking if a string contains a certain substring",
            "Finding the index of a specific substring within a larger string",
            "Getting the length of a string",
            "Reversing a string",
            "Formatting a string with placeholders for variables",
            "Parsing and manipulating data stored in a string format (such as JSON or XML)",
            "Generating a string representation of an object for debugging or logging",
            "Validating and sanitizing user input received as strings",
            "Implementing algorithms like string matching, searching, or sorting"
          ],
          "question": "Please respond only with answers, formatted as a yaml array of descriptions.I want a fairly comprehensive list of common programming uses with enough detail to generate code about the topic \"working with strings\".",
          "want": "working with strings"
        },
        "arrays": {
          "name": "arrays",
          "displayname": "Arrays",
          "aliases": "list ordered",
          "operations": [
            "Storing a collection of elements of the same data type",
            "Accessing individual elements via index",
            "Iterating over elements using loops",
            "Sorting elements in ascending or descending order",
            "Searching for a specific element within the array",
            "Modifying elements at specific positions",
            "Adding elements to the end of the array",
            "Removing elements from the array",
            "Merging two arrays into a single array",
            "Splitting an array into multiple smaller arrays",
            "Finding the maximum or minimum element in the array",
            "Filtering elements based on a condition",
            "Mapping elements to a new value",
            "Reversing the order of elements in the array",
            "Calculating the sum or average of array elements",
            "Copying elements from one array to another",
            "Checking if an array contains a certain element",
            "Converting an array to a string or vice versa",
            "Creating multi-dimensional arrays for complex data structures",
            "Implementing algorithms like binary search or quicksort using arrays"
          ],
          "question": "Please respond to this question only with answers, formatted as a JSON array of strings. I want a fairly comprehensive list of common programming uses with enough detail to generate code about the topic \"arrays\".",
          "want": "arrays"
        }
      },
      "displayname": "Programming",
      "openai_question": "I want a fairly comprehensive list of common programming uses with enough detail to generate code about the topic \"{want}\"."
    }
  }
};