// Auto-Generated, do not edit
const GENERATED = {
  "buildtime": 1720382218,
  "generatetime": 3440760567,
  "categories": {
    "programming": {
      "name": "programming",
      "languages": {
        "bash": {
          "name": "bash",
          "displayname": "Bash (Shell) Script",
          "comment": "#|//",
          "ext": "sh",
          "css": "bash",
          "categories": "programming",
          "ignore": "bin/bash",
          "snippets": {
            "arrays": "#!/bin/bash\n\n# 1. Storing Data\ndata=(1 2 3 4 5)\necho &quot;Original Data: ${data[@]}&quot;\n\n# 2. Mathematical Operations\nsquared_data=()\nfor i in &quot;${data[@]}&quot;; do\n  squared_data+=($(($i * $i)))\ndone\necho &quot;Squared Data: ${squared_data[@]}&quot;\n\n# 3. Sorting and Searching\nsorted_data=($(for i in &quot;${data[@]}&quot;; do echo $i; done | sort -n))\necho &quot;Sorted Data: ${sorted_data[@]}&quot;\n\nsearch_value=3\nsearch_index=-1\nfor i in &quot;${!data[@]}&quot;; do\n  if [[ ${data[i]} -eq $search_value ]]; then\n    search_index=$i\n    break\n  fi\ndone\necho &quot;Index of $search_value: $search_index&quot;\n\n# 4. Data Analysis\nsum_value=0\nfor i in &quot;${data[@]}&quot;; do\n  sum_value=$(($sum_value + $i))\ndone\nmean_value=$(echo &quot;scale=2; $sum_value / ${#data[@]}&quot; | bc)\necho &quot;Mean Value: $mean_value&quot;\necho &quot;Sum Value: $sum_value&quot;\n\n# 5. Multidimensional Arrays\nmatrix=(\n  &quot;1 2 3&quot;\n  &quot;4 5 6&quot;\n  &quot;7 8 9&quot;\n)\necho &quot;Original Matrix:&quot;\nfor row in &quot;${matrix[@]}&quot;; do\n  echo &quot;$row&quot;\ndone\n\n# Transpose the matrix\ntranspose() {\n  echo &quot;$1&quot; | awk &#x27;\n  {\n    for (i=1; i&lt;=NF; i++) {\n      a[NR,i] = $i\n    }\n  }\n  NF&gt;p { p = NF }\n  END {\n    for (i=1; i&lt;=p; i++) {\n      str = a[1,i]\n      for (j=2; j&lt;=NR; j++) {\n        str = str&quot; &quot;a[j,i]\n      }\n      print str\n    }\n  }&#x27;\n}\n\ntransposed_matrix=$(transpose &quot;$(echo &quot;${matrix[@]}&quot; | tr &#x27; &#x27; &#x27;\\n&#x27;)&quot;)\necho &quot;Transposed Matrix:&quot;\necho &quot;$transposed_matrix&quot;\n\n# Image Processing (simulated with a simple 2D array)\nimage=()\nfor ((i=0; i&lt;5; i++)); do\n  row=()\n  for ((j=0; j&lt;5; j++)); do\n    row+=($(echo &quot;scale=2; $RANDOM/32768&quot; | bc))\n  done\n  image+=(&quot;${row[@]}&quot;)\ndone\n\necho &quot;Original Image:&quot;\nfor row in &quot;${image[@]}&quot;; do\n  echo &quot;$row&quot;\ndone\n\n# Simple operation on image\nbrighter_image=()\nfor row in &quot;${image[@]}&quot;; do\n  new_row=()\n  for pixel in $row; do\n    new_row+=($(echo &quot;scale=2; $pixel * 1.2&quot; | bc))\n  done\n  brighter_image+=(&quot;${new_row[@]}&quot;)\ndone\n\necho &quot;Brighter Image:&quot;\nfor row in &quot;${brighter_image[@]}&quot;; do\n  echo &quot;$row&quot;\ndone\n\n",
            "regexps": "#!/bin/bash\n# Bash - regex_examples.sh\n\n# Pattern Matching\ntext=&quot;There are 123 apples&quot;\nif [[ $text =~ [0-9]+ ]]; then\n    echo &quot;Pattern Matching: Match found!&quot;\nelse\n    echo &quot;Pattern Matching: No match found.&quot;\nfi\n\n# Search and Replace\ntext=&quot;Hello 123, meet 456&quot;\nresult=$(echo &quot;$text&quot; | sed -E &#x27;s/[0-9]+/number/g&#x27;)\necho &quot;Search and Replace: $result&quot;  # &quot;Hello number, meet number&quot;\n\n# String Splitting\ntext=&quot;apple, orange; banana, grape&quot;\nIFS=&#x27;,;&#x27; read -ra result &lt;&lt;&lt; &quot;$text&quot;\necho &quot;String Splitting: ${result[@]}&quot;  # [&quot;apple&quot;, &quot; orange&quot;, &quot; banana&quot;, &quot; grape&quot;]\n\n# Extracting Substrings\ntext=&quot;The date is 2024-06-27&quot;\nif [[ $text =~ ([0-9]{4})-([0-9]{2})-([0-9]{2}) ]]; then\n    echo &quot;Extracting Substrings: ${BASH_REMATCH[1]}, ${BASH_REMATCH[2]}, ${BASH_REMATCH[3]}&quot;  # [&quot;2024&quot;, &quot;06&quot;, &quot;27&quot;]\nfi\n\n# Validation\nemail=&quot;example@test.com&quot;\nif [[ $email =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$ ]]; then\n    echo &quot;Validation: Valid email address!&quot;\nelse\n    echo &quot;Validation: Invalid email address.&quot;\nfi\n\n# Removing Unwanted Characters\ntext=&quot;Hello, World!&quot;\ncleaned_text=$(echo &quot;$text&quot; | sed &#x27;s/[^a-zA-Z0-9 ]//g&#x27;)\necho &quot;Removing Unwanted Characters: $cleaned_text&quot;  # &quot;Hello World&quot;\n\n# Anchoring Searches\ntext=&quot;The quick brown fox&quot;\nif [[ $text =~ \\bfox\\b ]]; then\n    echo &quot;Anchoring Searches: Found&quot;\nelse\n    echo &quot;Anchoring Searches: Not Found&quot;\nfi\n\n# Escaping Characters\nuser_input=&quot;some[unsafe]input&quot;\nescaped_input=$(printf &#x27;%s\\n&#x27; &quot;$user_input&quot; | sed -e &#x27;s/[]\\/$*.^|[]/\\\\&amp;/g&#x27;)\necho &quot;Escaping Characters: $escaped_input&quot;  # &quot;some\\[unsafe\\]input&quot;\n\n# Conditional Matching\ntext=&quot;foobar and foo&quot;\npattern=&quot;foo(?=bar)&quot;\nif [[ $text =~ foo(bar) ]]; then\n    echo &quot;Conditional Matching: ${BASH_REMATCH[0]}&quot;  # &quot;foo&quot;\nfi\n\n"
          }
        },
        "kotlin": {
          "name": "kotlin",
          "displayname": "Kotlin",
          "comment": "#|//",
          "ext": "kt",
          "css": "kotlin",
          "categories": "programming",
          "snippets": {
            "arrays": "fun main() {\n    // 1. Storing Data\n    val data = listOf(1, 2, 3, 4, 5)\n    println(&quot;Original Data: $data&quot;)\n\n    // 2. Mathematical Operations\n    val squaredData = data.map { it * it }\n    println(&quot;Squared Data: $squaredData&quot;)\n\n    // 3. Sorting and Searching\n    val sortedData = data.sorted()\n    println(&quot;Sorted Data: $sortedData&quot;)\n\n    val searchValue = 3\n    val searchIndex = data.indexOf(searchValue)\n    println(&quot;Index of $searchValue: $searchIndex&quot;)\n\n    // 4. Data Analysis\n    val meanValue = data.average()\n    println(&quot;Mean Value: $meanValue&quot;)\n\n    val sumValue = data.sum()\n    println(&quot;Sum Value: $sumValue&quot;)\n\n    // 5. Multidimensional Arrays\n    val matrix = listOf(\n        listOf(1, 2, 3),\n        listOf(4, 5, 6),\n        listOf(7, 8, 9)\n    )\n    println(&quot;Original Matrix:&quot;)\n    matrix.forEach { println(it) }\n\n    // Transpose the matrix\n    val transposedMatrix = List(matrix[0].size) { i -&gt; List(matrix.size) { j -&gt; matrix[j][i] } }\n    println(&quot;Transposed Matrix:&quot;)\n    transposedMatrix.forEach { println(it) }\n\n    // Example of matrix multiplication (identity matrix)\n    val identityMatrix = listOf(\n        listOf(1, 0, 0),\n        listOf(0, 1, 0),\n        listOf(0, 0, 1)\n    )\n    val productMatrix = matrix.map { row -&gt;\n        List(identityMatrix[0].size) { col -&gt;\n            row.indices.sumOf { row[it] * identityMatrix[it][col] }\n        }\n    }\n    println(&quot;Matrix Product with Identity Matrix:&quot;)\n    productMatrix.forEach { println(it) }\n\n    // Image Processing (simulated with a simple 2D array)\n    val image = List(5) { List(5) { kotlin.random.Random.nextDouble() } }\n    println(&quot;Original Image:&quot;)\n    image.forEach { row -&gt; println(row.joinToString(&quot; &quot;) { &quot;%.2f&quot;.format(it) }) }\n\n    // Simple operation on image\n    val brighterImage = image.map { row -&gt; row.map { it * 1.2 } }\n    println(&quot;Brighter Image:&quot;)\n    brighterImage.forEach { row -&gt; println(row.joinToString(&quot; &quot;) { &quot;%.2f&quot;.format(it) }) }\n}\n\n",
            "regexps": "// Kotlin - RegexExamples.kt\nfun main() {\n    // Pattern Matching\n    val pattern = &quot;\\\\d+&quot;.toRegex()  // Match one or more digits\n    val text = &quot;There are 123 apples&quot;\n    println(&quot;Pattern Matching: ${if (pattern.containsMatchIn(text)) &quot;Match found!&quot; else &quot;No match found.&quot;}&quot;)\n\n    // Search and Replace\n\u001bOB\u001bOB\u001bOB    var text = &quot;Hello 123, meet 456&quot;\n    var result = text.replace(&quot;\\\\d+&quot;.toRegex(), &quot;number&quot;)\n    println(&quot;Search and Replace: $result&quot;)  // &quot;Hello number, meet number&quot;\n\n    // String Splitting\n    text = &quot;apple, orange; banana, grape&quot;\n    val resultArray = text.split(&quot;[,;]&quot;.toRegex())\n    println(&quot;String Splitting: ${resultArray.joinToString(&quot;, &quot;)}&quot;)  // [&quot;apple&quot;, &quot; orange&quot;, &quot; banana&quot;, &quot; grape&quot;]\n\n    // Extracting Substrings\n    text = &quot;The date is 2024-06-27&quot;\n    pattern = &quot;(\\\\d{4})-(\\\\d{2})-(\\\\d{2})&quot;.toRegex()\n    val matchResult = pattern.find(text)\n    matchResult?.groupValues?.let { groups -&gt;\n        println(&quot;Extracting Substrings: ${groups[1]}, ${groups[2]}, ${groups[3]}&quot;)  // [&quot;2024&quot;, &quot;06&quot;, &quot;27&quot;]\n    }\n\n    // Validation\n    val email = &quot;example@test.com&quot;\n    val emailPattern = &quot;^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$&quot;.toRegex()\n    println(&quot;Validation: ${if (emailPattern.matches(email)) &quot;Valid email address!&quot; else &quot;Invalid email address.&quot;}&quot;)\n\n    // Removing Unwanted Characters\n    text = &quot;Hello, World!&quot;\n    result = text.replace(&quot;[^\\\\w\\\\s]&quot;.toRegex(), &quot;&quot;)  // Remove all non-alphanumeric characters\n    println(&quot;Removing Unwanted Characters: $result&quot;)  // &quot;Hello World&quot;\n\n    // Anchoring Searches\n    text = &quot;The quick brown fox&quot;\n    val wordPattern = &quot;\\\\bfox\\\\b&quot;.toRegex()  // Match &#x27;fox&#x27; as a whole word\n    println(&quot;Anchoring Searches: ${if (wordPattern.containsMatchIn(text)) &quot;Found&quot; else &quot;Not Found&quot;}&quot;)\n\n    // Escaping Characters\n    val user_input = &quot;some[unsafe]input&quot;\n    val escaped_input = Regex.escape(user_input)\n    println(&quot;Escaping Characters: $escaped_input&quot;)  // &quot;some\\[unsafe\\]input&quot;\n\n    // Conditional Matching\n    text = &quot;foobar and foo&quot;\n    val lookaheadPattern = &quot;foo(?=bar)&quot;.toRegex()  // Match &#x27;foo&#x27; only if followed by &#x27;bar&#x27;\n    val matches = lookaheadPattern.findAll(text).map { it.value }.toList()\n    println(&quot;Conditional Matching: ${matches.joinToString(&quot;, &quot;)}&quot;)  // &quot;foo&quot;\n}\n\n"
          }
        },
        "dart": {
          "name": "dart",
          "displayname": "Dart",
          "comment": "#|//",
          "ext": "dart",
          "css": "dart",
          "categories": "programming",
          "snippets": {
            "arrays": "import &#x27;dart:math&#x27;;\n\nvoid main() {\n  // 1. Storing Data\n  List&lt;int&gt; data = [1, 2, 3, 4, 5];\n  print(&quot;Original Data: $data&quot;);\n\n  // 2. Mathematical Operations\n  List&lt;int&gt; squaredData = data.map((x) =&gt; x * x).toList();\n  print(&quot;Squared Data: $squaredData&quot;);\n\n  // 3. Sorting and Searching\n  List&lt;int&gt; sortedData = List.from(data)..sort();\n  print(&quot;Sorted Data: $sortedData&quot;);\n\n  int searchValue = 3;\n  int searchIndex = data.indexOf(searchValue);\n  print(&quot;Index of $searchValue: $searchIndex&quot;);\n\n  // 4. Data Analysis\n  double meanValue = data.reduce((a, b) =&gt; a + b) / data.length;\n  print(&quot;Mean Value: $meanValue&quot;);\n\n  int sumValue = data.reduce((a, b) =&gt; a + b);\n  print(&quot;Sum Value: $sumValue&quot;);\n\n  // 5. Multidimensional Arrays\n  List&lt;List&lt;int&gt;&gt; matrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ];\n  print(&quot;Original Matrix:&quot;);\n  matrix.forEach((row) =&gt; print(row));\n\n  // Transpose the matrix\n  List&lt;List&lt;int&gt;&gt; transposedMatrix = List.generate(\n      matrix[0].length, (i) =&gt; List.generate(matrix.length, (j) =&gt; matrix[j][i]));\n  print(&quot;Transposed Matrix:&quot;);\n  transposedMatrix.forEach((row) =&gt; print(row));\n\n  // Example of matrix multiplication (identity matrix)\n  List&lt;List&lt;int&gt;&gt; identityMatrix = [\n    [1, 0, 0],\n    [0, 1, 0],\n    [0, 0, 1]\n  ];\n  List&lt;List&lt;int&gt;&gt; productMatrix = List.generate(matrix.length, (i) =&gt; List.generate(identityMatrix[0].length, (j) {\n    int sum = 0;\n    for (int k = 0; k &lt; identityMatrix.length; k++) {\n      sum += matrix[i][k] * identityMatrix[k][j];\n    }\n    return sum;\n  }));\n  print(&quot;Matrix Product with Identity Matrix:&quot;);\n  productMatrix.forEach((row) =&gt; print(row));\n\n  // Image Processing (simulated with a simple 2D array)\n  Random random = Random();\n  List&lt;List&lt;double&gt;&gt; image = List.generate(5, (i) =&gt; List.generate(5, (j) =&gt; random.nextDouble()));\n  print(&quot;Original Image:&quot;);\n  image.forEach((row) =&gt; print(row.map((pixel) =&gt; pixel.toStringAsFixed(2)).toList()));\n\n  // Simple operation on image\n  List&lt;List&lt;double&gt;&gt; brighterImage = image.map((row) =&gt; row.map((pixel) =&gt; pixel * 1.2).toList()).toList();\n  print(&quot;Brighter Image:&quot;);\n  brighterImage.forEach((row) =&gt; print(row.map((pixel) =&gt; pixel.toStringAsFixed(2)).toList()));\n}\n\n",
            "regexps": "// Dart - regex_examples.dart\nvoid main() {\n  // Pattern Matching\n  String pattern = r&#x27;\\d+&#x27;;  // Match one or more digits\n  String text = &#x27;There are 123 apples&#x27;;\n  RegExp regExp = RegExp(pattern);\n  print(&#x27;Pattern Matching: ${regExp.hasMatch(text) ? &quot;Match found!&quot; : &quot;No match found.&quot;}&#x27;);\n\n  // Search and Replace\n  text = &#x27;Hello 123, meet 456&#x27;;\n  String result = text.replaceAll(regExp, &#x27;number&#x27;);\n  print(&#x27;Search and Replace: $result&#x27;);  // &quot;Hello number, meet number&quot;\n\n  // String Splitting\n  text = &#x27;apple, orange; banana, grape&#x27;;\n  List&lt;String&gt; resultArray = text.split(RegExp(r&#x27;[ ,;]+&#x27;));\n  print(&#x27;String Splitting: ${resultArray.join(&quot;, &quot;)}&#x27;);  // [&quot;apple&quot;, &quot;orange&quot;, &quot;banana&quot;, &quot;grape&quot;]\n\n  // Extracting Substrings\n  text = &#x27;The date is 2024-06-27&#x27;;\n  pattern = r&#x27;(\\d{4})-(\\d{2})-(\\d{2})&#x27;;\n  regExp = RegExp(pattern);\n  RegExpMatch match = regExp.firstMatch(text)!;\n  print(&#x27;Extracting Substrings: ${match.group(1)}, ${match.group(2)}, ${match.group(3)}&#x27;);  // [&quot;2024&quot;, &quot;06&quot;, &quot;27&quot;]\n\n  // Validation\n  String email = &#x27;example@test.com&#x27;;\n  pattern = r&#x27;^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$&#x27;;\n  regExp = RegExp(pattern);\n  print(&#x27;Validation: ${regExp.hasMatch(email) ? &quot;Valid email address!&quot; : &quot;Invalid email address.&quot;}&#x27;);\n\n  // Removing Unwanted Characters\n  text = &#x27;Hello, World!&#x27;;\n  result = text.replaceAll(RegExp(r&#x27;[^\\w\\s]&#x27;), &#x27;&#x27;);  // Remove all non-alphanumeric characters\n  print(&#x27;Removing Unwanted Characters: $result&#x27;);  // &quot;Hello World&quot;\n\n  // Anchoring Searches\n  text = &#x27;The quick brown fox&#x27;;\n  pattern = r&#x27;\\bfox\\b&#x27;;  // Match &#x27;fox&#x27; as a whole word\n  regExp = RegExp(pattern);\n  print(&#x27;Anchoring Searches: ${regExp.hasMatch(text) ? &quot;Found&quot; : &quot;Not Found&quot;}&#x27;);\n\n  // Escaping Characters\n  String user_input = &#x27;some[unsafe]input&#x27;;\n  String escaped_input = RegExp.escape(user_input);\n  print(&#x27;Escaping Characters: $escaped_input&#x27;);  // &quot;some\\[unsafe\\]input&quot;\n\n  // Conditional Matching\n  text = &#x27;foobar and foo&#x27;;\n  pattern = r&#x27;foo(?=bar)&#x27;;  // Match &#x27;foo&#x27; only if followed by &#x27;bar&#x27;\n  regExp = RegExp(pattern);\n  Iterable&lt;RegExpMatch&gt; matches = regExp.allMatches(text);\n  print(&#x27;Conditional Matching: ${matches.map((m) =&gt; m.group(0)).join(&quot;, &quot;)}&#x27;);  // &quot;foo&quot;\n}\n\n"
          }
        },
        "java": {
          "name": "java",
          "displayname": "Java",
          "comment": "#|//",
          "ext": "java",
          "css": "java",
          "categories": "programming",
          "snippets": {
            "arrays": "import java.util.Arrays;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) {\n        // 1. Storing Data\n        int[] data = {1, 2, 3, 4, 5};\n        System.out.println(&quot;Original Data: &quot; + Arrays.toString(data));\n\n        // 2. Mathematical Operations\n        int[] squared_data = Arrays.stream(data).map(x -&gt; x * x).toArray();\n        System.out.println(&quot;Squared Data: &quot; + Arrays.toString(squared_data));\n\n        // 3. Sorting and Searching\n        int[] sorted_data = Arrays.copyOf(data, data.length);\n        Arrays.sort(sorted_data);\n        System.out.println(&quot;Sorted Data: &quot; + Arrays.toString(sorted_data));\n\n        int search_value = 3;\n        int search_index = Arrays.binarySearch(data, search_value);\n        System.out.println(&quot;Index of &quot; + search_value + &quot;: &quot; + search_index);\n\n        // 4. Data Analysis\n        double mean_value = Arrays.stream(data).average().orElse(0);\n        System.out.println(&quot;Mean Value: &quot; + mean_value);\n\n        int sum_value = Arrays.stream(data).sum();\n        System.out.println(&quot;Sum Value: &quot; + sum_value);\n\n        // 5. Multidimensional Arrays\n        int[][] matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n        System.out.println(&quot;Original Matrix: &quot; + Arrays.deepToString(matrix));\n\n        int[][] transposed_matrix = transpose(matrix);\n        System.out.println(&quot;Transposed Matrix: &quot; + Arrays.deepToString(transposed_matrix));\n\n        // Example of matrix multiplication (identity matrix)\n        int[][] identity_matrix = {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}};\n        int[][] product_matrix = multiply(matrix, identity_matrix);\n        System.out.println(&quot;Matrix Product with Identity Matrix: &quot; + Arrays.deepToString(product_matrix));\n\n        // Image Processing (simulated with a simple 2D array)\n        double[][] image = new double[5][5];\n        Random random = new Random();\n        for (int i = 0; i &lt; 5; i++) {\n            for (int j = 0; j &lt; 5; j++) {\n                image[i][j] = random.nextDouble();\n            }\n        }\n        System.out.println(&quot;Original Image: &quot; + Arrays.deepToString(image));\n\n        // Simple operation on image\n        double[][] brighter_image = new double[5][5];\n        for (int i = 0; i &lt; 5; i++) {\n            for (int j = 0; j &lt; 5; j++) {\n                brighter_image[i][j] = image[i][j] * 1.2;\n            }\n        }\n        System.out.println(&quot;Brighter Image: &quot; + Arrays.deepToString(brighter_image));\n    }\n\n    public static int[][] transpose(int[][] matrix) {\n        int[][] transposed = new int[matrix[0].length][matrix.length];\n        for (int i = 0; i &lt; matrix.length; i++) {\n            for (int j = 0; j &lt; matrix[i].length; j++) {\n                transposed[j][i] = matrix[i][j];\n            }\n        }\n        return transposed;\n    }\n\n    public static int[][] multiply(int[][] a, int[][] b) {\n        int[][] product = new int[a.length][b[0].length];\n        for (int i = 0; i &lt; a.length; i++) {\n            for (int j = 0; j &lt; b[0].length; j++) {\n                int sum = 0;\n                for (int k = 0; k &lt; a[i].length; k++) {\n                    sum += a[i][k] * b[k][j];\n                }\n                product[i][j] = sum;\n            }\n        }\n        return product;\n    }\n}\n\n",
            "regexps": "// Java - RegexExamples.java\nimport java.util.regex.*;\n\npublic class RegexExamples {\n    public static void main(String[] args) {\n        // Pattern Matching\n        Pattern pattern = Pattern.compile(&quot;\\\\d+&quot;);  // Match one or more digits\n        String text = &quot;There are 123 apples&quot;;\n        Matcher matcher = pattern.matcher(text);\n        System.out.println(&quot;Pattern Matching: &quot; + (matcher.find() ? &quot;Match found!&quot; : &quot;No match found.&quot;));\n\n        // Search and Replace\n        text = &quot;Hello 123, meet 456&quot;;\n        String result = text.replaceAll(&quot;\\\\d+&quot;, &quot;number&quot;);\n        System.out.println(&quot;Search and Replace: &quot; + result);  // &quot;Hello number, meet number&quot;\n\n        // String Splitting\n        text = &quot;apple, orange; banana, grape&quot;;\n        String[] resultArray = text.split(&quot;[,;]&quot;);\n        System.out.println(&quot;String Splitting: &quot; + String.join(&quot;, &quot;, resultArray));  // [&quot;apple&quot;, &quot; orange&quot;, &quot; banana&quot;, &quot; grape&quot;]\n\n        // Extracting Substrings\n        text = &quot;The date is 2024-06-27&quot;;\n        pattern = Pattern.compile(&quot;(\\\\d{4})-(\\\\d{2})-(\\\\d{2})&quot;);\n        matcher = pattern.matcher(text);\n        if (matcher.find()) {\n            System.out.println(&quot;Extracting Substrings: &quot; + matcher.group(1) + &quot;, &quot; + matcher.group(2) + &quot;, &quot; + matcher.group(3));  // [&quot;2024&quot;, &quot;06&quot;, &quot;27&quot;]\n        }\n\n        // Validation\n        String email = &quot;example@test.com&quot;;\n        pattern = Pattern.compile(&quot;^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$&quot;);\n        matcher = pattern.matcher(email);\n        System.out.println(&quot;Validation: &quot; + (matcher.find() ? &quot;Valid email address!&quot; : &quot;Invalid email address.&quot;));\n\n        // Removing Unwanted Characters\n        text = &quot;Hello, World!&quot;;\n        result = text.replaceAll(&quot;[^\\\\w\\\\s]&quot;, &quot;&quot;);  // Remove all non-alphanumeric characters\n        System.out.println(&quot;Removing Unwanted Characters: &quot; + result);  // &quot;Hello World&quot;\n\n        // Anchoring Searches\n        text = &quot;The quick brown fox&quot;;\n        pattern = Pattern.compile(&quot;\\\\bfox\\\\b&quot;);  // Match &#x27;fox&#x27; as a whole word\n        matcher = pattern.matcher(text);\n        System.out.println(&quot;Anchoring Searches: &quot; + (matcher.find() ? &quot;Found&quot; : &quot;Not Found&quot;));\n\n        // Escaping Characters\n        String user_input = &quot;some[unsafe]input&quot;;\n        String escaped_input = Pattern.quote(user_input);\n        System.out.println(&quot;Escaping Characters: &quot; + escaped_input);  // &quot;some\\[unsafe\\]input&quot;\n\n        // Conditional Matching\n        pattern = Pattern.compile(&quot;foo(?=bar)&quot;);  // Match &#x27;foo&#x27; only if followed by &#x27;bar&#x27;\n        text = &quot;foobar and foo&quot;;\n        matcher = pattern.matcher(text);\n        while (matcher.find()) {\n            System.out.println(&quot;Conditional Matching: &quot; + matcher.group());  // &quot;foo&quot;\n        }\n    }\n}\n\n"
          }
        },
        "powershell": {
          "name": "powershell",
          "displayname": "Powershell (Windows)",
          "comment": "#|//",
          "ext": "ps1",
          "css": "powershell",
          "categories": "programming",
          "snippets": {
            "arrays": "# 1. Storing Data\n$data = 1, 2, 3, 4, 5\nWrite-Host &quot;Original Data: $($data -join &#x27;, &#x27;)&quot;\n\n# 2. Mathematical Operations\n$squaredData = $data | ForEach-Object { $_ * $_ }\nWrite-Host &quot;Squared Data: $($squaredData -join &#x27;, &#x27;)&quot;\n\n# 3. Sorting and Searching\n$sortedData = $data | Sort-Object\nWrite-Host &quot;Sorted Data: $($sortedData -join &#x27;, &#x27;)&quot;\n\n$searchValue = 3\n$searchIndex = $data.IndexOf($searchValue)\nWrite-Host &quot;Index of $searchValue: $searchIndex&quot;\n\n# 4. Data Analysis\n$meanValue = ($data | Measure-Object -Average).Average\nWrite-Host &quot;Mean Value: $meanValue&quot;\n\n$sumValue = ($data | Measure-Object -Sum).Sum\nWrite-Host &quot;Sum Value: $sumValue&quot;\n\n# 5. Multidimensional Arrays\n$matrix = @(\n    @(1, 2, 3)\n    @(4, 5, 6)\n    @(7, 8, 9)\n)\nWrite-Host &quot;Original Matrix:&quot;\n$matrix | ForEach-Object { $_ -join &#x27; &#x27; }\n\n# Transpose the matrix\n$transposedMatrix = 0..2 | ForEach-Object {\n    0..2 | ForEach-Object {\n        $matrix[$_][$PSItem]\n    }\n}\nWrite-Host &quot;Transposed Matrix:&quot;\n$transposedMatrix | ForEach-Object { $_ -join &#x27; &#x27; }\n\n# Example of matrix multiplication (identity matrix)\n$identityMatrix = @(\n    @(1, 0, 0)\n    @(0, 1, 0)\n    @(0, 0, 1)\n)\n$productMatrix = 0..2 | ForEach-Object {\n    0..2 | ForEach-Object {\n        $sum = 0\n        0..2 | ForEach-Object {\n            $sum += $matrix[$_]$PSItem * $identityMatrix[$_][$PSItem]\n        }\n        $sum\n    }\n}\nWrite-Host &quot;Matrix Product with Identity Matrix:&quot;\n$productMatrix | ForEach-Object { $_ -join &#x27; &#x27; }\n\n# Image Processing (simulated with a simple 2D array)\n$image = 0..4 | ForEach-Object {\n    0..4 | ForEach-Object {\n        Get-Random -Minimum 0 -Maximum 1\n    }\n}\nWrite-Host &quot;Original Image:&quot;\n$image | ForEach-Object { $_ -join &#x27; &#x27; }\n\n# Simple operation on image\n$brighterImage = $image | ForEach-Object {\n    $_ | ForEach-Object { $_ * 1.2 }\n}\nWrite-Host &quot;Brighter Image:&quot;\n$brighterImage | ForEach-Object { $_ -join &#x27; &#x27; }\n\n",
            "regexps": "# PowerShell - regex_examples.ps1\n\n# Pattern Matching\n$text = &quot;There are 123 apples&quot;\n$pattern = &quot;\\d+&quot;  # Match one or more digits\nif ($text -match $pattern) {\n    Write-Output &quot;Pattern Matching: Match found!&quot;\n} else {\n    Write-Output &quot;Pattern Matching: No match found.&quot;\n}\n\n# Search and Replace\n$text = &quot;Hello 123, meet 456&quot;\n$result = $text -replace $pattern, &quot;number&quot;\nWrite-Output &quot;Search and Replace: $result&quot;  # &quot;Hello number, meet number&quot;\n\n# String Splitting\n$text = &quot;apple, orange; banana, grape&quot;\n$result = $text -split &quot;[,;]&quot;\nWrite-Output &quot;String Splitting: $($result -join &quot;, &quot;)&quot;  # [&quot;apple&quot;, &quot; orange&quot;, &quot; banana&quot;, &quot; grape&quot;]\n\n# Extracting Substrings\n$text = &quot;The date is 2024-06-27&quot;\nif ($text -match &quot;(\\d{4})-(\\d{2})-(\\d{2})&quot;) {\n    Write-Output &quot;Extracting Substrings: $($matches[1]), $($matches[2]), $($matches[3])&quot;  # [&quot;2024&quot;, &quot;06&quot;, &quot;27&quot;]\n}\n\n# Validation\n$email = &quot;example@test.com&quot;\n$pattern = &quot;^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$&quot;\nif ($email -match $pattern) {\n    Write-Output &quot;Validation: Valid email address!&quot;\n} else {\n    Write-Output &quot;Validation: Invalid email address.&quot;\n}\n\n# Removing Unwanted Characters\n$text = &quot;Hello, World!&quot;\n$cleaned_text = $text -replace &quot;[^\\w\\s]&quot;, &quot;&quot;  # Remove all non-alphanumeric characters\nWrite-Output &quot;Removing Unwanted Characters: $cleaned_text&quot;  # &quot;Hello World&quot;\n\n# Anchoring Searches\n$text = &quot;The quick brown fox&quot;\n$pattern = &quot;\\bfox\\b&quot;  # Match &#x27;fox&#x27; as a whole word\nif ($text -match $pattern) {\n    Write-Output &quot;Anchoring Searches: Found&quot;\n} else {\n    Write-Output &quot;Anchoring Searches: Not Found&quot;\n}\n\n# Escaping Characters\nfunction Escape-RegexPattern {\n    param ($input)\n    [Regex]::Escape($input)\n}\n$user_input = &quot;some[unsafe]input&quot;\n$escaped_input = Escape-RegexPattern $user_input\nWrite-Output &quot;Escaping Characters: $escaped_input&quot;  # &quot;some\\[unsafe\\]input&quot;\n\n# Conditional Matching\n$text = &quot;foobar and foo&quot;\n$pattern = &quot;foo(?=bar)&quot;  # Match &#x27;foo&#x27; only if followed by &#x27;bar&#x27;\n$matches = [regex]::Matches($text, $pattern)\nWrite-Output &quot;Conditional Matching: $($matches | ForEach-Object { $_.Value })&quot;  # &quot;foo&quot;\n\n"
          }
        },
        "ruby": {
          "name": "ruby",
          "displayname": "Ruby",
          "comment": "#|//",
          "ext": "rb",
          "css": "ruby",
          "categories": "programming",
          "snippets": {
            "arrays": "# 1. Storing Data\ndata = [1, 2, 3, 4, 5]\nputs &quot;Original Data: #{data}&quot;\n\n# 2. Mathematical Operations\nsquared_data = data.map { |x| x ** 2 }\nputs &quot;Squared Data: #{squared_data}&quot;\n\n# 3. Sorting and Searching\nsorted_data = data.sort\nputs &quot;Sorted Data: #{sorted_data}&quot;\n\nsearch_value = 3\nsearch_index = data.index(search_value)\nputs &quot;Index of #{search_value}: #{search_index}&quot;\n\n# 4. Data Analysis\nmean_value = data.sum / data.length.to_f\nputs &quot;Mean Value: #{mean_value}&quot;\n\nsum_value = data.sum\nputs &quot;Sum Value: #{sum_value}&quot;\n\n# 5. Multidimensional Arrays\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nputs &quot;Original Matrix: #{matrix.inspect}&quot;\n\ntransposed_matrix = matrix.transpose\nputs &quot;Transposed Matrix: #{transposed_matrix.inspect}&quot;\n\n# Example of matrix multiplication (identity matrix)\nidentity_matrix = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\nproduct_matrix = matrix.map { |row| row.each_with_index.map { |val, i| val * identity_matrix[i][i] } }\nputs &quot;Matrix Product with Identity Matrix: #{product_matrix.inspect}&quot;\n\n# Image Processing (simulated with a simple 2D array)\nimage = Array.new(5) { Array.new(5) { rand } }\nputs &quot;Original Image: #{image.inspect}&quot;\n\n# Simple operation on image\nbrighter_image = image.map { |row| row.map { |pixel| pixel * 1.2 } }\nputs &quot;Brighter Image: #{brighter_image.inspect}&quot;\n\n",
            "regexps": "# Ruby - regex_examples.rb\n\n# Pattern Matching\npattern = /\\d+/  # Match one or more digits\ntext = &quot;There are 123 apples&quot;\nputs &quot;Pattern Matching: #{pattern.match(text) ? &quot;Match found!&quot; : &quot;No match found.&quot;}&quot;\n\n# Search and Replace\ntext = &quot;Hello 123, meet 456&quot;\nresult = text.gsub(/\\d+/, &#x27;number&#x27;)\nputs &quot;Search and Replace: #{result}&quot;  # &quot;Hello number, meet number&quot;\n\n# String Splitting\ntext = &quot;apple, orange; banana, grape&quot;\nresult = text.split(/[,;]/)\nputs &quot;String Splitting: #{result.inspect}&quot;  # [&quot;apple&quot;, &quot; orange&quot;, &quot; banana&quot;, &quot; grape&quot;]\n\n# Extracting Substrings\ntext = &quot;The date is 2024-06-27&quot;\npattern = /(\\d{4})-(\\d{2})-(\\d{2})/\nmatch = pattern.match(text)\nputs &quot;Extracting Substrings: #{match ? match.captures : &quot;No match found&quot;}&quot;  # [&quot;2024&quot;, &quot;06&quot;, &quot;27&quot;]\n\n# Validation\nemail = &quot;example@test.com&quot;\npattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/\nputs &quot;Validation: #{pattern.match(email) ? &quot;Valid email address!&quot; : &quot;Invalid email address.&quot;}&quot;\n\n# Parsing Structured Text\nlog_entry = &quot;127.0.0.1 - - [27/Jun/2024:10:00:00 +0000] \\&quot;GET /index.html HTTP/1.1\\&quot; 200 1234&quot;\npattern = /(?&lt;ip&gt;\\d+\\.\\d+\\.\\d+\\.\\d+) - - \\[(?&lt;date&gt;[^\\]]+)\\] &quot;(?&lt;request&gt;[^&quot;]+)&quot; (?&lt;status&gt;\\d+) (?&lt;size&gt;\\d+)/\nmatch = pattern.match(log_entry)\nputs &quot;Parsing Structured Text: #{match ? match.named_captures : &quot;No match found&quot;}&quot;\n\n# Removing Unwanted Characters\ntext = &quot;Hello, World!&quot;\ncleaned_text = text.gsub(/[^\\w\\s]/, &#x27;&#x27;)  # Remove all non-alphanumeric characters\nputs &quot;Removing Unwanted Characters: #{cleaned_text}&quot;  # &quot;Hello World&quot;\n\n# Anchoring Searches\ntext = &quot;The quick brown fox&quot;\npattern = /\\bfox\\b/  # Match &#x27;fox&#x27; as a whole word\nputs &quot;Anchoring Searches: #{pattern.match(text) ? &quot;Found&quot; : &quot;Not Found&quot;}&quot;\n\n# Escaping Characters\nuser_input = &quot;some[unsafe]input&quot;\nescaped_input = Regexp.escape(user_input)\npattern = /#{escaped_input}/\nputs &quot;Escaping Characters: #{pattern}&quot;  # &quot;some\\[unsafe\\]input&quot;\n\n# Conditional Matching\npattern = /foo(?=bar)/  # Match &#x27;foo&#x27; only if followed by &#x27;bar&#x27;\ntext = &quot;foobar and foo&quot;\nmatches = text.scan(pattern)\nputs &quot;Conditional Matching: #{matches.inspect}&quot;  # [&quot;foo&quot;]\n\n"
          }
        },
        "js": {
          "name": "js",
          "displayname": "JavaScript",
          "comment": "#|//",
          "ext": "js",
          "css": "javascript",
          "categories": "programming",
          "snippets": {
            "arrays": "fn main() {\n    // 1. Storing Data\n    let data = vec![1, 2, 3, 4, 5];\n    println!(&quot;Original Data: {:?}&quot;, data);\n\n    // 2. Mathematical Operations\n    let squared_data: Vec&lt;i32&gt; = data.iter().map(|&amp;x| x * x).collect();\n    println!(&quot;Squared Data: {:?}&quot;, squared_data);\n\n    // 3. Sorting and Searching\n    let mut sorted_data = data.clone();\n    sorted_data.sort();\n    println!(&quot;Sorted Data: {:?}&quot;, sorted_data);\n\n    let search_value = 3;\n    if let Some(search_index) = data.iter().position(|&amp;x| x == search_value) {\n        println!(&quot;Index of {}: {}&quot;, search_value, search_index);\n    }\n\n    // 4. Data Analysis\n    let sum_value: i32 = data.iter().sum();\n    let mean_value = sum_value as f64 / data.len() as f64;\n    println!(&quot;Mean Value: {}&quot;, mean_value);\n    println!(&quot;Sum Value: {}&quot;, sum_value);\n\n    // 5. Multidimensional Arrays\n    let matrix: Vec&lt;Vec&lt;i32&gt;&gt; = vec![vec![1, 2, 3], vec![4, 5, 6], vec![7, 8, 9]];\n    println!(&quot;Original Matrix: {:?}&quot;, matrix);\n\n    let transposed_matrix: Vec&lt;Vec&lt;i32&gt;&gt; = (0..matrix[0].len())\n        .map(|i| matrix.iter().map(|row| row[i]).collect())\n        .collect();\n    println!(&quot;Transposed Matrix: {:?}&quot;, transposed_matrix);\n\n    // Example of matrix multiplication (identity matrix)\n    let identity_matrix: Vec&lt;Vec&lt;i32&gt;&gt; = vec![vec![1, 0, 0], vec![0, 1, 0], vec![0, 0, 1]];\n    let product_matrix: Vec&lt;Vec&lt;i32&gt;&gt; = matrix\n        .iter()\n        .map(|row| {\n            row.iter()\n                .enumerate()\n                .map(|(i, &amp;val)| val * identity_matrix[i][i])\n                .collect()\n        })\n        .collect();\n    println!(&quot;Matrix Product with Identity Matrix: {:?}&quot;, product_matrix);\n\n    // Image Processing (simulated with a simple 2D array)\n    let image: Vec&lt;Vec&lt;f64&gt;&gt; = (0..5).map(|_| (0..5).map(|_| rand::random()).collect()).collect();\n    println!(&quot;Original Image: {:?}&quot;, image);\n\n    // Simple operation on image\n    let brighter_image: Vec&lt;Vec&lt;f64&gt;&gt; = image\n        .iter()\n        .map(|row| row.iter().map(|&amp;pixel| pixel * 1.2).collect())\n        .collect();\n    println!(&quot;Brighter Image: {:?}&quot;, brighter_image);\n}\n\n",
            "regexps": "// JavaScript - regex_examples.js\n\n// Pattern Matching\nlet pattern = /\\d+/;  // Match one or more digits\nlet text = &quot;There are 123 apples&quot;;\nconsole.log(&quot;Pattern Matching:&quot;, pattern.test(text) ? &quot;Match found!&quot; : &quot;No match found.&quot;);\n\n// Search and Replace\ntext = &quot;Hello 123, meet 456&quot;;\nlet result = text.replace(/\\d+/g, &#x27;number&#x27;);\nconsole.log(&quot;Search and Replace:&quot;, result);  // &quot;Hello number, meet number&quot;\n\n// String Splitting\ntext = &quot;apple, orange; banana, grape&quot;;\nresult = text.split(/[,;]/);\nconsole.log(&quot;String Splitting:&quot;, result);  // [&quot;apple&quot;, &quot; orange&quot;, &quot; banana&quot;, &quot; grape&quot;]\n\n// Extracting Substrings\ntext = &quot;The date is 2024-06-27&quot;;\npattern = /(\\d{4})-(\\d{2})-(\\d{2})/;\nlet match = text.match(pattern);\nconsole.log(&quot;Extracting Substrings:&quot;, match ? match.slice(1) : &quot;No match found&quot;);  // [&quot;2024&quot;, &quot;06&quot;, &quot;27&quot;]\n\n// Validation\nlet email = &quot;example@test.com&quot;;\npattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\nconsole.log(&quot;Validation:&quot;, pattern.test(email) ? &quot;Valid email address!&quot; : &quot;Invalid email address.&quot;);\n\n// Removing Unwanted Characters\ntext = &quot;Hello, World!&quot;;\nlet cleanedText = text.replace(/[^\\w\\s]/g, &#x27;&#x27;);  // Remove all non-alphanumeric characters\nconsole.log(&quot;Removing Unwanted Characters:&quot;, cleanedText);  // &quot;Hello World&quot;\n\n// Anchoring Searches\ntext = &quot;The quick brown fox&quot;;\npattern = /\\bfox\\b/;  // Match &#x27;fox&#x27; as a whole word\nconsole.log(&quot;Anchoring Searches:&quot;, pattern.test(text) ? &quot;Found&quot; : &quot;Not Found&quot;);\n\n// Escaping Characters\nuser_input = &quot;some[unsafe]input&quot;;\nlet escaped_input = user_input.replace(/[.*+?^${}()|[\\]\\\\]/g, &#x27;\\\\$&amp;&#x27;);\npattern = new RegExp(escaped_input);\nconsole.log(&quot;Escaping Characters:&quot;, pattern);  // /some\\[unsafe\\]input/\n\n// Conditional Matching\npattern = /foo(?=bar)/;  // Match &#x27;foo&#x27; only if followed by &#x27;bar&#x27;\ntext = &quot;foobar and foo&quot;;\nmatches = text.match(pattern);\nconsole.log(&quot;Conditional Matching:&quot;, matches);  // [&quot;foo&quot;]\n\n"
          }
        },
        "httpjs": {
          "name": "httpjs",
          "displayname": "HTTP JavaScript",
          "comment": "#|//",
          "ext": "js",
          "inherits": "js",
          "css": "javascript",
          "categories": "programming",
          "snippets": {}
        },
        "php": {
          "name": "php",
          "displayname": "PHP",
          "comment": "#|//",
          "ext": "php",
          "css": "php",
          "categories": "programming",
          "snippets": {}
        },
        "cpp": {
          "name": "cpp",
          "displayname": "C++ (C Plus Plus, C++)",
          "comment": "#|//",
          "ext": "cpp",
          "css": "cpp",
          "categories": "programming",
          "snippets": {
            "arrays": "#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n#include &lt;numeric&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdlib&gt;\n\nvoid printVector(const std::vector&lt;int&gt;&amp; vec) {\n    for (const int&amp; val : vec) {\n        std::cout &lt;&lt; val &lt;&lt; &quot; &quot;;\n    }\n    std::cout &lt;&lt; std::endl;\n}\n\nvoid printMatrix(const std::vector&lt;std::vector&lt;int&gt;&gt;&amp; mat) {\n    for (const auto&amp; row : mat) {\n        for (const int&amp; val : row) {\n            std::cout &lt;&lt; val &lt;&lt; &quot; &quot;;\n        }\n        std::cout &lt;&lt; std::endl;\n    }\n}\n\nvoid printMatrix(const std::vector&lt;std::vector&lt;double&gt;&gt;&amp; mat) {\n    for (const auto&amp; row : mat) {\n        for (const double&amp; val : row) {\n            std::cout &lt;&lt; val &lt;&lt; &quot; &quot;;\n        }\n        std::cout &lt;&lt; std::endl;\n    }\n}\n\nint main() {\n    // 1. Storing Data\n    std::vector&lt;int&gt; data = {1, 2, 3, 4, 5};\n    std::cout &lt;&lt; &quot;Original Data: &quot;;\n    printVector(data);\n\n    // 2. Mathematical Operations\n    std::vector&lt;int&gt; squared_data;\n    std::transform(data.begin(), data.end(), std::back_inserter(squared_data), [](int x) { return x * x; });\n    std::cout &lt;&lt; &quot;Squared Data: &quot;;\n    printVector(squared_data);\n\n    // 3. Sorting and Searching\n    std::vector&lt;int&gt; sorted_data = data;\n    std::sort(sorted_data.begin(), sorted_data.end());\n    std::cout &lt;&lt; &quot;Sorted Data: &quot;;\n    printVector(sorted_data);\n\n    int search_value = 3;\n    auto it = std::find(data.begin(), data.end(), search_value);\n    if (it != data.end()) {\n        std::cout &lt;&lt; &quot;Index of &quot; &lt;&lt; search_value &lt;&lt; &quot;: &quot; &lt;&lt; std::distance(data.begin(), it) &lt;&lt; std::endl;\n    }\n\n    // 4. Data Analysis\n    double mean_value = std::accumulate(data.begin(), data.end(), 0.0) / data.size();\n    std::cout &lt;&lt; &quot;Mean Value: &quot; &lt;&lt; mean_value &lt;&lt; std::endl;\n\n    int sum_value = std::accumulate(data.begin(), data.end(), 0);\n    std::cout &lt;&lt; &quot;Sum Value: &quot; &lt;&lt; sum_value &lt;&lt; std::endl;\n\n    // 5. Multidimensional Arrays\n    std::vector&lt;std::vector&lt;int&gt;&gt; matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n    std::cout &lt;&lt; &quot;Original Matrix:&quot; &lt;&lt; std::endl;\n    printMatrix(matrix);\n\n    std::vector&lt;std::vector&lt;int&gt;&gt; transposed_matrix(3, std::vector&lt;int&gt;(3));\n    for (size_t i = 0; i &lt; matrix.size(); ++i) {\n        for (size_t j = 0; j &lt; matrix[0].size(); ++j) {\n            transposed_matrix[j][i] = matrix[i][j];\n        }\n    }\n    std::cout &lt;&lt; &quot;Transposed Matrix:&quot; &lt;&lt; std::endl;\n    printMatrix(transposed_matrix);\n\n    // Example of matrix multiplication (identity matrix)\n    std::vector&lt;std::vector&lt;int&gt;&gt; identity_matrix = {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}};\n    std::vector&lt;std::vector&lt;int&gt;&gt; product_matrix(3, std::vector&lt;int&gt;(3, 0));\n    for (size_t i = 0; i &lt; matrix.size(); ++i) {\n        for (size_t j = 0; j &lt; identity_matrix[0].size(); ++j) {\n            for (size_t k = 0; k &lt; identity_matrix.size(); ++k) {\n                product_matrix[i][j] += matrix[i][k] * identity_matrix[k][j];\n            }\n        }\n    }\n    std::cout &lt;&lt; &quot;Matrix Product with Identity Matrix:&quot; &lt;&lt; std::endl;\n    printMatrix(product_matrix);\n\n    // Image Processing (simulated with a simple 2D array)\n    std::vector&lt;std::vector&lt;double&gt;&gt; image(5, std::vector&lt;double&gt;(5));\n    for (auto&amp; row : image) {\n        for (auto&amp; pixel : row) {\n            pixel = static_cast&lt;double&gt;(rand()) / RAND_MAX;\n        }\n    }\n    std::cout &lt;&lt; &quot;Original Image:&quot; &lt;&lt; std::endl;\n    printMatrix(image);\n\n    // Simple operation on image\n    std::vector&lt;std::vector&lt;double&gt;&gt; brighter_image = image;\n    for (auto&amp; row : brighter_image) {\n        for (auto&amp; pixel : row) {\n            pixel *= 1.2;\n        }\n    }\n    std::cout &lt;&lt; &quot;Brighter Image:&quot; &lt;&lt; std::endl;\n    printMatrix(brighter_image);\n\n    return 0;\n}\n\n",
            "regexps": "// C++ - regex_examples.cpp\n#include &lt;iostream&gt;\n#include &lt;regex&gt;\n#include &lt;string&gt;\n\nint main() {\n    // Pattern Matching\n    std::regex pattern(&quot;\\\\d+&quot;);  // Match one or more digits\n    std::string text = &quot;There are 123 apples&quot;;\n    std::smatch match;\n    std::cout &lt;&lt; &quot;Pattern Matching: &quot; &lt;&lt; (std::regex_search(text, match, pattern) ? &quot;Match found!&quot; : &quot;No match found.&quot;) &lt;&lt; std::endl;\n\n    // Search and Replace\n    text = &quot;Hello 123, meet 456&quot;;\n    std::string result = std::regex_replace(text, pattern, &quot;number&quot;);\n    std::cout &lt;&lt; &quot;Search and Replace: &quot; &lt;&lt; result &lt;&lt; std::endl;  // &quot;Hello number, meet number&quot;\n\n    // String Splitting\n    text = &quot;apple, orange; banana, grape&quot;;\n    std::regex re(&quot;[,;]&quot;);\n    std::sregex_token_iterator it(text.begin(), text.end(), re, -1);\n    std::sregex_token_iterator end;\n    std::cout &lt;&lt; &quot;String Splitting: &quot;;\n    while (it != end) {\n        std::cout &lt;&lt; *it++ &lt;&lt; &quot;, &quot;;\n    }\n    std::cout &lt;&lt; std::endl;  // [&quot;apple&quot;, &quot; orange&quot;, &quot; banana&quot;, &quot; grape&quot;]\n\n    // Extracting Substrings\n    text = &quot;The date is 2024-06-27&quot;;\n    pattern = std::regex(&quot;(\\\\d{4})-(\\\\d{2})-(\\\\d{2})&quot;);\n    if (std::regex_search(text, match, pattern)) {\n        std::cout &lt;&lt; &quot;Extracting Substrings: &quot; &lt;&lt; match[1] &lt;&lt; &quot;, &quot; &lt;&lt; match[2] &lt;&lt; &quot;, &quot; &lt;&lt; match[3] &lt;&lt; std::endl;  // [&quot;2024&quot;, &quot;06&quot;, &quot;27&quot;]\n    }\n\n    // Validation\n    std::string email = &quot;example@test.com&quot;;\n    pattern = std::regex(&quot;^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$&quot;);\n    std::cout &lt;&lt; &quot;Validation: &quot; &lt;&lt; (std::regex_match(email, pattern) ? &quot;Valid email address!&quot; : &quot;Invalid email address.&quot;) &lt;&lt; std::endl;\n\n    // Removing Unwanted Characters\n    text = &quot;Hello, World!&quot;;\n    result = std::regex_replace(text, std::regex(&quot;[^\\\\w\\\\s]&quot;), &quot;&quot;);  // Remove all non-alphanumeric characters\n    std::cout &lt;&lt; &quot;Removing Unwanted Characters: &quot; &lt;&lt; result &lt;&lt; std::endl;  // &quot;Hello World&quot;\n\n    // Anchoring Searches\n    text = &quot;The quick brown fox&quot;;\n    pattern = std::regex(&quot;\\\\bfox\\\\b&quot;);  // Match &#x27;fox&#x27; as a whole word\n    std::cout &lt;&lt; &quot;Anchoring Searches: &quot; &lt;&lt; (std::regex_search(text, match, pattern) ? &quot;Found&quot; : &quot;Not Found&quot;) &lt;&lt; std::endl;\n\n    // Escaping Characters\n    std::string user_input = &quot;some[unsafe]input&quot;;\n    std::string escaped_input = std::regex_replace(user_input, std::regex(&quot;[.*+?^${}()|\\\\[\\\\]\\\\\\\\]&quot;), &quot;\\\\$&amp;&quot;);\n    std::cout &lt;&lt; &quot;Escaping Characters: &quot; &lt;&lt; escaped_input &lt;&lt; std::endl;  // &quot;some\\[unsafe\\]input&quot;\n\n\u001b[O    // Conditional Matching\n    pattern = std::regex(&quot;foo(?=bar)&quot;);  // Match &#x27;foo&#x27; only if followed by &#x27;bar&#x27;\n    text = &quot;foobar and foo&quot;;\n    auto words_begin = std::sregex_iterator(text.begin(), text.end(), pattern);\n    auto words_end = std::sregex_iterator();\n    std::cout &lt;&lt; &quot;Conditional Matching: &quot;;\n    for (std::sregex_iterator i = words_begin; i != words_end; ++i) {\n        std::smatch match = *i;\n        std::cout &lt;&lt; match.str() &lt;&lt; &quot;, &quot;;  // &quot;foo&quot;\n    }\n    std::cout &lt;&lt; std::endl;\n\n    return 0;\n}\n\n"
          }
        },
        "go": {
          "name": "go",
          "displayname": "Go (GoLang)",
          "comment": "#|//",
          "ext": "go",
          "css": "golang",
          "categories": "programming",
          "snippets": {
            "arrays": "fn main() {\n    // 1. Storing Data\n    let data = vec![1, 2, 3, 4, 5];\n    println!(&quot;Original Data: {:?}&quot;, data);\n\n    // 2. Mathematical Operations\n    let squared_data: Vec&lt;i32&gt; = data.iter().map(|&amp;x| x * x).collect();\n    println!(&quot;Squared Data: {:?}&quot;, squared_data);\n\n    // 3. Sorting and Searching\n    let mut sorted_data = data.clone();\n    sorted_data.sort();\n    println!(&quot;Sorted Data: {:?}&quot;, sorted_data);\n\n    let search_value = 3;\n    if let Some(search_index) = data.iter().position(|&amp;x| x == search_value) {\n        println!(&quot;Index of {}: {}&quot;, search_value, search_index);\n    }\n\n    // 4. Data Analysis\n    let sum_value: i32 = data.iter().sum();\n    let mean_value = sum_value as f64 / data.len() as f64;\n    println!(&quot;Mean Value: {}&quot;, mean_value);\n    println!(&quot;Sum Value: {}&quot;, sum_value);\n\n    // 5. Multidimensional Arrays\n    let matrix: Vec&lt;Vec&lt;i32&gt;&gt; = vec![vec![1, 2, 3], vec![4, 5, 6], vec![7, 8, 9]];\n    println!(&quot;Original Matrix: {:?}&quot;, matrix);\n\n    let transposed_matrix: Vec&lt;Vec&lt;i32&gt;&gt; = (0..matrix[0].len())\n        .map(|i| matrix.iter().map(|row| row[i]).collect())\n        .collect();\n    println!(&quot;Transposed Matrix: {:?}&quot;, transposed_matrix);\n\n    // Example of matrix multiplication (identity matrix)\n    let identity_matrix: Vec&lt;Vec&lt;i32&gt;&gt; = vec![vec![1, 0, 0], vec![0, 1, 0], vec![0, 0, 1]];\n    let product_matrix: Vec&lt;Vec&lt;i32&gt;&gt; = matrix\n        .iter()\n        .map(|row| {\n            row.iter()\n                .enumerate()\n                .map(|(i, &amp;val)| val * identity_matrix[i][i])\n                .collect()\n        })\n        .collect();\n    println!(&quot;Matrix Product with Identity Matrix: {:?}&quot;, product_matrix);\n\n    // Image Processing (simulated with a simple 2D array)\n    let image: Vec&lt;Vec&lt;f64&gt;&gt; = (0..5).map(|_| (0..5).map(|_| rand::random()).collect()).collect();\n    println!(&quot;Original Image: {:?}&quot;, image);\n\n    // Simple operation on image\n    let brighter_image: Vec&lt;Vec&lt;f64&gt;&gt; = image\n        .iter()\n        .map(|row| row.iter().map(|&amp;pixel| pixel * 1.2).collect())\n        .collect();\n    println!(&quot;Brighter Image: {:?}&quot;, brighter_image);\n}\n\n",
            "regexps": "// Go - regex_examples.go\npackage main\n\nimport (\n    &quot;fmt&quot;\n    &quot;regexp&quot;\n)\n\nfunc main() {\n    // Pattern Matching\n    pattern := `\\d+`  // Match one or more digits\n    text := &quot;There are 123 apples&quot;\n    matched, _ := regexp.MatchString(pattern, text)\n    fmt.Println(&quot;Pattern Matching:&quot;, matched)\n\n    // Search and Replace\n    re := regexp.MustCompile(pattern)\n    text = &quot;Hello 123, meet 456&quot;\n    result := re.ReplaceAllString(text, &quot;number&quot;)\n    fmt.Println(&quot;Search and Replace:&quot;, result)  // &quot;Hello number, meet number&quot;\n\n    // String Splitting\n    text = &quot;apple, orange; banana, grape&quot;\n    re = regexp.MustCompile(`[ ,;]+`)\n    resultSlice := re.Split(text, -1)\n    fmt.Println(&quot;String Splitting:&quot;, resultSlice)  // [&quot;apple&quot;, &quot;orange&quot;, &quot;banana&quot;, &quot;grape&quot;]\n\n    // Extracting Substrings\n    log_entry := &quot;The date is 2024-06-27&quot;\n    re = regexp.MustCompile(`(\\d{4})-(\\d{2})-(\\d{2})`)\n    match := re.FindStringSubmatch(log_entry)\n    fmt.Println(&quot;Extracting Substrings:&quot;, match)  // [&quot;2024-06-27&quot;, &quot;2024&quot;, &quot;06&quot;, &quot;27&quot;]\n\n    // Validation\n    email := &quot;example@test.com&quot;\n    pattern = `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$`\n    matched, _ = regexp.MatchString(pattern, email)\n    fmt.Println(&quot;Validation:&quot;, matched)\n\n    // Removing Unwanted Characters\n    text = &quot;Hello, World!&quot;\n    re = regexp.MustCompile(`[^\\w\\s]`)  // Remove all non-alphanumeric characters\n    cleaned_text := re.ReplaceAllString(text, &quot;&quot;)\n    fmt.Println(&quot;Removing Unwanted Characters:&quot;, cleaned_text)  // &quot;Hello World&quot;\n\n    // Anchoring Searches\n    text = &quot;The quick brown fox&quot;\n    re = regexp.MustCompile(`\\bfox\\b`)  // Match &#x27;fox&#x27; as a whole word\n    fmt.Println(&quot;Anchoring Searches:&quot;, re.MatchString(text))\n\n    // Escaping Characters\n    user_input := &quot;some[unsafe]input&quot;\n    escaped_input := regexp.QuoteMeta(user_input)\n    fmt.Println(&quot;Escaping Characters:&quot;, escaped_input)  // &quot;some\\[unsafe\\]input&quot;\n\n    // Conditional Matching\n    re = regexp.MustCompile(`foo(?=bar)`)  // Match &#x27;foo&#x27; only if followed by &#x27;bar&#x27;\n    text = &quot;foobar and foo&quot;\n    matches := re.FindAllString(text, -1)\n    fmt.Println(&quot;Conditional Matching:&quot;, matches)  // [&quot;foo&quot;]\n}\n\n"
          }
        },
        "lua": {
          "name": "lua",
          "displayname": "Lua",
          "comment": "--",
          "ext": "lua",
          "css": "lua",
          "categories": "programming",
          "snippets": {
            "arrays": "-- 1. Storing Data\ndata = {1, 2, 3, 4, 5}\nprint(&quot;Original Data:&quot;)\nfor i = 1, #data do\n    io.write(data[i], &quot; &quot;)\nend\nprint()\n\n-- 2. Mathematical Operations\nsquared_data = {}\nfor i = 1, #data do\n    squared_data[i] = data[i] * data[i]\nend\nprint(&quot;Squared Data:&quot;)\nfor i = 1, #squared_data do\n    io.write(squared_data[i], &quot; &quot;)\nend\nprint()\n\n-- 3. Sorting and Searching\ntable.sort(data)\nprint(&quot;Sorted Data:&quot;)\nfor i = 1, #data do\n    io.write(data[i], &quot; &quot;)\nend\nprint()\n\nsearch_value = 3\nsearch_index = -1\nfor i = 1, #data do\n    if data[i] == search_value then\n        search_index = i\n        break\n    end\nend\nprint(&quot;Index of &quot; .. search_value .. &quot;: &quot; .. search_index)\n\n-- 4. Data Analysis\nsum_value = 0\nfor i = 1, #data do\n    sum_value = sum_value + data[i]\nend\nmean_value = sum_value / #data\nprint(&quot;Mean Value: &quot; .. mean_value)\nprint(&quot;Sum Value: &quot; .. sum_value)\n\n-- 5. Multidimensional Arrays\nmatrix = {\n    {1, 2, 3},\n    {4, 5, 6},\n    {7, 8, 9}\n}\nprint(&quot;Original Matrix:&quot;)\nfor i = 1, #matrix do\n    for j = 1, #matrix[i] do\n        io.write(matrix[i][j], &quot; &quot;)\n    end\n    print()\nend\n\n-- Transpose the matrix\ntransposed_matrix = {}\nfor i = 1, #matrix[1] do\n    transposed_matrix[i] = {}\n    for j = 1, #matrix do\n        transposed_matrix[i][j] = matrix[j][i]\n    end\nend\nprint(&quot;Transposed Matrix:&quot;)\nfor i = 1, #transposed_matrix do\n    for j = 1, #transposed_matrix[i] do\n        io.write(transposed_matrix[i][j], &quot; &quot;)\n    end\n    print()\nend\n\n-- Example of matrix multiplication (identity matrix)\nidentity_matrix = {\n    {1, 0, 0},\n    {0, 1, 0},\n    {0, 0, 1}\n}\nproduct_matrix = {}\nfor i = 1, #matrix do\n    product_matrix[i] = {}\n    for j = 1, #identity_matrix[1] do\n        sum = 0\n        for k = 1, #identity_matrix do\n            sum = sum + matrix[i][k] * identity_matrix[k][j]\n        end\n        product_matrix[i][j] = sum\n    end\nend\nprint(&quot;Matrix Product with Identity Matrix:&quot;)\nfor i = 1, #product_matrix do\n    for j = 1, #product_matrix[i] do\n        io.write(product_matrix[i][j], &quot; &quot;)\n    end\n    print()\nend\n\n-- Image Processing (simulated with a simple 2D array)\nmath.randomseed(os.time())\nimage = {}\nfor i = 1, 5 do\n    image[i] = {}\n    for j = 1, 5 do\n        image[i][j] = math.random()\n    end\nend\nprint(&quot;Original Image:&quot;)\nfor i = 1, #image do\n    for j = 1, #image[i] do\n        io.write(string.format(&quot;%.2f&quot;, image[i][j]), &quot; &quot;)\n    end\n    print()\nend\n\n-- Simple operation on image\nbrighter_image = {}\nfor i = 1, #image do\n    brighter_image[i] = {}\n    for j = 1, #image[i] do\n        brighter_image[i][j] = image[i][j] * 1.2\n    end\nend\nprint(&quot;Brighter Image:&quot;)\nfor i = 1, #brighter_image do\n    for j = 1, #brighter_image[i] do\n        io.write(string.format(&quot;%.2f&quot;, brighter_image[i][j]), &quot; &quot;)\n    end\n    print()\nend\n\n",
            "regexps": "-- Lua - regex_examples.lua\n-- Lua does not have built-in regex support, but uses pattern matching instead\n\n-- Pattern Matching\nlocal text = &quot;There are 123 apples&quot;\nlocal match = string.match(text, &quot;%d+&quot;)\nprint(&quot;Pattern Matching: &quot; .. (match and &quot;Match found!&quot; or &quot;No match found.&quot;))\n\n-- Search and Replace\ntext = &quot;Hello 123, meet 456&quot;\nlocal result = string.gsub(text, &quot;%d+&quot;, &quot;number&quot;)\nprint(&quot;Search and Replace: &quot; .. result)  -- &quot;Hello number, meet number&quot;\n\n-- String Splitting\ntext = &quot;apple, orange; banana, grape&quot;\nlocal result = {}\nfor token in string.gmatch(text, &quot;([^,;]+)&quot;) do\n  table.insert(result, token)\nend\nprint(&quot;String Splitting: &quot; .. table.concat(result, &quot;, &quot;))  -- [&quot;apple&quot;, &quot; orange&quot;, &quot; banana&quot;, &quot; grape&quot;]\n\n-- Extracting Substrings\ntext = &quot;The date is 2024-06-27&quot;\nlocal year, month, day = string.match(text, &quot;(%d%d%d%d)%-(%d%d)%-(%d%d)&quot;)\nprint(&quot;Extracting Substrings: &quot; .. year .. &quot;, &quot; .. month .. &quot;, &quot; .. day)  -- [&quot;2024&quot;, &quot;06&quot;, &quot;27&quot;]\n\n-- Validation\nlocal email = &quot;example@test.com&quot;\nlocal pattern = &quot;^[a-zA-Z0-9._%%+-]+@[a-zA-Z0-9.-]+%.[a-zA-Z]{2,}$&quot;\nprint(&quot;Validation: &quot; .. (string.match(email, pattern) and &quot;Valid email address!&quot; or &quot;Invalid email address.&quot;))\n\n-- Removing Unwanted Characters\ntext = &quot;Hello, World!&quot;\nlocal cleaned_text = string.gsub(text, &quot;[^%w%s]&quot;, &quot;&quot;)  -- Remove all non-alphanumeric characters\nprint(&quot;Removing Unwanted Characters: &quot; .. cleaned_text)  -- &quot;Hello World&quot;\n\n-- Anchoring Searches\ntext = &quot;The quick brown fox&quot;\npattern = &quot;%f[%w]fox%f[%W]&quot;  -- Match &#x27;fox&#x27; as a whole word\nprint(&quot;Anchoring Searches: &quot; .. (string.match(text, pattern) and &quot;Found&quot; or &quot;Not Found&quot;))\n\n-- Escaping Characters\nlocal function escape_pattern(text)\n  return string.gsub(text, &quot;([^%w])&quot;, &quot;%%%1&quot;)\nend\nlocal user_input = &quot;some[unsafe]input&quot;\nlocal escaped_input = escape_pattern(user_input)\nprint(&quot;Escaping Characters: &quot; .. escaped_input)  -- &quot;some%[unsafe%]input&quot;\n\n-- Conditional Matching\ntext = &quot;foobar and foo&quot;\npattern = &quot;foo(?=bar)&quot;  -- Match &#x27;foo&#x27; only if followed by &#x27;bar&#x27;\nlocal found = string.match(text, &quot;foo()bar&quot;) and string.sub(text, string.match(text, &quot;foo()bar&quot;) - 3, string.match(text, &quot;foo()bar&quot;) - 1) or &quot;&quot;\nprint(&quot;Conditional Matching: &quot; .. found)  -- &quot;foo&quot;\n\n"
          }
        },
        "typescript": {
          "name": "typescript",
          "displayname": "Typescript",
          "comment": "#|//",
          "ext": "ts",
          "css": "typescript",
          "categories": "programming",
          "snippets": {}
        },
        "node": {
          "name": "node",
          "displayname": "Node.js JavaScript",
          "comment": "#|//",
          "ext": "js",
          "css": "javascript",
          "inherits": "js",
          "categories": "programming",
          "snippets": {}
        },
        "csharp": {
          "name": "csharp",
          "displayname": "C# (C-Sharp)",
          "comment": "#|//",
          "ext": "cs",
          "css": "csharp",
          "categories": "programming",
          "snippets": {
            "arrays": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program\n{\n    static void Main()\n    {\n        // 1. Storing Data\n        int[] data = { 1, 2, 3, 4, 5 };\n        Console.WriteLine(&quot;Original Data: &quot; + string.Join(&quot;, &quot;, data));\n\n        // 2. Mathematical Operations\n        int[] squaredData = data.Select(x =&gt; x * x).ToArray();\n        Console.WriteLine(&quot;Squared Data: &quot; + string.Join(&quot;, &quot;, squaredData));\n\n        // 3. Sorting and Searching\n        int[] sortedData = data.OrderBy(x =&gt; x).ToArray();\n        Console.WriteLine(&quot;Sorted Data: &quot; + string.Join(&quot;, &quot;, sortedData));\n\n        int searchValue = 3;\n        int searchIndex = Array.IndexOf(data, searchValue);\n        Console.WriteLine($&quot;Index of {searchValue}: {searchIndex}&quot;);\n\n        // 4. Data Analysis\n        double meanValue = data.Average();\n        Console.WriteLine(&quot;Mean Value: &quot; + meanValue);\n\n        int sumValue = data.Sum();\n        Console.WriteLine(&quot;Sum Value: &quot; + sumValue);\n\n        // 5. Multidimensional Arrays\n        int[,] matrix = { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } };\n        Console.WriteLine(&quot;Original Matrix:&quot;);\n        PrintMatrix(matrix);\n\n        int[,] transposedMatrix = Transpose(matrix);\n        Console.WriteLine(&quot;Transposed Matrix:&quot;);\n        PrintMatrix(transposedMatrix);\n\n        // Example of matrix multiplication (identity matrix)\n        int[,] identityMatrix = { { 1, 0, 0 }, { 0, 1, 0 }, { 0, 0, 1 } };\n        int[,] productMatrix = Multiply(matrix, identityMatrix);\n        Console.WriteLine(&quot;Matrix Product with Identity Matrix:&quot;);\n        PrintMatrix(productMatrix);\n\n        // Image Processing (simulated with a simple 2D array)\n        Random rand = new Random();\n        double[,] image = new double[5, 5];\n        for (int i = 0; i &lt; 5; i++)\n            for (int j = 0; j &lt; 5; j++)\n                image[i, j] = rand.NextDouble();\n        Console.WriteLine(&quot;Original Image:&quot;);\n        PrintMatrix(image);\n\n        // Simple operation on image\n        double[,] brighterImage = new double[5, 5];\n        for (int i = 0; i &lt; 5; i++)\n            for (int j = 0; j &lt; 5; j++)\n                brighterImage[i, j] = image[i, j] * 1.2;\n        Console.WriteLine(&quot;Brighter Image:&quot;);\n        PrintMatrix(brighterImage);\n    }\n\n    static void PrintMatrix(int[,] matrix)\n    {\n        for (int i = 0; i &lt; matrix.GetLength(0); i++)\n        {\n            for (int j = 0; j &lt; matrix.GetLength(1); j++)\n                Console.Write(matrix[i, j] + &quot; &quot;);\n            Console.WriteLine();\n        }\n    }\n\n    static void PrintMatrix(double[,] matrix)\n    {\n        for (int i = 0; i &lt; matrix.GetLength(0); i++)\n        {\n            for (int j = 0; j &lt; matrix.GetLength(1); j++)\n                Console.Write(matrix[i, j].ToString(&quot;F2&quot;) + &quot; &quot;);\n            Console.WriteLine();\n        }\n    }\n\n    static int[,] Transpose(int[,] matrix)\n    {\n        int rows = matrix.GetLength(0);\n        int cols = matrix.GetLength(1);\n        int[,] transposed = new int[cols, rows];\n\n        for (int i = 0; i &lt; rows; i++)\n            for (int j = 0; j &lt; cols; j++)\n                transposed[j, i] = matrix[i, j];\n\n        return transposed;\n    }\n\n    static int[,] Multiply(int[,] a, int[,] b)\n    {\n        int rows = a.GetLength(0);\n        int cols = b.GetLength(1);\n        int innerDim = a.GetLength(1);\n        int[,] product = new int[rows, cols];\n\n        for (int i = 0; i &lt; rows; i++)\n            for (int j = 0; j &lt; cols; j++)\n                for (int k = 0; k &lt; innerDim; k++)\n                    product[i, j] += a[i, k] * b[k, j];\n\n        return product;\n    }\n}\n\n",
            "regexps": "// C# - RegexExamples.cs\nusing System;\nusing System.Text.RegularExpressions;\n\nclass RegexExamples\n{\n    static void Main()\n    {\n        // Pattern Matching\n        string text = &quot;There are 123 apples&quot;;\n        string pattern = @&quot;\\d+&quot;;  // Match one or more digits\n        bool isMatch = Regex.IsMatch(text, pattern);\n        Console.WriteLine(&quot;Pattern Matching: &quot; + (isMatch ? &quot;Match found!&quot; : &quot;No match found.&quot;));\n\n        // Search and Replace\n        text = &quot;Hello 123, meet 456&quot;;\n        string result = Regex.Replace(text, pattern, &quot;number&quot;);\n        Console.WriteLine(&quot;Search and Replace: &quot; + result);  // &quot;Hello number, meet number&quot;\n\n        // String Splitting\n        text = &quot;apple, orange; banana, grape&quot;;\n        string[] resultArray = Regex.Split(text, &quot;[,;]&quot;);\n        Console.WriteLine(&quot;String Splitting: &quot; + string.Join(&quot;, &quot;, resultArray));  // [&quot;apple&quot;, &quot; orange&quot;, &quot; banana&quot;, &quot; grape&quot;]\n\n        // Extracting Substrings\n        text = &quot;The date is 2024-06-27&quot;;\n        pattern = @&quot;(\\d{4})-(\\d{2})-(\\d{2})&quot;;\n        Match match = Regex.Match(text, pattern);\n        if (match.Success)\n        {\n            Console.WriteLine(&quot;Extracting Substrings: &quot; + match.Groups[1] + &quot;, &quot; + match.Groups[2] + &quot;, &quot; + match.Groups[3]);  // [&quot;2024&quot;, &quot;06&quot;, &quot;27&quot;]\n        }\n\n        // Validation\n        string email = &quot;example@test.com&quot;;\n        pattern = @&quot;^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$&quot;;\n        isMatch = Regex.IsMatch(email, pattern);\n        Console.WriteLine(&quot;Validation: &quot; + (isMatch ? &quot;Valid email address!&quot; : &quot;Invalid email address.&quot;));\n\n        // Removing Unwanted Characters\n        text = &quot;Hello, World!&quot;;\n        result = Regex.Replace(text, &quot;[^\\\\w\\\\s]&quot;, &quot;&quot;);  // Remove all non-alphanumeric characters\n        Console.WriteLine(&quot;Removing Unwanted Characters: &quot; + result);  // &quot;Hello World&quot;\n\n        // Anchoring Searches\n        text = &quot;The quick brown fox&quot;;\n        pattern = @&quot;\\bfox\\b&quot;;  // Match &#x27;fox&#x27; as a whole word\n        isMatch = Regex.IsMatch(text, pattern);\n        Console.WriteLine(&quot;Anchoring Searches: &quot; + (isMatch ? &quot;Found&quot; : &quot;Not Found&quot;));\n\n\u001b[O        // Escaping Characters\n        string user_input = &quot;some[unsafe]input&quot;;\n        string escaped_input = Regex.Escape(user_input);\n        Console.WriteLine(&quot;Escaping Characters: &quot; + escaped_input);  // &quot;some\\[unsafe\\]input&quot;\n\n        // Conditional Matching\n        pattern = @&quot;foo(?=bar)&quot;;  // Match &#x27;foo&#x27; only if followed by &#x27;bar&#x27;\n        text = &quot;foobar and foo&quot;;\n        MatchCollection matches = Regex.Matches(text, pattern);\n        Console.Write(&quot;Conditional Matching: &quot;);\n        foreach (Match m in matches)\n        {\n            Console.Write(m.Value + &quot; &quot;);  // &quot;foo&quot;\n        }\n        Console.WriteLine();\n    }\n}\n\n"
          }
        },
        "rust": {
          "name": "rust",
          "displayname": "Rust",
          "comment": "#|//",
          "ext": "rs",
          "css": "rust",
          "categories": "programming",
          "snippets": {
            "arrays": "fn main() {\n    // 1. Storing Data\n    let data = vec![1, 2, 3, 4, 5];\n    println!(&quot;Original Data: {:?}&quot;, data);\n\n    // 2. Mathematical Operations\n    let squared_data: Vec&lt;i32&gt; = data.iter().map(|&amp;x| x * x).collect();\n    println!(&quot;Squared Data: {:?}&quot;, squared_data);\n\n    // 3. Sorting and Searching\n    let mut sorted_data = data.clone();\n    sorted_data.sort();\n    println!(&quot;Sorted Data: {:?}&quot;, sorted_data);\n\n    let search_value = 3;\n    if let Some(search_index) = data.iter().position(|&amp;x| x == search_value) {\n        println!(&quot;Index of {}: {}&quot;, search_value, search_index);\n    }\n\n    // 4. Data Analysis\n    let sum_value: i32 = data.iter().sum();\n    let mean_value = sum_value as f64 / data.len() as f64;\n    println!(&quot;Mean Value: {}&quot;, mean_value);\n    println!(&quot;Sum Value: {}&quot;, sum_value);\n\n    // 5. Multidimensional Arrays\n    let matrix: Vec&lt;Vec&lt;i32&gt;&gt; = vec![vec![1, 2, 3], vec![4, 5, 6], vec![7, 8, 9]];\n    println!(&quot;Original Matrix: {:?}&quot;, matrix);\n\n    let transposed_matrix: Vec&lt;Vec&lt;i32&gt;&gt; = (0..matrix[0].len())\n        .map(|i| matrix.iter().map(|row| row[i]).collect())\n        .collect();\n    println!(&quot;Transposed Matrix: {:?}&quot;, transposed_matrix);\n\n    // Example of matrix multiplication (identity matrix)\n    let identity_matrix: Vec&lt;Vec&lt;i32&gt;&gt; = vec![vec![1, 0, 0], vec![0, 1, 0], vec![0, 0, 1]];\n    let product_matrix: Vec&lt;Vec&lt;i32&gt;&gt; = matrix\n        .iter()\n        .map(|row| {\n            row.iter()\n                .enumerate()\n                .map(|(i, &amp;val)| val * identity_matrix[i][i])\n                .collect()\n        })\n        .collect();\n    println!(&quot;Matrix Product with Identity Matrix: {:?}&quot;, product_matrix);\n\n    // Image Processing (simulated with a simple 2D array)\n    let image: Vec&lt;Vec&lt;f64&gt;&gt; = (0..5).map(|_| (0..5).map(|_| rand::random()).collect()).collect();\n    println!(&quot;Original Image: {:?}&quot;, image);\n\n    // Simple operation on image\n    let brighter_image: Vec&lt;Vec&lt;f64&gt;&gt; = image\n        .iter()\n        .map(|row| row.iter().map(|&amp;pixel| pixel * 1.2).collect())\n        .collect();\n    println!(&quot;Brighter Image: {:?}&quot;, brighter_image);\n}\n\n",
            "regexps": "// Rust - regex_examples.rs\nextern crate regex;\nuse regex::Regex;\n\nfn main() {\n    // Pattern Matching\n    let pattern = Regex::new(r&quot;\\d+&quot;).unwrap();  // Match one or more digits\n    let text = &quot;There are 123 apples&quot;;\n    println!(&quot;Pattern Matching: {}&quot;, if pattern.is_match(text) { &quot;Match found!&quot; } else { &quot;No match found.&quot; });\n\n    // Search and Replace\n    let text = &quot;Hello 123, meet 456&quot;;\n    let result = pattern.replace_all(text, &quot;number&quot;);\n    println!(&quot;Search and Replace: {}&quot;, result);  // &quot;Hello number, meet number&quot;\n\n    // String Splitting\n    let text = &quot;apple, orange; banana, grape&quot;;\n    let pattern = Regex::new(r&quot;[ ,;]+&quot;).unwrap();\n    let result: Vec&lt;&amp;str&gt; = pattern.split(text).collect();\n    println!(&quot;String Splitting: {:?}&quot;, result);  // [&quot;apple&quot;, &quot;orange&quot;, &quot;banana&quot;, &quot;grape&quot;]\n\n    // Extracting Substrings\n    let log_entry = &quot;The date is 2024-06-27&quot;;\n    let pattern = Regex::new(r&quot;(\\d{4})-(\\d{2})-(\\d{2})&quot;).unwrap();\n    if let Some(caps) = pattern.captures(log_entry) {\n        println!(&quot;Extracting Substrings: {:?}&quot;, &amp;caps[1..4]);  // [&quot;2024&quot;, &quot;06&quot;, &quot;27&quot;]\n    }\n\n    // Validation\n    let email = &quot;example@test.com&quot;;\n    let pattern = Regex::new(r&quot;^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$&quot;).unwrap();\n    println!(&quot;Validation: {}&quot;, if pattern.is_match(email) { &quot;Valid email address!&quot; } else { &quot;Invalid email address.&quot; });\n\n    // Parsing Structured Text\n    let log_entry = &quot;127.0.0.1 - - [27/Jun/2024:10:00:00 +0000] \\&quot;GET /index.html HTTP/1.1\\&quot; 200 1234&quot;;\n    let pattern = Regex::new(r&quot;(?P&lt;ip&gt;\\d+\\.\\d+\\.\\d+\\.\\d+) - - \\[(?P&lt;date&gt;[^\\]]+)\\] \\&quot;(?P&lt;request&gt;[^\\&quot;]+)\\&quot; (?P&lt;status&gt;\\d+) (?P&lt;size&gt;\\d+)&quot;).unwrap();\n    if let Some(caps) = pattern.captures(log_entry) {\n        println!(&quot;Parsing Structured Text: {:?}&quot;, caps);\n    }\n\n    // Removing Unwanted Characters\n    let text = &quot;Hello, World!&quot;;\n    let pattern = Regex::new(r&quot;[^\\w\\s]&quot;).unwrap();  // Remove all non-alphanumeric characters\n    let cleaned_text = pattern.replace_all(text, &quot;&quot;);\n    println!(&quot;Removing Unwanted Characters: {}&quot;, cleaned_text);  // &quot;Hello World&quot;\n\n    // Anchoring Searches\n    let text = &quot;The quick brown fox&quot;;\n    let pattern = Regex::new(r&quot;\\bfox\\b&quot;).unwrap();  // Match &#x27;fox&#x27; as a whole word\n    println!(&quot;Anchoring Searches: {}&quot;, if pattern.is_match(text) { &quot;Found&quot; } else { &quot;Not Found&quot; });\n\n    // Escaping Characters\n    let user_input = &quot;some[unsafe]input&quot;;\n    let escaped_input = regex::escape(user_input);\n    let pattern = Regex::new(&amp;escaped_input).unwrap();\n    println!(&quot;Escaping Characters: {:?}&quot;, pattern);  // &quot;some\\[unsafe\\]input&quot;\n\n    // Conditional Matching\n    let pattern = Regex::new(r&quot;foo(?=bar)&quot;).unwrap();  // Match &#x27;foo&#x27; only if followed by &#x27;bar&#x27;\n    let text = &quot;foobar and foo&quot;;\n    let matches: Vec&lt;&amp;str&gt; = pattern.find_iter(text).map(|mat| mat.as_str()).collect();\n    println!(&quot;Conditional Matching: {:?}&quot;, matches);  // [&quot;foo&quot;]\n}\n\n"
          }
        },
        "python": {
          "name": "python",
          "displayname": "Python",
          "comment": "#|//",
          "ext": "py",
          "css": "python",
          "categories": "programming",
          "snippets": {
            "arrays": "import numpy as np\n\n# 1. Storing Data\ndata = np.array([1, 2, 3, 4, 5])\nprint(&quot;Original Data:&quot;, data)\n\n# 2. Mathematical Operations\nsquared_data = data ** 2\nprint(&quot;Squared Data:&quot;, squared_data)\n\n# 3. Sorting and Searching\nsorted_data = np.sort(data)\nprint(&quot;Sorted Data:&quot;, sorted_data)\n\nsearch_value = 3\nsearch_index = np.where(data == search_value)\nprint(f&quot;Index of {search_value}:&quot;, search_index[0][0])\n\n# 4. Data Analysis\nmean_value = np.mean(data)\nprint(&quot;Mean Value:&quot;, mean_value)\n\nsum_value = np.sum(data)\nprint(&quot;Sum Value:&quot;, sum_value)\n\n# 5. Multidimensional Arrays\nmatrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nprint(&quot;Original Matrix:\\n&quot;, matrix)\n\ntransposed_matrix = np.transpose(matrix)\nprint(&quot;Transposed Matrix:\\n&quot;, transposed_matrix)\n\n# Example of matrix multiplication\nidentity_matrix = np.eye(3)\nproduct_matrix = np.matmul(matrix, identity_matrix)\nprint(&quot;Matrix Product with Identity Matrix:\\n&quot;, product_matrix)\n\n# Image Processing (simulated with a simple 2D array)\nimage = np.random.rand(5, 5)  # Simulated grayscale image\nprint(&quot;Original Image:\\n&quot;, image)\n\n# Simple operation on image\nbrighter_image = image * 1.2  # Increase brightness\nprint(&quot;Brighter Image:\\n&quot;, brighter_image)\n\n\n",
            "regexps": "# Python - regex_examples.py\nimport re\n\n# Pattern Matching\npattern = r&#x27;\\d+&#x27;  # Match one or more digits\ntext = &quot;There are 123 apples&quot;\nmatch = re.search(pattern, text)\nprint(&quot;Pattern Matching:&quot;, &quot;Match found!&quot; if match else &quot;No match found.&quot;)\n\n# Search and Replace\ntext = &quot;Hello 123, meet 456&quot;\nresult = re.sub(r&#x27;\\d+&#x27;, &#x27;number&#x27;, text)\nprint(&quot;Search and Replace:&quot;, result)  # &quot;Hello number, meet number&quot;\n\n# String Splitting\ntext = &quot;apple, orange; banana, grape&quot;\nresult = re.split(r&#x27;[,;]&#x27;, text)\nprint(&quot;String Splitting:&quot;, result)  # [&quot;apple&quot;, &quot; orange&quot;, &quot; banana&quot;, &quot; grape&quot;]\n\n# Extracting Substrings\nlog_entry = &quot;The date is 2024-06-27&quot;\npattern = r&#x27;(\\d{4})-(\\d{2})-(\\d{2})&#x27;\nmatch = re.search(pattern, log_entry)\nif match:\n    print(&quot;Extracting Substrings:&quot;, match.groups())  # (&quot;2024&quot;, &quot;06&quot;, &quot;27&quot;)\n\n# Validation\nemail = &quot;example@test.com&quot;\npattern = r&#x27;^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$&#x27;\nif re.match(pattern, email):\n    print(&quot;Validation: Valid email address!&quot;)\nelse:\n    print(&quot;Validation: Invalid email address.&quot;)\n\n# Parsing Structured Text\nlog_entry = &quot;127.0.0.1 - - [27/Jun/2024:10:00:00 +0000] \\&quot;GET /index.html HTTP/1.1\\&quot; 200 1234&quot;\npattern = r&#x27;(?P&lt;ip&gt;\\d+\\.\\d+\\.\\d+\\.\\d+) - - \\[(?P&lt;date&gt;[^\\]]+)\\] &quot;(?P&lt;request&gt;[^&quot;]+)&quot; (?P&lt;status&gt;\\d+) (?P&lt;size&gt;\\d+)&#x27;\nmatch = re.match(pattern, log_entry)\nif match:\n    print(&quot;Parsing Structured Text:&quot;, match.groupdict())\n\n# Removing Unwanted Characters\ntext = &quot;Hello, World!&quot;\ncleaned_text = re.sub(r&#x27;[^\\w\\s]&#x27;, &#x27;&#x27;, text)  # Remove all non-alphanumeric characters\nprint(&quot;Removing Unwanted Characters:&quot;, cleaned_text)  # &quot;Hello World&quot;\n\n# Anchoring Searches\ntext = &quot;The quick brown fox&quot;\npattern = r&#x27;\\bfox\\b&#x27;  # Match &#x27;fox&#x27; as a whole word\nmatch = re.search(pattern, text)\nprint(&quot;Anchoring Searches:&quot;, &quot;Found&quot; if match else &quot;Not Found&quot;)\n\n# Escaping Characters\nuser_input = &quot;some[unsafe]input&quot;\nescaped_input = re.escape(user_input)\npattern = rf&#x27;{escaped_input}&#x27;\nprint(&quot;Escaping Characters:&quot;, pattern)  # &quot;some\\[unsafe\\]input&quot;\n\n# Conditional Matching\npattern = r&#x27;foo(?=bar)&#x27;  # Match &#x27;foo&#x27; only if followed by &#x27;bar&#x27;\ntext = &quot;foobar and foo&quot;\nmatches = re.findall(pattern, text)\nprint(&quot;Conditional Matching:&quot;, matches)  # [&quot;foo&quot;]\n\n"
          }
        }
      },
      "aliases": {
        "regexps": "regexps",
        "regular expressions": "regexps",
        "pattern matching": "regexps",
        "validation": "regexps",
        "string matching": "regexps",
        "pcre": "regexps",
        "search pattern": "regexps",
        "matcher": "regexps",
        "arrays": "arrays",
        "list": "arrays",
        "ordered list": "arrays",
        "vector": "arrays"
      },
      "topics": {
        "regexps": "Regular Expressions",
        "arrays": "Arrays"
      },
      "displayname": "Programming Languages"
    }
  }
};