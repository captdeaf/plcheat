// Auto-Generated, do not edit
const GENERATED = {
  "buildtime": 1719885973,
  "generatetime": 3439771646,
  "categories": {
    "programming": {
      "name": "programming",
      "languages": {
        "bash": {
          "shortname": "bash",
          "displayname": "Bash (Shell) Script",
          "ext": "sh",
          "css": "bash",
          "categories": "programming",
          "description": "",
          "snippets": {
            "regexps": "#!/bin/bash\n# Bash - regex_examples.sh\n\n# Pattern Matching\ntext=\"There are 123 apples\"\nif [[ $text =~ [0-9]+ ]]; then\n    echo \"Pattern Matching: Match found!\"\nelse\n    echo \"Pattern Matching: No match found.\"\nfi\n\n# Search and Replace\ntext=\"Hello 123, meet 456\"\nresult=$(echo \"$text\" | sed -E 's/[0-9]+/number/g')\necho \"Search and Replace: $result\"  # \"Hello number, meet number\"\n\n# String Splitting\ntext=\"apple, orange; banana, grape\"\nIFS=',;' read -ra result <<< \"$text\"\necho \"String Splitting: ${result[@]}\"  # [\"apple\", \" orange\", \" banana\", \" grape\"]\n\n# Extracting Substrings\ntext=\"The date is 2024-06-27\"\nif [[ $text =~ ([0-9]{4})-([0-9]{2})-([0-9]{2}) ]]; then\n    echo \"Extracting Substrings: ${BASH_REMATCH[1]}, ${BASH_REMATCH[2]}, ${BASH_REMATCH[3]}\"  # [\"2024\", \"06\", \"27\"]\nfi\n\n# Validation\nemail=\"example@test.com\"\nif [[ $email =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$ ]]; then\n    echo \"Validation: Valid email address!\"\nelse\n    echo \"Validation: Invalid email address.\"\nfi\n\n# Removing Unwanted Characters\ntext=\"Hello, World!\"\ncleaned_text=$(echo \"$text\" | sed 's/[^a-zA-Z0-9 ]//g')\necho \"Removing Unwanted Characters: $cleaned_text\"  # \"Hello World\"\n\n# Anchoring Searches\ntext=\"The quick brown fox\"\nif [[ $text =~ \\bfox\\b ]]; then\n    echo \"Anchoring Searches: Found\"\nelse\n    echo \"Anchoring Searches: Not Found\"\nfi\n\n# Escaping Characters\nuser_input=\"some[unsafe]input\"\nescaped_input=$(printf '%s\\n' \"$user_input\" | sed -e 's/[]\\/$*.^|[]/\\\\&/g')\necho \"Escaping Characters: $escaped_input\"  # \"some\\[unsafe\\]input\"\n\n# Conditional Matching\ntext=\"foobar and foo\"\npattern=\"foo(?=bar)\"\nif [[ $text =~ foo(bar) ]]; then\n    echo \"Conditional Matching: ${BASH_REMATCH[0]}\"  # \"foo\"\nfi\n\n",
            "arrays": "#!/bin/bash\n\n# 1. Storing Data\ndata=(1 2 3 4 5)\necho \"Original Data: ${data[@]}\"\n\n# 2. Mathematical Operations\nsquared_data=()\nfor i in \"${data[@]}\"; do\n  squared_data+=($(($i * $i)))\ndone\necho \"Squared Data: ${squared_data[@]}\"\n\n# 3. Sorting and Searching\nsorted_data=($(for i in \"${data[@]}\"; do echo $i; done | sort -n))\necho \"Sorted Data: ${sorted_data[@]}\"\n\nsearch_value=3\nsearch_index=-1\nfor i in \"${!data[@]}\"; do\n  if [[ ${data[i]} -eq $search_value ]]; then\n    search_index=$i\n    break\n  fi\ndone\necho \"Index of $search_value: $search_index\"\n\n# 4. Data Analysis\nsum_value=0\nfor i in \"${data[@]}\"; do\n  sum_value=$(($sum_value + $i))\ndone\nmean_value=$(echo \"scale=2; $sum_value / ${#data[@]}\" | bc)\necho \"Mean Value: $mean_value\"\necho \"Sum Value: $sum_value\"\n\n# 5. Multidimensional Arrays\nmatrix=(\n  \"1 2 3\"\n  \"4 5 6\"\n  \"7 8 9\"\n)\necho \"Original Matrix:\"\nfor row in \"${matrix[@]}\"; do\n  echo \"$row\"\ndone\n\n# Transpose the matrix\ntranspose() {\n  echo \"$1\" | awk '\n  {\n    for (i=1; i<=NF; i++) {\n      a[NR,i] = $i\n    }\n  }\n  NF>p { p = NF }\n  END {\n    for (i=1; i<=p; i++) {\n      str = a[1,i]\n      for (j=2; j<=NR; j++) {\n        str = str\" \"a[j,i]\n      }\n      print str\n    }\n  }'\n}\n\ntransposed_matrix=$(transpose \"$(echo \"${matrix[@]}\" | tr ' ' '\\n')\")\necho \"Transposed Matrix:\"\necho \"$transposed_matrix\"\n\n# Image Processing (simulated with a simple 2D array)\nimage=()\nfor ((i=0; i<5; i++)); do\n  row=()\n  for ((j=0; j<5; j++)); do\n    row+=($(echo \"scale=2; $RANDOM/32768\" | bc))\n  done\n  image+=(\"${row[@]}\")\ndone\n\necho \"Original Image:\"\nfor row in \"${image[@]}\"; do\n  echo \"$row\"\ndone\n\n# Simple operation on image\nbrighter_image=()\nfor row in \"${image[@]}\"; do\n  new_row=()\n  for pixel in $row; do\n    new_row+=($(echo \"scale=2; $pixel * 1.2\" | bc))\n  done\n  brighter_image+=(\"${new_row[@]}\")\ndone\n\necho \"Brighter Image:\"\nfor row in \"${brighter_image[@]}\"; do\n  echo \"$row\"\ndone\n\n"
          }
        },
        "kotlin": {
          "shortname": "kotlin",
          "displayname": "Kotlin",
          "ext": "kt",
          "css": "kotlin",
          "categories": "programming",
          "description": "",
          "snippets": {
            "regexps": "// Kotlin - RegexExamples.kt\nfun main() {\n    // Pattern Matching\n    val pattern = \"\\\\d+\".toRegex()  // Match one or more digits\n    val text = \"There are 123 apples\"\n    println(\"Pattern Matching: ${if (pattern.containsMatchIn(text)) \"Match found!\" else \"No match found.\"}\")\n\n    // Search and Replace\n\u001bOB\u001bOB\u001bOB    var text = \"Hello 123, meet 456\"\n    var result = text.replace(\"\\\\d+\".toRegex(), \"number\")\n    println(\"Search and Replace: $result\")  // \"Hello number, meet number\"\n\n    // String Splitting\n    text = \"apple, orange; banana, grape\"\n    val resultArray = text.split(\"[,;]\".toRegex())\n    println(\"String Splitting: ${resultArray.joinToString(\", \")}\")  // [\"apple\", \" orange\", \" banana\", \" grape\"]\n\n    // Extracting Substrings\n    text = \"The date is 2024-06-27\"\n    pattern = \"(\\\\d{4})-(\\\\d{2})-(\\\\d{2})\".toRegex()\n    val matchResult = pattern.find(text)\n    matchResult?.groupValues?.let { groups ->\n        println(\"Extracting Substrings: ${groups[1]}, ${groups[2]}, ${groups[3]}\")  // [\"2024\", \"06\", \"27\"]\n    }\n\n    // Validation\n    val email = \"example@test.com\"\n    val emailPattern = \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\".toRegex()\n    println(\"Validation: ${if (emailPattern.matches(email)) \"Valid email address!\" else \"Invalid email address.\"}\")\n\n    // Removing Unwanted Characters\n    text = \"Hello, World!\"\n    result = text.replace(\"[^\\\\w\\\\s]\".toRegex(), \"\")  // Remove all non-alphanumeric characters\n    println(\"Removing Unwanted Characters: $result\")  // \"Hello World\"\n\n    // Anchoring Searches\n    text = \"The quick brown fox\"\n    val wordPattern = \"\\\\bfox\\\\b\".toRegex()  // Match 'fox' as a whole word\n    println(\"Anchoring Searches: ${if (wordPattern.containsMatchIn(text)) \"Found\" else \"Not Found\"}\")\n\n    // Escaping Characters\n    val user_input = \"some[unsafe]input\"\n    val escaped_input = Regex.escape(user_input)\n    println(\"Escaping Characters: $escaped_input\")  // \"some\\[unsafe\\]input\"\n\n    // Conditional Matching\n    text = \"foobar and foo\"\n    val lookaheadPattern = \"foo(?=bar)\".toRegex()  // Match 'foo' only if followed by 'bar'\n    val matches = lookaheadPattern.findAll(text).map { it.value }.toList()\n    println(\"Conditional Matching: ${matches.joinToString(\", \")}\")  // \"foo\"\n}\n\n",
            "arrays": "fun main() {\n    // 1. Storing Data\n    val data = listOf(1, 2, 3, 4, 5)\n    println(\"Original Data: $data\")\n\n    // 2. Mathematical Operations\n    val squaredData = data.map { it * it }\n    println(\"Squared Data: $squaredData\")\n\n    // 3. Sorting and Searching\n    val sortedData = data.sorted()\n    println(\"Sorted Data: $sortedData\")\n\n    val searchValue = 3\n    val searchIndex = data.indexOf(searchValue)\n    println(\"Index of $searchValue: $searchIndex\")\n\n    // 4. Data Analysis\n    val meanValue = data.average()\n    println(\"Mean Value: $meanValue\")\n\n    val sumValue = data.sum()\n    println(\"Sum Value: $sumValue\")\n\n    // 5. Multidimensional Arrays\n    val matrix = listOf(\n        listOf(1, 2, 3),\n        listOf(4, 5, 6),\n        listOf(7, 8, 9)\n    )\n    println(\"Original Matrix:\")\n    matrix.forEach { println(it) }\n\n    // Transpose the matrix\n    val transposedMatrix = List(matrix[0].size) { i -> List(matrix.size) { j -> matrix[j][i] } }\n    println(\"Transposed Matrix:\")\n    transposedMatrix.forEach { println(it) }\n\n    // Example of matrix multiplication (identity matrix)\n    val identityMatrix = listOf(\n        listOf(1, 0, 0),\n        listOf(0, 1, 0),\n        listOf(0, 0, 1)\n    )\n    val productMatrix = matrix.map { row ->\n        List(identityMatrix[0].size) { col ->\n            row.indices.sumOf { row[it] * identityMatrix[it][col] }\n        }\n    }\n    println(\"Matrix Product with Identity Matrix:\")\n    productMatrix.forEach { println(it) }\n\n    // Image Processing (simulated with a simple 2D array)\n    val image = List(5) { List(5) { kotlin.random.Random.nextDouble() } }\n    println(\"Original Image:\")\n    image.forEach { row -> println(row.joinToString(\" \") { \"%.2f\".format(it) }) }\n\n    // Simple operation on image\n    val brighterImage = image.map { row -> row.map { it * 1.2 } }\n    println(\"Brighter Image:\")\n    brighterImage.forEach { row -> println(row.joinToString(\" \") { \"%.2f\".format(it) }) }\n}\n\n"
          }
        },
        "dart": {
          "shortname": "dart",
          "displayname": "Dart",
          "ext": "dart",
          "css": "dart",
          "categories": "programming",
          "description": "",
          "snippets": {
            "regexps": "// Dart - regex_examples.dart\nvoid main() {\n  // Pattern Matching\n  String pattern = r'\\d+';  // Match one or more digits\n  String text = 'There are 123 apples';\n  RegExp regExp = RegExp(pattern);\n  print('Pattern Matching: ${regExp.hasMatch(text) ? \"Match found!\" : \"No match found.\"}');\n\n  // Search and Replace\n  text = 'Hello 123, meet 456';\n  String result = text.replaceAll(regExp, 'number');\n  print('Search and Replace: $result');  // \"Hello number, meet number\"\n\n  // String Splitting\n  text = 'apple, orange; banana, grape';\n  List<String> resultArray = text.split(RegExp(r'[ ,;]+'));\n  print('String Splitting: ${resultArray.join(\", \")}');  // [\"apple\", \"orange\", \"banana\", \"grape\"]\n\n  // Extracting Substrings\n  text = 'The date is 2024-06-27';\n  pattern = r'(\\d{4})-(\\d{2})-(\\d{2})';\n  regExp = RegExp(pattern);\n  RegExpMatch match = regExp.firstMatch(text)!;\n  print('Extracting Substrings: ${match.group(1)}, ${match.group(2)}, ${match.group(3)}');  // [\"2024\", \"06\", \"27\"]\n\n  // Validation\n  String email = 'example@test.com';\n  pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$';\n  regExp = RegExp(pattern);\n  print('Validation: ${regExp.hasMatch(email) ? \"Valid email address!\" : \"Invalid email address.\"}');\n\n  // Removing Unwanted Characters\n  text = 'Hello, World!';\n  result = text.replaceAll(RegExp(r'[^\\w\\s]'), '');  // Remove all non-alphanumeric characters\n  print('Removing Unwanted Characters: $result');  // \"Hello World\"\n\n  // Anchoring Searches\n  text = 'The quick brown fox';\n  pattern = r'\\bfox\\b';  // Match 'fox' as a whole word\n  regExp = RegExp(pattern);\n  print('Anchoring Searches: ${regExp.hasMatch(text) ? \"Found\" : \"Not Found\"}');\n\n  // Escaping Characters\n  String user_input = 'some[unsafe]input';\n  String escaped_input = RegExp.escape(user_input);\n  print('Escaping Characters: $escaped_input');  // \"some\\[unsafe\\]input\"\n\n  // Conditional Matching\n  text = 'foobar and foo';\n  pattern = r'foo(?=bar)';  // Match 'foo' only if followed by 'bar'\n  regExp = RegExp(pattern);\n  Iterable<RegExpMatch> matches = regExp.allMatches(text);\n  print('Conditional Matching: ${matches.map((m) => m.group(0)).join(\", \")}');  // \"foo\"\n}\n\n",
            "arrays": "import 'dart:math';\n\nvoid main() {\n  // 1. Storing Data\n  List<int> data = [1, 2, 3, 4, 5];\n  print(\"Original Data: $data\");\n\n  // 2. Mathematical Operations\n  List<int> squaredData = data.map((x) => x * x).toList();\n  print(\"Squared Data: $squaredData\");\n\n  // 3. Sorting and Searching\n  List<int> sortedData = List.from(data)..sort();\n  print(\"Sorted Data: $sortedData\");\n\n  int searchValue = 3;\n  int searchIndex = data.indexOf(searchValue);\n  print(\"Index of $searchValue: $searchIndex\");\n\n  // 4. Data Analysis\n  double meanValue = data.reduce((a, b) => a + b) / data.length;\n  print(\"Mean Value: $meanValue\");\n\n  int sumValue = data.reduce((a, b) => a + b);\n  print(\"Sum Value: $sumValue\");\n\n  // 5. Multidimensional Arrays\n  List<List<int>> matrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ];\n  print(\"Original Matrix:\");\n  matrix.forEach((row) => print(row));\n\n  // Transpose the matrix\n  List<List<int>> transposedMatrix = List.generate(\n      matrix[0].length, (i) => List.generate(matrix.length, (j) => matrix[j][i]));\n  print(\"Transposed Matrix:\");\n  transposedMatrix.forEach((row) => print(row));\n\n  // Example of matrix multiplication (identity matrix)\n  List<List<int>> identityMatrix = [\n    [1, 0, 0],\n    [0, 1, 0],\n    [0, 0, 1]\n  ];\n  List<List<int>> productMatrix = List.generate(matrix.length, (i) => List.generate(identityMatrix[0].length, (j) {\n    int sum = 0;\n    for (int k = 0; k < identityMatrix.length; k++) {\n      sum += matrix[i][k] * identityMatrix[k][j];\n    }\n    return sum;\n  }));\n  print(\"Matrix Product with Identity Matrix:\");\n  productMatrix.forEach((row) => print(row));\n\n  // Image Processing (simulated with a simple 2D array)\n  Random random = Random();\n  List<List<double>> image = List.generate(5, (i) => List.generate(5, (j) => random.nextDouble()));\n  print(\"Original Image:\");\n  image.forEach((row) => print(row.map((pixel) => pixel.toStringAsFixed(2)).toList()));\n\n  // Simple operation on image\n  List<List<double>> brighterImage = image.map((row) => row.map((pixel) => pixel * 1.2).toList()).toList();\n  print(\"Brighter Image:\");\n  brighterImage.forEach((row) => print(row.map((pixel) => pixel.toStringAsFixed(2)).toList()));\n}\n\n"
          }
        },
        "java": {
          "shortname": "java",
          "displayname": "Java",
          "ext": "java",
          "css": "java",
          "categories": "programming",
          "description": "",
          "snippets": {
            "regexps": "// Java - RegexExamples.java\nimport java.util.regex.*;\n\npublic class RegexExamples {\n    public static void main(String[] args) {\n        // Pattern Matching\n        Pattern pattern = Pattern.compile(\"\\\\d+\");  // Match one or more digits\n        String text = \"There are 123 apples\";\n        Matcher matcher = pattern.matcher(text);\n        System.out.println(\"Pattern Matching: \" + (matcher.find() ? \"Match found!\" : \"No match found.\"));\n\n        // Search and Replace\n        text = \"Hello 123, meet 456\";\n        String result = text.replaceAll(\"\\\\d+\", \"number\");\n        System.out.println(\"Search and Replace: \" + result);  // \"Hello number, meet number\"\n\n        // String Splitting\n        text = \"apple, orange; banana, grape\";\n        String[] resultArray = text.split(\"[,;]\");\n        System.out.println(\"String Splitting: \" + String.join(\", \", resultArray));  // [\"apple\", \" orange\", \" banana\", \" grape\"]\n\n        // Extracting Substrings\n        text = \"The date is 2024-06-27\";\n        pattern = Pattern.compile(\"(\\\\d{4})-(\\\\d{2})-(\\\\d{2})\");\n        matcher = pattern.matcher(text);\n        if (matcher.find()) {\n            System.out.println(\"Extracting Substrings: \" + matcher.group(1) + \", \" + matcher.group(2) + \", \" + matcher.group(3));  // [\"2024\", \"06\", \"27\"]\n        }\n\n        // Validation\n        String email = \"example@test.com\";\n        pattern = Pattern.compile(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n        matcher = pattern.matcher(email);\n        System.out.println(\"Validation: \" + (matcher.find() ? \"Valid email address!\" : \"Invalid email address.\"));\n\n        // Removing Unwanted Characters\n        text = \"Hello, World!\";\n        result = text.replaceAll(\"[^\\\\w\\\\s]\", \"\");  // Remove all non-alphanumeric characters\n        System.out.println(\"Removing Unwanted Characters: \" + result);  // \"Hello World\"\n\n        // Anchoring Searches\n        text = \"The quick brown fox\";\n        pattern = Pattern.compile(\"\\\\bfox\\\\b\");  // Match 'fox' as a whole word\n        matcher = pattern.matcher(text);\n        System.out.println(\"Anchoring Searches: \" + (matcher.find() ? \"Found\" : \"Not Found\"));\n\n        // Escaping Characters\n        String user_input = \"some[unsafe]input\";\n        String escaped_input = Pattern.quote(user_input);\n        System.out.println(\"Escaping Characters: \" + escaped_input);  // \"some\\[unsafe\\]input\"\n\n        // Conditional Matching\n        pattern = Pattern.compile(\"foo(?=bar)\");  // Match 'foo' only if followed by 'bar'\n        text = \"foobar and foo\";\n        matcher = pattern.matcher(text);\n        while (matcher.find()) {\n            System.out.println(\"Conditional Matching: \" + matcher.group());  // \"foo\"\n        }\n    }\n}\n\n",
            "arrays": "import java.util.Arrays;\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) {\n        // 1. Storing Data\n        int[] data = {1, 2, 3, 4, 5};\n        System.out.println(\"Original Data: \" + Arrays.toString(data));\n\n        // 2. Mathematical Operations\n        int[] squared_data = Arrays.stream(data).map(x -> x * x).toArray();\n        System.out.println(\"Squared Data: \" + Arrays.toString(squared_data));\n\n        // 3. Sorting and Searching\n        int[] sorted_data = Arrays.copyOf(data, data.length);\n        Arrays.sort(sorted_data);\n        System.out.println(\"Sorted Data: \" + Arrays.toString(sorted_data));\n\n        int search_value = 3;\n        int search_index = Arrays.binarySearch(data, search_value);\n        System.out.println(\"Index of \" + search_value + \": \" + search_index);\n\n        // 4. Data Analysis\n        double mean_value = Arrays.stream(data).average().orElse(0);\n        System.out.println(\"Mean Value: \" + mean_value);\n\n        int sum_value = Arrays.stream(data).sum();\n        System.out.println(\"Sum Value: \" + sum_value);\n\n        // 5. Multidimensional Arrays\n        int[][] matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n        System.out.println(\"Original Matrix: \" + Arrays.deepToString(matrix));\n\n        int[][] transposed_matrix = transpose(matrix);\n        System.out.println(\"Transposed Matrix: \" + Arrays.deepToString(transposed_matrix));\n\n        // Example of matrix multiplication (identity matrix)\n        int[][] identity_matrix = {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}};\n        int[][] product_matrix = multiply(matrix, identity_matrix);\n        System.out.println(\"Matrix Product with Identity Matrix: \" + Arrays.deepToString(product_matrix));\n\n        // Image Processing (simulated with a simple 2D array)\n        double[][] image = new double[5][5];\n        Random random = new Random();\n        for (int i = 0; i < 5; i++) {\n            for (int j = 0; j < 5; j++) {\n                image[i][j] = random.nextDouble();\n            }\n        }\n        System.out.println(\"Original Image: \" + Arrays.deepToString(image));\n\n        // Simple operation on image\n        double[][] brighter_image = new double[5][5];\n        for (int i = 0; i < 5; i++) {\n            for (int j = 0; j < 5; j++) {\n                brighter_image[i][j] = image[i][j] * 1.2;\n            }\n        }\n        System.out.println(\"Brighter Image: \" + Arrays.deepToString(brighter_image));\n    }\n\n    public static int[][] transpose(int[][] matrix) {\n        int[][] transposed = new int[matrix[0].length][matrix.length];\n        for (int i = 0; i < matrix.length; i++) {\n            for (int j = 0; j < matrix[i].length; j++) {\n                transposed[j][i] = matrix[i][j];\n            }\n        }\n        return transposed;\n    }\n\n    public static int[][] multiply(int[][] a, int[][] b) {\n        int[][] product = new int[a.length][b[0].length];\n        for (int i = 0; i < a.length; i++) {\n            for (int j = 0; j < b[0].length; j++) {\n                int sum = 0;\n                for (int k = 0; k < a[i].length; k++) {\n                    sum += a[i][k] * b[k][j];\n                }\n                product[i][j] = sum;\n            }\n        }\n        return product;\n    }\n}\n\n"
          }
        },
        "powershell": {
          "shortname": "powershell",
          "displayname": "Powershell (Windows)",
          "ext": "ps1",
          "css": "powershell",
          "categories": "programming",
          "description": "",
          "snippets": {
            "regexps": "# PowerShell - regex_examples.ps1\n\n# Pattern Matching\n$text = \"There are 123 apples\"\n$pattern = \"\\d+\"  # Match one or more digits\nif ($text -match $pattern) {\n    Write-Output \"Pattern Matching: Match found!\"\n} else {\n    Write-Output \"Pattern Matching: No match found.\"\n}\n\n# Search and Replace\n$text = \"Hello 123, meet 456\"\n$result = $text -replace $pattern, \"number\"\nWrite-Output \"Search and Replace: $result\"  # \"Hello number, meet number\"\n\n# String Splitting\n$text = \"apple, orange; banana, grape\"\n$result = $text -split \"[,;]\"\nWrite-Output \"String Splitting: $($result -join \", \")\"  # [\"apple\", \" orange\", \" banana\", \" grape\"]\n\n# Extracting Substrings\n$text = \"The date is 2024-06-27\"\nif ($text -match \"(\\d{4})-(\\d{2})-(\\d{2})\") {\n    Write-Output \"Extracting Substrings: $($matches[1]), $($matches[2]), $($matches[3])\"  # [\"2024\", \"06\", \"27\"]\n}\n\n# Validation\n$email = \"example@test.com\"\n$pattern = \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\"\nif ($email -match $pattern) {\n    Write-Output \"Validation: Valid email address!\"\n} else {\n    Write-Output \"Validation: Invalid email address.\"\n}\n\n# Removing Unwanted Characters\n$text = \"Hello, World!\"\n$cleaned_text = $text -replace \"[^\\w\\s]\", \"\"  # Remove all non-alphanumeric characters\nWrite-Output \"Removing Unwanted Characters: $cleaned_text\"  # \"Hello World\"\n\n# Anchoring Searches\n$text = \"The quick brown fox\"\n$pattern = \"\\bfox\\b\"  # Match 'fox' as a whole word\nif ($text -match $pattern) {\n    Write-Output \"Anchoring Searches: Found\"\n} else {\n    Write-Output \"Anchoring Searches: Not Found\"\n}\n\n# Escaping Characters\nfunction Escape-RegexPattern {\n    param ($input)\n    [Regex]::Escape($input)\n}\n$user_input = \"some[unsafe]input\"\n$escaped_input = Escape-RegexPattern $user_input\nWrite-Output \"Escaping Characters: $escaped_input\"  # \"some\\[unsafe\\]input\"\n\n# Conditional Matching\n$text = \"foobar and foo\"\n$pattern = \"foo(?=bar)\"  # Match 'foo' only if followed by 'bar'\n$matches = [regex]::Matches($text, $pattern)\nWrite-Output \"Conditional Matching: $($matches | ForEach-Object { $_.Value })\"  # \"foo\"\n\n",
            "arrays": "# 1. Storing Data\n$data = 1, 2, 3, 4, 5\nWrite-Host \"Original Data: $($data -join ', ')\"\n\n# 2. Mathematical Operations\n$squaredData = $data | ForEach-Object { $_ * $_ }\nWrite-Host \"Squared Data: $($squaredData -join ', ')\"\n\n# 3. Sorting and Searching\n$sortedData = $data | Sort-Object\nWrite-Host \"Sorted Data: $($sortedData -join ', ')\"\n\n$searchValue = 3\n$searchIndex = $data.IndexOf($searchValue)\nWrite-Host \"Index of $searchValue: $searchIndex\"\n\n# 4. Data Analysis\n$meanValue = ($data | Measure-Object -Average).Average\nWrite-Host \"Mean Value: $meanValue\"\n\n$sumValue = ($data | Measure-Object -Sum).Sum\nWrite-Host \"Sum Value: $sumValue\"\n\n# 5. Multidimensional Arrays\n$matrix = @(\n    @(1, 2, 3)\n    @(4, 5, 6)\n    @(7, 8, 9)\n)\nWrite-Host \"Original Matrix:\"\n$matrix | ForEach-Object { $_ -join ' ' }\n\n# Transpose the matrix\n$transposedMatrix = 0..2 | ForEach-Object {\n    0..2 | ForEach-Object {\n        $matrix[$_][$PSItem]\n    }\n}\nWrite-Host \"Transposed Matrix:\"\n$transposedMatrix | ForEach-Object { $_ -join ' ' }\n\n# Example of matrix multiplication (identity matrix)\n$identityMatrix = @(\n    @(1, 0, 0)\n    @(0, 1, 0)\n    @(0, 0, 1)\n)\n$productMatrix = 0..2 | ForEach-Object {\n    0..2 | ForEach-Object {\n        $sum = 0\n        0..2 | ForEach-Object {\n            $sum += $matrix[$_]$PSItem * $identityMatrix[$_][$PSItem]\n        }\n        $sum\n    }\n}\nWrite-Host \"Matrix Product with Identity Matrix:\"\n$productMatrix | ForEach-Object { $_ -join ' ' }\n\n# Image Processing (simulated with a simple 2D array)\n$image = 0..4 | ForEach-Object {\n    0..4 | ForEach-Object {\n        Get-Random -Minimum 0 -Maximum 1\n    }\n}\nWrite-Host \"Original Image:\"\n$image | ForEach-Object { $_ -join ' ' }\n\n# Simple operation on image\n$brighterImage = $image | ForEach-Object {\n    $_ | ForEach-Object { $_ * 1.2 }\n}\nWrite-Host \"Brighter Image:\"\n$brighterImage | ForEach-Object { $_ -join ' ' }\n\n"
          }
        },
        "ruby": {
          "shortname": "ruby",
          "displayname": "Ruby",
          "ext": "rb",
          "css": "ruby",
          "categories": "programming",
          "description": "",
          "snippets": {
            "regexps": "# Ruby - regex_examples.rb\n\n# Pattern Matching\npattern = /\\d+/  # Match one or more digits\ntext = \"There are 123 apples\"\nputs \"Pattern Matching: #{pattern.match(text) ? \"Match found!\" : \"No match found.\"}\"\n\n# Search and Replace\ntext = \"Hello 123, meet 456\"\nresult = text.gsub(/\\d+/, 'number')\nputs \"Search and Replace: #{result}\"  # \"Hello number, meet number\"\n\n# String Splitting\ntext = \"apple, orange; banana, grape\"\nresult = text.split(/[,;]/)\nputs \"String Splitting: #{result.inspect}\"  # [\"apple\", \" orange\", \" banana\", \" grape\"]\n\n# Extracting Substrings\ntext = \"The date is 2024-06-27\"\npattern = /(\\d{4})-(\\d{2})-(\\d{2})/\nmatch = pattern.match(text)\nputs \"Extracting Substrings: #{match ? match.captures : \"No match found\"}\"  # [\"2024\", \"06\", \"27\"]\n\n# Validation\nemail = \"example@test.com\"\npattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/\nputs \"Validation: #{pattern.match(email) ? \"Valid email address!\" : \"Invalid email address.\"}\"\n\n# Parsing Structured Text\nlog_entry = \"127.0.0.1 - - [27/Jun/2024:10:00:00 +0000] \\\"GET /index.html HTTP/1.1\\\" 200 1234\"\npattern = /(?<ip>\\d+\\.\\d+\\.\\d+\\.\\d+) - - \\[(?<date>[^\\]]+)\\] \"(?<request>[^\"]+)\" (?<status>\\d+) (?<size>\\d+)/\nmatch = pattern.match(log_entry)\nputs \"Parsing Structured Text: #{match ? match.named_captures : \"No match found\"}\"\n\n# Removing Unwanted Characters\ntext = \"Hello, World!\"\ncleaned_text = text.gsub(/[^\\w\\s]/, '')  # Remove all non-alphanumeric characters\nputs \"Removing Unwanted Characters: #{cleaned_text}\"  # \"Hello World\"\n\n# Anchoring Searches\ntext = \"The quick brown fox\"\npattern = /\\bfox\\b/  # Match 'fox' as a whole word\nputs \"Anchoring Searches: #{pattern.match(text) ? \"Found\" : \"Not Found\"}\"\n\n# Escaping Characters\nuser_input = \"some[unsafe]input\"\nescaped_input = Regexp.escape(user_input)\npattern = /#{escaped_input}/\nputs \"Escaping Characters: #{pattern}\"  # \"some\\[unsafe\\]input\"\n\n# Conditional Matching\npattern = /foo(?=bar)/  # Match 'foo' only if followed by 'bar'\ntext = \"foobar and foo\"\nmatches = text.scan(pattern)\nputs \"Conditional Matching: #{matches.inspect}\"  # [\"foo\"]\n\n",
            "arrays": "# 1. Storing Data\ndata = [1, 2, 3, 4, 5]\nputs \"Original Data: #{data}\"\n\n# 2. Mathematical Operations\nsquared_data = data.map { |x| x ** 2 }\nputs \"Squared Data: #{squared_data}\"\n\n# 3. Sorting and Searching\nsorted_data = data.sort\nputs \"Sorted Data: #{sorted_data}\"\n\nsearch_value = 3\nsearch_index = data.index(search_value)\nputs \"Index of #{search_value}: #{search_index}\"\n\n# 4. Data Analysis\nmean_value = data.sum / data.length.to_f\nputs \"Mean Value: #{mean_value}\"\n\nsum_value = data.sum\nputs \"Sum Value: #{sum_value}\"\n\n# 5. Multidimensional Arrays\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nputs \"Original Matrix: #{matrix.inspect}\"\n\ntransposed_matrix = matrix.transpose\nputs \"Transposed Matrix: #{transposed_matrix.inspect}\"\n\n# Example of matrix multiplication (identity matrix)\nidentity_matrix = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\nproduct_matrix = matrix.map { |row| row.each_with_index.map { |val, i| val * identity_matrix[i][i] } }\nputs \"Matrix Product with Identity Matrix: #{product_matrix.inspect}\"\n\n# Image Processing (simulated with a simple 2D array)\nimage = Array.new(5) { Array.new(5) { rand } }\nputs \"Original Image: #{image.inspect}\"\n\n# Simple operation on image\nbrighter_image = image.map { |row| row.map { |pixel| pixel * 1.2 } }\nputs \"Brighter Image: #{brighter_image.inspect}\"\n\n"
          }
        },
        "js": {
          "shortname": "js",
          "displayname": "JavaScript",
          "ext": "js",
          "css": "javascript",
          "categories": "programming",
          "description": "",
          "snippets": {
            "regexps": "// JavaScript - regex_examples.js\n\n// Pattern Matching\nlet pattern = /\\d+/;  // Match one or more digits\nlet text = \"There are 123 apples\";\nconsole.log(\"Pattern Matching:\", pattern.test(text) ? \"Match found!\" : \"No match found.\");\n\n// Search and Replace\ntext = \"Hello 123, meet 456\";\nlet result = text.replace(/\\d+/g, 'number');\nconsole.log(\"Search and Replace:\", result);  // \"Hello number, meet number\"\n\n// String Splitting\ntext = \"apple, orange; banana, grape\";\nresult = text.split(/[,;]/);\nconsole.log(\"String Splitting:\", result);  // [\"apple\", \" orange\", \" banana\", \" grape\"]\n\n// Extracting Substrings\ntext = \"The date is 2024-06-27\";\npattern = /(\\d{4})-(\\d{2})-(\\d{2})/;\nlet match = text.match(pattern);\nconsole.log(\"Extracting Substrings:\", match ? match.slice(1) : \"No match found\");  // [\"2024\", \"06\", \"27\"]\n\n// Validation\nlet email = \"example@test.com\";\npattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\nconsole.log(\"Validation:\", pattern.test(email) ? \"Valid email address!\" : \"Invalid email address.\");\n\n// Removing Unwanted Characters\ntext = \"Hello, World!\";\nlet cleanedText = text.replace(/[^\\w\\s]/g, '');  // Remove all non-alphanumeric characters\nconsole.log(\"Removing Unwanted Characters:\", cleanedText);  // \"Hello World\"\n\n// Anchoring Searches\ntext = \"The quick brown fox\";\npattern = /\\bfox\\b/;  // Match 'fox' as a whole word\nconsole.log(\"Anchoring Searches:\", pattern.test(text) ? \"Found\" : \"Not Found\");\n\n// Escaping Characters\nuser_input = \"some[unsafe]input\";\nlet escaped_input = user_input.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\npattern = new RegExp(escaped_input);\nconsole.log(\"Escaping Characters:\", pattern);  // /some\\[unsafe\\]input/\n\n// Conditional Matching\npattern = /foo(?=bar)/;  // Match 'foo' only if followed by 'bar'\ntext = \"foobar and foo\";\nmatches = text.match(pattern);\nconsole.log(\"Conditional Matching:\", matches);  // [\"foo\"]\n\n",
            "arrays": "fn main() {\n    // 1. Storing Data\n    let data = vec![1, 2, 3, 4, 5];\n    println!(\"Original Data: {:?}\", data);\n\n    // 2. Mathematical Operations\n    let squared_data: Vec<i32> = data.iter().map(|&x| x * x).collect();\n    println!(\"Squared Data: {:?}\", squared_data);\n\n    // 3. Sorting and Searching\n    let mut sorted_data = data.clone();\n    sorted_data.sort();\n    println!(\"Sorted Data: {:?}\", sorted_data);\n\n    let search_value = 3;\n    if let Some(search_index) = data.iter().position(|&x| x == search_value) {\n        println!(\"Index of {}: {}\", search_value, search_index);\n    }\n\n    // 4. Data Analysis\n    let sum_value: i32 = data.iter().sum();\n    let mean_value = sum_value as f64 / data.len() as f64;\n    println!(\"Mean Value: {}\", mean_value);\n    println!(\"Sum Value: {}\", sum_value);\n\n    // 5. Multidimensional Arrays\n    let matrix: Vec<Vec<i32>> = vec![vec![1, 2, 3], vec![4, 5, 6], vec![7, 8, 9]];\n    println!(\"Original Matrix: {:?}\", matrix);\n\n    let transposed_matrix: Vec<Vec<i32>> = (0..matrix[0].len())\n        .map(|i| matrix.iter().map(|row| row[i]).collect())\n        .collect();\n    println!(\"Transposed Matrix: {:?}\", transposed_matrix);\n\n    // Example of matrix multiplication (identity matrix)\n    let identity_matrix: Vec<Vec<i32>> = vec![vec![1, 0, 0], vec![0, 1, 0], vec![0, 0, 1]];\n    let product_matrix: Vec<Vec<i32>> = matrix\n        .iter()\n        .map(|row| {\n            row.iter()\n                .enumerate()\n                .map(|(i, &val)| val * identity_matrix[i][i])\n                .collect()\n        })\n        .collect();\n    println!(\"Matrix Product with Identity Matrix: {:?}\", product_matrix);\n\n    // Image Processing (simulated with a simple 2D array)\n    let image: Vec<Vec<f64>> = (0..5).map(|_| (0..5).map(|_| rand::random()).collect()).collect();\n    println!(\"Original Image: {:?}\", image);\n\n    // Simple operation on image\n    let brighter_image: Vec<Vec<f64>> = image\n        .iter()\n        .map(|row| row.iter().map(|&pixel| pixel * 1.2).collect())\n        .collect();\n    println!(\"Brighter Image: {:?}\", brighter_image);\n}\n\n"
          }
        },
        "httpjs": {
          "shortname": "httpjs",
          "displayname": "HTTP JavaScript",
          "ext": "js",
          "inherits": "js",
          "css": "javascript",
          "categories": "programming",
          "description": "This category inherits from JavaScript, but occasionally has an HTTP-ism that\nmake it different from usual JS usage.",
          "snippets": {}
        },
        "php": {
          "shortname": "php",
          "displayname": "PHP",
          "ext": "php",
          "css": "php",
          "categories": "programming",
          "description": "",
          "snippets": {}
        },
        "cpp": {
          "shortname": "cpp",
          "displayname": "C++ (C Plus Plus, C++)",
          "ext": "cpp",
          "css": "cpp",
          "categories": "programming",
          "description": "",
          "snippets": {
            "regexps": "// C++ - regex_examples.cpp\n#include <iostream>\n#include <regex>\n#include <string>\n\nint main() {\n    // Pattern Matching\n    std::regex pattern(\"\\\\d+\");  // Match one or more digits\n    std::string text = \"There are 123 apples\";\n    std::smatch match;\n    std::cout << \"Pattern Matching: \" << (std::regex_search(text, match, pattern) ? \"Match found!\" : \"No match found.\") << std::endl;\n\n    // Search and Replace\n    text = \"Hello 123, meet 456\";\n    std::string result = std::regex_replace(text, pattern, \"number\");\n    std::cout << \"Search and Replace: \" << result << std::endl;  // \"Hello number, meet number\"\n\n    // String Splitting\n    text = \"apple, orange; banana, grape\";\n    std::regex re(\"[,;]\");\n    std::sregex_token_iterator it(text.begin(), text.end(), re, -1);\n    std::sregex_token_iterator end;\n    std::cout << \"String Splitting: \";\n    while (it != end) {\n        std::cout << *it++ << \", \";\n    }\n    std::cout << std::endl;  // [\"apple\", \" orange\", \" banana\", \" grape\"]\n\n    // Extracting Substrings\n    text = \"The date is 2024-06-27\";\n    pattern = std::regex(\"(\\\\d{4})-(\\\\d{2})-(\\\\d{2})\");\n    if (std::regex_search(text, match, pattern)) {\n        std::cout << \"Extracting Substrings: \" << match[1] << \", \" << match[2] << \", \" << match[3] << std::endl;  // [\"2024\", \"06\", \"27\"]\n    }\n\n    // Validation\n    std::string email = \"example@test.com\";\n    pattern = std::regex(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\n    std::cout << \"Validation: \" << (std::regex_match(email, pattern) ? \"Valid email address!\" : \"Invalid email address.\") << std::endl;\n\n    // Removing Unwanted Characters\n    text = \"Hello, World!\";\n    result = std::regex_replace(text, std::regex(\"[^\\\\w\\\\s]\"), \"\");  // Remove all non-alphanumeric characters\n    std::cout << \"Removing Unwanted Characters: \" << result << std::endl;  // \"Hello World\"\n\n    // Anchoring Searches\n    text = \"The quick brown fox\";\n    pattern = std::regex(\"\\\\bfox\\\\b\");  // Match 'fox' as a whole word\n    std::cout << \"Anchoring Searches: \" << (std::regex_search(text, match, pattern) ? \"Found\" : \"Not Found\") << std::endl;\n\n    // Escaping Characters\n    std::string user_input = \"some[unsafe]input\";\n    std::string escaped_input = std::regex_replace(user_input, std::regex(\"[.*+?^${}()|\\\\[\\\\]\\\\\\\\]\"), \"\\\\$&\");\n    std::cout << \"Escaping Characters: \" << escaped_input << std::endl;  // \"some\\[unsafe\\]input\"\n\n\u001b[O    // Conditional Matching\n    pattern = std::regex(\"foo(?=bar)\");  // Match 'foo' only if followed by 'bar'\n    text = \"foobar and foo\";\n    auto words_begin = std::sregex_iterator(text.begin(), text.end(), pattern);\n    auto words_end = std::sregex_iterator();\n    std::cout << \"Conditional Matching: \";\n    for (std::sregex_iterator i = words_begin; i != words_end; ++i) {\n        std::smatch match = *i;\n        std::cout << match.str() << \", \";  // \"foo\"\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n\n",
            "arrays": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <numeric>\n#include <cmath>\n#include <cstdlib>\n\nvoid printVector(const std::vector<int>& vec) {\n    for (const int& val : vec) {\n        std::cout << val << \" \";\n    }\n    std::cout << std::endl;\n}\n\nvoid printMatrix(const std::vector<std::vector<int>>& mat) {\n    for (const auto& row : mat) {\n        for (const int& val : row) {\n            std::cout << val << \" \";\n        }\n        std::cout << std::endl;\n    }\n}\n\nvoid printMatrix(const std::vector<std::vector<double>>& mat) {\n    for (const auto& row : mat) {\n        for (const double& val : row) {\n            std::cout << val << \" \";\n        }\n        std::cout << std::endl;\n    }\n}\n\nint main() {\n    // 1. Storing Data\n    std::vector<int> data = {1, 2, 3, 4, 5};\n    std::cout << \"Original Data: \";\n    printVector(data);\n\n    // 2. Mathematical Operations\n    std::vector<int> squared_data;\n    std::transform(data.begin(), data.end(), std::back_inserter(squared_data), [](int x) { return x * x; });\n    std::cout << \"Squared Data: \";\n    printVector(squared_data);\n\n    // 3. Sorting and Searching\n    std::vector<int> sorted_data = data;\n    std::sort(sorted_data.begin(), sorted_data.end());\n    std::cout << \"Sorted Data: \";\n    printVector(sorted_data);\n\n    int search_value = 3;\n    auto it = std::find(data.begin(), data.end(), search_value);\n    if (it != data.end()) {\n        std::cout << \"Index of \" << search_value << \": \" << std::distance(data.begin(), it) << std::endl;\n    }\n\n    // 4. Data Analysis\n    double mean_value = std::accumulate(data.begin(), data.end(), 0.0) / data.size();\n    std::cout << \"Mean Value: \" << mean_value << std::endl;\n\n    int sum_value = std::accumulate(data.begin(), data.end(), 0);\n    std::cout << \"Sum Value: \" << sum_value << std::endl;\n\n    // 5. Multidimensional Arrays\n    std::vector<std::vector<int>> matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n    std::cout << \"Original Matrix:\" << std::endl;\n    printMatrix(matrix);\n\n    std::vector<std::vector<int>> transposed_matrix(3, std::vector<int>(3));\n    for (size_t i = 0; i < matrix.size(); ++i) {\n        for (size_t j = 0; j < matrix[0].size(); ++j) {\n            transposed_matrix[j][i] = matrix[i][j];\n        }\n    }\n    std::cout << \"Transposed Matrix:\" << std::endl;\n    printMatrix(transposed_matrix);\n\n    // Example of matrix multiplication (identity matrix)\n    std::vector<std::vector<int>> identity_matrix = {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}};\n    std::vector<std::vector<int>> product_matrix(3, std::vector<int>(3, 0));\n    for (size_t i = 0; i < matrix.size(); ++i) {\n        for (size_t j = 0; j < identity_matrix[0].size(); ++j) {\n            for (size_t k = 0; k < identity_matrix.size(); ++k) {\n                product_matrix[i][j] += matrix[i][k] * identity_matrix[k][j];\n            }\n        }\n    }\n    std::cout << \"Matrix Product with Identity Matrix:\" << std::endl;\n    printMatrix(product_matrix);\n\n    // Image Processing (simulated with a simple 2D array)\n    std::vector<std::vector<double>> image(5, std::vector<double>(5));\n    for (auto& row : image) {\n        for (auto& pixel : row) {\n            pixel = static_cast<double>(rand()) / RAND_MAX;\n        }\n    }\n    std::cout << \"Original Image:\" << std::endl;\n    printMatrix(image);\n\n    // Simple operation on image\n    std::vector<std::vector<double>> brighter_image = image;\n    for (auto& row : brighter_image) {\n        for (auto& pixel : row) {\n            pixel *= 1.2;\n        }\n    }\n    std::cout << \"Brighter Image:\" << std::endl;\n    printMatrix(brighter_image);\n\n    return 0;\n}\n\n"
          }
        },
        "go": {
          "shortname": "go",
          "displayname": "Go (GoLang)",
          "ext": "go",
          "css": "golang",
          "categories": "programming",
          "description": "",
          "snippets": {
            "regexps": "// Go - regex_examples.go\npackage main\n\nimport (\n    \"fmt\"\n    \"regexp\"\n)\n\nfunc main() {\n    // Pattern Matching\n    pattern := `\\d+`  // Match one or more digits\n    text := \"There are 123 apples\"\n    matched, _ := regexp.MatchString(pattern, text)\n    fmt.Println(\"Pattern Matching:\", matched)\n\n    // Search and Replace\n    re := regexp.MustCompile(pattern)\n    text = \"Hello 123, meet 456\"\n    result := re.ReplaceAllString(text, \"number\")\n    fmt.Println(\"Search and Replace:\", result)  // \"Hello number, meet number\"\n\n    // String Splitting\n    text = \"apple, orange; banana, grape\"\n    re = regexp.MustCompile(`[ ,;]+`)\n    resultSlice := re.Split(text, -1)\n    fmt.Println(\"String Splitting:\", resultSlice)  // [\"apple\", \"orange\", \"banana\", \"grape\"]\n\n    // Extracting Substrings\n    log_entry := \"The date is 2024-06-27\"\n    re = regexp.MustCompile(`(\\d{4})-(\\d{2})-(\\d{2})`)\n    match := re.FindStringSubmatch(log_entry)\n    fmt.Println(\"Extracting Substrings:\", match)  // [\"2024-06-27\", \"2024\", \"06\", \"27\"]\n\n    // Validation\n    email := \"example@test.com\"\n    pattern = `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$`\n    matched, _ = regexp.MatchString(pattern, email)\n    fmt.Println(\"Validation:\", matched)\n\n    // Removing Unwanted Characters\n    text = \"Hello, World!\"\n    re = regexp.MustCompile(`[^\\w\\s]`)  // Remove all non-alphanumeric characters\n    cleaned_text := re.ReplaceAllString(text, \"\")\n    fmt.Println(\"Removing Unwanted Characters:\", cleaned_text)  // \"Hello World\"\n\n    // Anchoring Searches\n    text = \"The quick brown fox\"\n    re = regexp.MustCompile(`\\bfox\\b`)  // Match 'fox' as a whole word\n    fmt.Println(\"Anchoring Searches:\", re.MatchString(text))\n\n    // Escaping Characters\n    user_input := \"some[unsafe]input\"\n    escaped_input := regexp.QuoteMeta(user_input)\n    fmt.Println(\"Escaping Characters:\", escaped_input)  // \"some\\[unsafe\\]input\"\n\n    // Conditional Matching\n    re = regexp.MustCompile(`foo(?=bar)`)  // Match 'foo' only if followed by 'bar'\n    text = \"foobar and foo\"\n    matches := re.FindAllString(text, -1)\n    fmt.Println(\"Conditional Matching:\", matches)  // [\"foo\"]\n}\n\n",
            "arrays": "fn main() {\n    // 1. Storing Data\n    let data = vec![1, 2, 3, 4, 5];\n    println!(\"Original Data: {:?}\", data);\n\n    // 2. Mathematical Operations\n    let squared_data: Vec<i32> = data.iter().map(|&x| x * x).collect();\n    println!(\"Squared Data: {:?}\", squared_data);\n\n    // 3. Sorting and Searching\n    let mut sorted_data = data.clone();\n    sorted_data.sort();\n    println!(\"Sorted Data: {:?}\", sorted_data);\n\n    let search_value = 3;\n    if let Some(search_index) = data.iter().position(|&x| x == search_value) {\n        println!(\"Index of {}: {}\", search_value, search_index);\n    }\n\n    // 4. Data Analysis\n    let sum_value: i32 = data.iter().sum();\n    let mean_value = sum_value as f64 / data.len() as f64;\n    println!(\"Mean Value: {}\", mean_value);\n    println!(\"Sum Value: {}\", sum_value);\n\n    // 5. Multidimensional Arrays\n    let matrix: Vec<Vec<i32>> = vec![vec![1, 2, 3], vec![4, 5, 6], vec![7, 8, 9]];\n    println!(\"Original Matrix: {:?}\", matrix);\n\n    let transposed_matrix: Vec<Vec<i32>> = (0..matrix[0].len())\n        .map(|i| matrix.iter().map(|row| row[i]).collect())\n        .collect();\n    println!(\"Transposed Matrix: {:?}\", transposed_matrix);\n\n    // Example of matrix multiplication (identity matrix)\n    let identity_matrix: Vec<Vec<i32>> = vec![vec![1, 0, 0], vec![0, 1, 0], vec![0, 0, 1]];\n    let product_matrix: Vec<Vec<i32>> = matrix\n        .iter()\n        .map(|row| {\n            row.iter()\n                .enumerate()\n                .map(|(i, &val)| val * identity_matrix[i][i])\n                .collect()\n        })\n        .collect();\n    println!(\"Matrix Product with Identity Matrix: {:?}\", product_matrix);\n\n    // Image Processing (simulated with a simple 2D array)\n    let image: Vec<Vec<f64>> = (0..5).map(|_| (0..5).map(|_| rand::random()).collect()).collect();\n    println!(\"Original Image: {:?}\", image);\n\n    // Simple operation on image\n    let brighter_image: Vec<Vec<f64>> = image\n        .iter()\n        .map(|row| row.iter().map(|&pixel| pixel * 1.2).collect())\n        .collect();\n    println!(\"Brighter Image: {:?}\", brighter_image);\n}\n\n"
          }
        },
        "lua": {
          "shortname": "lua",
          "displayname": "Lua",
          "ext": "lua",
          "css": "lua",
          "comment": "--",
          "categories": "programming",
          "description": "",
          "snippets": {
            "regexps": "-- Lua - regex_examples.lua\n-- Lua does not have built-in regex support, but uses pattern matching instead\n\n-- Pattern Matching\nlocal text = \"There are 123 apples\"\nlocal match = string.match(text, \"%d+\")\nprint(\"Pattern Matching: \" .. (match and \"Match found!\" or \"No match found.\"))\n\n-- Search and Replace\ntext = \"Hello 123, meet 456\"\nlocal result = string.gsub(text, \"%d+\", \"number\")\nprint(\"Search and Replace: \" .. result)  -- \"Hello number, meet number\"\n\n-- String Splitting\ntext = \"apple, orange; banana, grape\"\nlocal result = {}\nfor token in string.gmatch(text, \"([^,;]+)\") do\n  table.insert(result, token)\nend\nprint(\"String Splitting: \" .. table.concat(result, \", \"))  -- [\"apple\", \" orange\", \" banana\", \" grape\"]\n\n-- Extracting Substrings\ntext = \"The date is 2024-06-27\"\nlocal year, month, day = string.match(text, \"(%d%d%d%d)%-(%d%d)%-(%d%d)\")\nprint(\"Extracting Substrings: \" .. year .. \", \" .. month .. \", \" .. day)  -- [\"2024\", \"06\", \"27\"]\n\n-- Validation\nlocal email = \"example@test.com\"\nlocal pattern = \"^[a-zA-Z0-9._%%+-]+@[a-zA-Z0-9.-]+%.[a-zA-Z]{2,}$\"\nprint(\"Validation: \" .. (string.match(email, pattern) and \"Valid email address!\" or \"Invalid email address.\"))\n\n-- Removing Unwanted Characters\ntext = \"Hello, World!\"\nlocal cleaned_text = string.gsub(text, \"[^%w%s]\", \"\")  -- Remove all non-alphanumeric characters\nprint(\"Removing Unwanted Characters: \" .. cleaned_text)  -- \"Hello World\"\n\n-- Anchoring Searches\ntext = \"The quick brown fox\"\npattern = \"%f[%w]fox%f[%W]\"  -- Match 'fox' as a whole word\nprint(\"Anchoring Searches: \" .. (string.match(text, pattern) and \"Found\" or \"Not Found\"))\n\n-- Escaping Characters\nlocal function escape_pattern(text)\n  return string.gsub(text, \"([^%w])\", \"%%%1\")\nend\nlocal user_input = \"some[unsafe]input\"\nlocal escaped_input = escape_pattern(user_input)\nprint(\"Escaping Characters: \" .. escaped_input)  -- \"some%[unsafe%]input\"\n\n-- Conditional Matching\ntext = \"foobar and foo\"\npattern = \"foo(?=bar)\"  -- Match 'foo' only if followed by 'bar'\nlocal found = string.match(text, \"foo()bar\") and string.sub(text, string.match(text, \"foo()bar\") - 3, string.match(text, \"foo()bar\") - 1) or \"\"\nprint(\"Conditional Matching: \" .. found)  -- \"foo\"\n\n",
            "arrays": "-- 1. Storing Data\ndata = {1, 2, 3, 4, 5}\nprint(\"Original Data:\")\nfor i = 1, #data do\n    io.write(data[i], \" \")\nend\nprint()\n\n-- 2. Mathematical Operations\nsquared_data = {}\nfor i = 1, #data do\n    squared_data[i] = data[i] * data[i]\nend\nprint(\"Squared Data:\")\nfor i = 1, #squared_data do\n    io.write(squared_data[i], \" \")\nend\nprint()\n\n-- 3. Sorting and Searching\ntable.sort(data)\nprint(\"Sorted Data:\")\nfor i = 1, #data do\n    io.write(data[i], \" \")\nend\nprint()\n\nsearch_value = 3\nsearch_index = -1\nfor i = 1, #data do\n    if data[i] == search_value then\n        search_index = i\n        break\n    end\nend\nprint(\"Index of \" .. search_value .. \": \" .. search_index)\n\n-- 4. Data Analysis\nsum_value = 0\nfor i = 1, #data do\n    sum_value = sum_value + data[i]\nend\nmean_value = sum_value / #data\nprint(\"Mean Value: \" .. mean_value)\nprint(\"Sum Value: \" .. sum_value)\n\n-- 5. Multidimensional Arrays\nmatrix = {\n    {1, 2, 3},\n    {4, 5, 6},\n    {7, 8, 9}\n}\nprint(\"Original Matrix:\")\nfor i = 1, #matrix do\n    for j = 1, #matrix[i] do\n        io.write(matrix[i][j], \" \")\n    end\n    print()\nend\n\n-- Transpose the matrix\ntransposed_matrix = {}\nfor i = 1, #matrix[1] do\n    transposed_matrix[i] = {}\n    for j = 1, #matrix do\n        transposed_matrix[i][j] = matrix[j][i]\n    end\nend\nprint(\"Transposed Matrix:\")\nfor i = 1, #transposed_matrix do\n    for j = 1, #transposed_matrix[i] do\n        io.write(transposed_matrix[i][j], \" \")\n    end\n    print()\nend\n\n-- Example of matrix multiplication (identity matrix)\nidentity_matrix = {\n    {1, 0, 0},\n    {0, 1, 0},\n    {0, 0, 1}\n}\nproduct_matrix = {}\nfor i = 1, #matrix do\n    product_matrix[i] = {}\n    for j = 1, #identity_matrix[1] do\n        sum = 0\n        for k = 1, #identity_matrix do\n            sum = sum + matrix[i][k] * identity_matrix[k][j]\n        end\n        product_matrix[i][j] = sum\n    end\nend\nprint(\"Matrix Product with Identity Matrix:\")\nfor i = 1, #product_matrix do\n    for j = 1, #product_matrix[i] do\n        io.write(product_matrix[i][j], \" \")\n    end\n    print()\nend\n\n-- Image Processing (simulated with a simple 2D array)\nmath.randomseed(os.time())\nimage = {}\nfor i = 1, 5 do\n    image[i] = {}\n    for j = 1, 5 do\n        image[i][j] = math.random()\n    end\nend\nprint(\"Original Image:\")\nfor i = 1, #image do\n    for j = 1, #image[i] do\n        io.write(string.format(\"%.2f\", image[i][j]), \" \")\n    end\n    print()\nend\n\n-- Simple operation on image\nbrighter_image = {}\nfor i = 1, #image do\n    brighter_image[i] = {}\n    for j = 1, #image[i] do\n        brighter_image[i][j] = image[i][j] * 1.2\n    end\nend\nprint(\"Brighter Image:\")\nfor i = 1, #brighter_image do\n    for j = 1, #brighter_image[i] do\n        io.write(string.format(\"%.2f\", brighter_image[i][j]), \" \")\n    end\n    print()\nend\n\n"
          }
        },
        "typescript": {
          "shortname": "typescript",
          "displayname": "Typescript",
          "ext": "ts",
          "css": "typescript",
          "categories": "programming",
          "description": "",
          "snippets": {}
        },
        "node": {
          "shortname": "node",
          "displayname": "Node.js JavaScript",
          "ext": "js",
          "css": "javascript",
          "inherits": "js",
          "categories": "programming",
          "description": "This category inherits JavaScript, but will show Node.js-isms where it may\ndiffer.\n\nNode.js is a cross-platform, open-source JavaScript runtime environment that\ncan run on Windows, Linux, Unix, macOS, and more. Node.js runs on the V8\nJavaScript engine, and executes JavaScript code outside a web browser.",
          "snippets": {}
        },
        "csharp": {
          "shortname": "csharp",
          "displayname": "C# (C-Sharp)",
          "ext": "cs",
          "css": "csharp",
          "categories": "programming",
          "description": "",
          "snippets": {
            "regexps": "// C# - RegexExamples.cs\nusing System;\nusing System.Text.RegularExpressions;\n\nclass RegexExamples\n{\n    static void Main()\n    {\n        // Pattern Matching\n        string text = \"There are 123 apples\";\n        string pattern = @\"\\d+\";  // Match one or more digits\n        bool isMatch = Regex.IsMatch(text, pattern);\n        Console.WriteLine(\"Pattern Matching: \" + (isMatch ? \"Match found!\" : \"No match found.\"));\n\n        // Search and Replace\n        text = \"Hello 123, meet 456\";\n        string result = Regex.Replace(text, pattern, \"number\");\n        Console.WriteLine(\"Search and Replace: \" + result);  // \"Hello number, meet number\"\n\n        // String Splitting\n        text = \"apple, orange; banana, grape\";\n        string[] resultArray = Regex.Split(text, \"[,;]\");\n        Console.WriteLine(\"String Splitting: \" + string.Join(\", \", resultArray));  // [\"apple\", \" orange\", \" banana\", \" grape\"]\n\n        // Extracting Substrings\n        text = \"The date is 2024-06-27\";\n        pattern = @\"(\\d{4})-(\\d{2})-(\\d{2})\";\n        Match match = Regex.Match(text, pattern);\n        if (match.Success)\n        {\n            Console.WriteLine(\"Extracting Substrings: \" + match.Groups[1] + \", \" + match.Groups[2] + \", \" + match.Groups[3]);  // [\"2024\", \"06\", \"27\"]\n        }\n\n        // Validation\n        string email = \"example@test.com\";\n        pattern = @\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\";\n        isMatch = Regex.IsMatch(email, pattern);\n        Console.WriteLine(\"Validation: \" + (isMatch ? \"Valid email address!\" : \"Invalid email address.\"));\n\n        // Removing Unwanted Characters\n        text = \"Hello, World!\";\n        result = Regex.Replace(text, \"[^\\\\w\\\\s]\", \"\");  // Remove all non-alphanumeric characters\n        Console.WriteLine(\"Removing Unwanted Characters: \" + result);  // \"Hello World\"\n\n        // Anchoring Searches\n        text = \"The quick brown fox\";\n        pattern = @\"\\bfox\\b\";  // Match 'fox' as a whole word\n        isMatch = Regex.IsMatch(text, pattern);\n        Console.WriteLine(\"Anchoring Searches: \" + (isMatch ? \"Found\" : \"Not Found\"));\n\n\u001b[O        // Escaping Characters\n        string user_input = \"some[unsafe]input\";\n        string escaped_input = Regex.Escape(user_input);\n        Console.WriteLine(\"Escaping Characters: \" + escaped_input);  // \"some\\[unsafe\\]input\"\n\n        // Conditional Matching\n        pattern = @\"foo(?=bar)\";  // Match 'foo' only if followed by 'bar'\n        text = \"foobar and foo\";\n        MatchCollection matches = Regex.Matches(text, pattern);\n        Console.Write(\"Conditional Matching: \");\n        foreach (Match m in matches)\n        {\n            Console.Write(m.Value + \" \");  // \"foo\"\n        }\n        Console.WriteLine();\n    }\n}\n\n",
            "arrays": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program\n{\n    static void Main()\n    {\n        // 1. Storing Data\n        int[] data = { 1, 2, 3, 4, 5 };\n        Console.WriteLine(\"Original Data: \" + string.Join(\", \", data));\n\n        // 2. Mathematical Operations\n        int[] squaredData = data.Select(x => x * x).ToArray();\n        Console.WriteLine(\"Squared Data: \" + string.Join(\", \", squaredData));\n\n        // 3. Sorting and Searching\n        int[] sortedData = data.OrderBy(x => x).ToArray();\n        Console.WriteLine(\"Sorted Data: \" + string.Join(\", \", sortedData));\n\n        int searchValue = 3;\n        int searchIndex = Array.IndexOf(data, searchValue);\n        Console.WriteLine($\"Index of {searchValue}: {searchIndex}\");\n\n        // 4. Data Analysis\n        double meanValue = data.Average();\n        Console.WriteLine(\"Mean Value: \" + meanValue);\n\n        int sumValue = data.Sum();\n        Console.WriteLine(\"Sum Value: \" + sumValue);\n\n        // 5. Multidimensional Arrays\n        int[,] matrix = { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } };\n        Console.WriteLine(\"Original Matrix:\");\n        PrintMatrix(matrix);\n\n        int[,] transposedMatrix = Transpose(matrix);\n        Console.WriteLine(\"Transposed Matrix:\");\n        PrintMatrix(transposedMatrix);\n\n        // Example of matrix multiplication (identity matrix)\n        int[,] identityMatrix = { { 1, 0, 0 }, { 0, 1, 0 }, { 0, 0, 1 } };\n        int[,] productMatrix = Multiply(matrix, identityMatrix);\n        Console.WriteLine(\"Matrix Product with Identity Matrix:\");\n        PrintMatrix(productMatrix);\n\n        // Image Processing (simulated with a simple 2D array)\n        Random rand = new Random();\n        double[,] image = new double[5, 5];\n        for (int i = 0; i < 5; i++)\n            for (int j = 0; j < 5; j++)\n                image[i, j] = rand.NextDouble();\n        Console.WriteLine(\"Original Image:\");\n        PrintMatrix(image);\n\n        // Simple operation on image\n        double[,] brighterImage = new double[5, 5];\n        for (int i = 0; i < 5; i++)\n            for (int j = 0; j < 5; j++)\n                brighterImage[i, j] = image[i, j] * 1.2;\n        Console.WriteLine(\"Brighter Image:\");\n        PrintMatrix(brighterImage);\n    }\n\n    static void PrintMatrix(int[,] matrix)\n    {\n        for (int i = 0; i < matrix.GetLength(0); i++)\n        {\n            for (int j = 0; j < matrix.GetLength(1); j++)\n                Console.Write(matrix[i, j] + \" \");\n            Console.WriteLine();\n        }\n    }\n\n    static void PrintMatrix(double[,] matrix)\n    {\n        for (int i = 0; i < matrix.GetLength(0); i++)\n        {\n            for (int j = 0; j < matrix.GetLength(1); j++)\n                Console.Write(matrix[i, j].ToString(\"F2\") + \" \");\n            Console.WriteLine();\n        }\n    }\n\n    static int[,] Transpose(int[,] matrix)\n    {\n        int rows = matrix.GetLength(0);\n        int cols = matrix.GetLength(1);\n        int[,] transposed = new int[cols, rows];\n\n        for (int i = 0; i < rows; i++)\n            for (int j = 0; j < cols; j++)\n                transposed[j, i] = matrix[i, j];\n\n        return transposed;\n    }\n\n    static int[,] Multiply(int[,] a, int[,] b)\n    {\n        int rows = a.GetLength(0);\n        int cols = b.GetLength(1);\n        int innerDim = a.GetLength(1);\n        int[,] product = new int[rows, cols];\n\n        for (int i = 0; i < rows; i++)\n            for (int j = 0; j < cols; j++)\n                for (int k = 0; k < innerDim; k++)\n                    product[i, j] += a[i, k] * b[k, j];\n\n        return product;\n    }\n}\n\n"
          }
        },
        "rust": {
          "shortname": "rust",
          "displayname": "Rust",
          "ext": "rs",
          "css": "rust",
          "categories": "programming",
          "description": "",
          "snippets": {
            "regexps": "// Rust - regex_examples.rs\nextern crate regex;\nuse regex::Regex;\n\nfn main() {\n    // Pattern Matching\n    let pattern = Regex::new(r\"\\d+\").unwrap();  // Match one or more digits\n    let text = \"There are 123 apples\";\n    println!(\"Pattern Matching: {}\", if pattern.is_match(text) { \"Match found!\" } else { \"No match found.\" });\n\n    // Search and Replace\n    let text = \"Hello 123, meet 456\";\n    let result = pattern.replace_all(text, \"number\");\n    println!(\"Search and Replace: {}\", result);  // \"Hello number, meet number\"\n\n    // String Splitting\n    let text = \"apple, orange; banana, grape\";\n    let pattern = Regex::new(r\"[ ,;]+\").unwrap();\n    let result: Vec<&str> = pattern.split(text).collect();\n    println!(\"String Splitting: {:?}\", result);  // [\"apple\", \"orange\", \"banana\", \"grape\"]\n\n    // Extracting Substrings\n    let log_entry = \"The date is 2024-06-27\";\n    let pattern = Regex::new(r\"(\\d{4})-(\\d{2})-(\\d{2})\").unwrap();\n    if let Some(caps) = pattern.captures(log_entry) {\n        println!(\"Extracting Substrings: {:?}\", &caps[1..4]);  // [\"2024\", \"06\", \"27\"]\n    }\n\n    // Validation\n    let email = \"example@test.com\";\n    let pattern = Regex::new(r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\").unwrap();\n    println!(\"Validation: {}\", if pattern.is_match(email) { \"Valid email address!\" } else { \"Invalid email address.\" });\n\n    // Parsing Structured Text\n    let log_entry = \"127.0.0.1 - - [27/Jun/2024:10:00:00 +0000] \\\"GET /index.html HTTP/1.1\\\" 200 1234\";\n    let pattern = Regex::new(r\"(?P<ip>\\d+\\.\\d+\\.\\d+\\.\\d+) - - \\[(?P<date>[^\\]]+)\\] \\\"(?P<request>[^\\\"]+)\\\" (?P<status>\\d+) (?P<size>\\d+)\").unwrap();\n    if let Some(caps) = pattern.captures(log_entry) {\n        println!(\"Parsing Structured Text: {:?}\", caps);\n    }\n\n    // Removing Unwanted Characters\n    let text = \"Hello, World!\";\n    let pattern = Regex::new(r\"[^\\w\\s]\").unwrap();  // Remove all non-alphanumeric characters\n    let cleaned_text = pattern.replace_all(text, \"\");\n    println!(\"Removing Unwanted Characters: {}\", cleaned_text);  // \"Hello World\"\n\n    // Anchoring Searches\n    let text = \"The quick brown fox\";\n    let pattern = Regex::new(r\"\\bfox\\b\").unwrap();  // Match 'fox' as a whole word\n    println!(\"Anchoring Searches: {}\", if pattern.is_match(text) { \"Found\" } else { \"Not Found\" });\n\n    // Escaping Characters\n    let user_input = \"some[unsafe]input\";\n    let escaped_input = regex::escape(user_input);\n    let pattern = Regex::new(&escaped_input).unwrap();\n    println!(\"Escaping Characters: {:?}\", pattern);  // \"some\\[unsafe\\]input\"\n\n    // Conditional Matching\n    let pattern = Regex::new(r\"foo(?=bar)\").unwrap();  // Match 'foo' only if followed by 'bar'\n    let text = \"foobar and foo\";\n    let matches: Vec<&str> = pattern.find_iter(text).map(|mat| mat.as_str()).collect();\n    println!(\"Conditional Matching: {:?}\", matches);  // [\"foo\"]\n}\n\n",
            "arrays": "fn main() {\n    // 1. Storing Data\n    let data = vec![1, 2, 3, 4, 5];\n    println!(\"Original Data: {:?}\", data);\n\n    // 2. Mathematical Operations\n    let squared_data: Vec<i32> = data.iter().map(|&x| x * x).collect();\n    println!(\"Squared Data: {:?}\", squared_data);\n\n    // 3. Sorting and Searching\n    let mut sorted_data = data.clone();\n    sorted_data.sort();\n    println!(\"Sorted Data: {:?}\", sorted_data);\n\n    let search_value = 3;\n    if let Some(search_index) = data.iter().position(|&x| x == search_value) {\n        println!(\"Index of {}: {}\", search_value, search_index);\n    }\n\n    // 4. Data Analysis\n    let sum_value: i32 = data.iter().sum();\n    let mean_value = sum_value as f64 / data.len() as f64;\n    println!(\"Mean Value: {}\", mean_value);\n    println!(\"Sum Value: {}\", sum_value);\n\n    // 5. Multidimensional Arrays\n    let matrix: Vec<Vec<i32>> = vec![vec![1, 2, 3], vec![4, 5, 6], vec![7, 8, 9]];\n    println!(\"Original Matrix: {:?}\", matrix);\n\n    let transposed_matrix: Vec<Vec<i32>> = (0..matrix[0].len())\n        .map(|i| matrix.iter().map(|row| row[i]).collect())\n        .collect();\n    println!(\"Transposed Matrix: {:?}\", transposed_matrix);\n\n    // Example of matrix multiplication (identity matrix)\n    let identity_matrix: Vec<Vec<i32>> = vec![vec![1, 0, 0], vec![0, 1, 0], vec![0, 0, 1]];\n    let product_matrix: Vec<Vec<i32>> = matrix\n        .iter()\n        .map(|row| {\n            row.iter()\n                .enumerate()\n                .map(|(i, &val)| val * identity_matrix[i][i])\n                .collect()\n        })\n        .collect();\n    println!(\"Matrix Product with Identity Matrix: {:?}\", product_matrix);\n\n    // Image Processing (simulated with a simple 2D array)\n    let image: Vec<Vec<f64>> = (0..5).map(|_| (0..5).map(|_| rand::random()).collect()).collect();\n    println!(\"Original Image: {:?}\", image);\n\n    // Simple operation on image\n    let brighter_image: Vec<Vec<f64>> = image\n        .iter()\n        .map(|row| row.iter().map(|&pixel| pixel * 1.2).collect())\n        .collect();\n    println!(\"Brighter Image: {:?}\", brighter_image);\n}\n\n"
          }
        },
        "python": {
          "shortname": "python",
          "displayname": "Python",
          "ext": "py",
          "css": "python",
          "categories": "programming",
          "description": "",
          "snippets": {
            "regexps": "# Python - regex_examples.py\nimport re\n\n# Pattern Matching\npattern = r'\\d+'  # Match one or more digits\ntext = \"There are 123 apples\"\nmatch = re.search(pattern, text)\nprint(\"Pattern Matching:\", \"Match found!\" if match else \"No match found.\")\n\n# Search and Replace\ntext = \"Hello 123, meet 456\"\nresult = re.sub(r'\\d+', 'number', text)\nprint(\"Search and Replace:\", result)  # \"Hello number, meet number\"\n\n# String Splitting\ntext = \"apple, orange; banana, grape\"\nresult = re.split(r'[,;]', text)\nprint(\"String Splitting:\", result)  # [\"apple\", \" orange\", \" banana\", \" grape\"]\n\n# Extracting Substrings\nlog_entry = \"The date is 2024-06-27\"\npattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\nmatch = re.search(pattern, log_entry)\nif match:\n    print(\"Extracting Substrings:\", match.groups())  # (\"2024\", \"06\", \"27\")\n\n# Validation\nemail = \"example@test.com\"\npattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\nif re.match(pattern, email):\n    print(\"Validation: Valid email address!\")\nelse:\n    print(\"Validation: Invalid email address.\")\n\n# Parsing Structured Text\nlog_entry = \"127.0.0.1 - - [27/Jun/2024:10:00:00 +0000] \\\"GET /index.html HTTP/1.1\\\" 200 1234\"\npattern = r'(?P<ip>\\d+\\.\\d+\\.\\d+\\.\\d+) - - \\[(?P<date>[^\\]]+)\\] \"(?P<request>[^\"]+)\" (?P<status>\\d+) (?P<size>\\d+)'\nmatch = re.match(pattern, log_entry)\nif match:\n    print(\"Parsing Structured Text:\", match.groupdict())\n\n# Removing Unwanted Characters\ntext = \"Hello, World!\"\ncleaned_text = re.sub(r'[^\\w\\s]', '', text)  # Remove all non-alphanumeric characters\nprint(\"Removing Unwanted Characters:\", cleaned_text)  # \"Hello World\"\n\n# Anchoring Searches\ntext = \"The quick brown fox\"\npattern = r'\\bfox\\b'  # Match 'fox' as a whole word\nmatch = re.search(pattern, text)\nprint(\"Anchoring Searches:\", \"Found\" if match else \"Not Found\")\n\n# Escaping Characters\nuser_input = \"some[unsafe]input\"\nescaped_input = re.escape(user_input)\npattern = rf'{escaped_input}'\nprint(\"Escaping Characters:\", pattern)  # \"some\\[unsafe\\]input\"\n\n# Conditional Matching\npattern = r'foo(?=bar)'  # Match 'foo' only if followed by 'bar'\ntext = \"foobar and foo\"\nmatches = re.findall(pattern, text)\nprint(\"Conditional Matching:\", matches)  # [\"foo\"]\n\n",
            "arrays": "import numpy as np\n\n# 1. Storing Data\ndata = np.array([1, 2, 3, 4, 5])\nprint(\"Original Data:\", data)\n\n# 2. Mathematical Operations\nsquared_data = data ** 2\nprint(\"Squared Data:\", squared_data)\n\n# 3. Sorting and Searching\nsorted_data = np.sort(data)\nprint(\"Sorted Data:\", sorted_data)\n\nsearch_value = 3\nsearch_index = np.where(data == search_value)\nprint(f\"Index of {search_value}:\", search_index[0][0])\n\n# 4. Data Analysis\nmean_value = np.mean(data)\nprint(\"Mean Value:\", mean_value)\n\nsum_value = np.sum(data)\nprint(\"Sum Value:\", sum_value)\n\n# 5. Multidimensional Arrays\nmatrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nprint(\"Original Matrix:\\n\", matrix)\n\ntransposed_matrix = np.transpose(matrix)\nprint(\"Transposed Matrix:\\n\", transposed_matrix)\n\n# Example of matrix multiplication\nidentity_matrix = np.eye(3)\nproduct_matrix = np.matmul(matrix, identity_matrix)\nprint(\"Matrix Product with Identity Matrix:\\n\", product_matrix)\n\n# Image Processing (simulated with a simple 2D array)\nimage = np.random.rand(5, 5)  # Simulated grayscale image\nprint(\"Original Image:\\n\", image)\n\n# Simple operation on image\nbrighter_image = image * 1.2  # Increase brightness\nprint(\"Brighter Image:\\n\", brighter_image)\n\n\n"
          }
        }
      },
      "aliases": {
        "regexps": "regexps",
        "regular expressions": "regexps",
        "pattern matching": "regexps",
        "validation": "regexps",
        "string matching": "regexps",
        "pcre": "regexps",
        "search pattern": "regexps",
        "matcher": "regexps",
        "arrays": "arrays",
        "list": "arrays",
        "ordered list": "arrays",
        "vector": "arrays"
      },
      "displayname": "Programming Languages"
    }
  }
};